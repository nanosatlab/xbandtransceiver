
LMX2572_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d4  080042d4  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080042dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000204  080044e0  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  080044e0  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b858  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001971  00000000  00000000  0002ba8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0002d400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002df28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025730  00000000  00000000  0002e978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ad3  00000000  00000000  000540a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7643  00000000  00000000  0005cb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001441be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de8  00000000  00000000  0014423c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800426c 	.word	0x0800426c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	0800426c 	.word	0x0800426c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LMX2572_write>:
//***********************
//***** This Works! *****
//***********************

// Writes a register to the PLL
void LMX2572_write(SPI_HandleTypeDef *hspi, uint32_t value) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	uint8_t spi_buf[3] = {0,0,0};
 80004d2:	2300      	movs	r3, #0
 80004d4:	733b      	strb	r3, [r7, #12]
 80004d6:	2300      	movs	r3, #0
 80004d8:	737b      	strb	r3, [r7, #13]
 80004da:	2300      	movs	r3, #0
 80004dc:	73bb      	strb	r3, [r7, #14]

	spi_buf[2] = value;
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	73bb      	strb	r3, [r7, #14]
	spi_buf[1] = value >> 8;
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	0a1b      	lsrs	r3, r3, #8
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	737b      	strb	r3, [r7, #13]
	spi_buf[0] = value >> 16;
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	0c1b      	lsrs	r3, r3, #16
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// CSB LOW
 80004f4:	2200      	movs	r2, #0
 80004f6:	2110      	movs	r1, #16
 80004f8:	4809      	ldr	r0, [pc, #36]	; (8000520 <LMX2572_write+0x58>)
 80004fa:	f001 f833 	bl	8001564 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
 80004fe:	f107 010c 	add.w	r1, r7, #12
 8000502:	2364      	movs	r3, #100	; 0x64
 8000504:	2203      	movs	r2, #3
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f002 fbe5 	bl	8002cd6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
 800050c:	2201      	movs	r2, #1
 800050e:	2110      	movs	r1, #16
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <LMX2572_write+0x58>)
 8000512:	f001 f827 	bl	8001564 <HAL_GPIO_WritePin>
}
 8000516:	bf00      	nop
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	48000400 	.word	0x48000400

08000524 <LMX2572_load_regs>:

// Loads the registers to the PLL
void LMX2572_load_regs(SPI_HandleTypeDef *hspi){
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
	while ((R[125-i] & 0x00FF0000) != 0) {
 8000530:	e00c      	b.n	800054c <LMX2572_load_regs+0x28>
		LMX2572_write(hspi, R[125-i]);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000538:	4a10      	ldr	r2, [pc, #64]	; (800057c <LMX2572_load_regs+0x58>)
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	4619      	mov	r1, r3
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff ffc1 	bl	80004c8 <LMX2572_write>
		i++;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
	while ((R[125-i] & 0x00FF0000) != 0) {
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LMX2572_load_regs+0x58>)
 8000554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1e8      	bne.n	8000532 <LMX2572_load_regs+0xe>
	}
	LMX2572_write(hspi, R[125-i]);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <LMX2572_load_regs+0x58>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	4619      	mov	r1, r3
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ffaa 	bl	80004c8 <LMX2572_write>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000220 	.word	0x20000220

08000580 <LMX2572_det_param>:
	if (pll.fosc * pll.doubler / pll.r_pre * pll.mult > 100) R[9] |= (0x01 << 14);
	else R[9] &= ~(0x01 << 14);
}

// Determine N, NUM and DEN values from target frequency and fpd
PLL LMX2572_det_param(struct PLL pll){
 8000580:	b084      	sub	sp, #16
 8000582:	b4b0      	push	{r4, r5, r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	f107 001c 	add.w	r0, r7, #28
 800058e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pll.fpd = pll.fosc*pll.doubler/pll.r_pre* pll.mult/pll.r;
 8000592:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000596:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80005aa:	ee07 3a90 	vmov	s15, r3
 80005ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80005b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005ca:	ee07 3a90 	vmov	s15, r3
 80005ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pll.n = pll.frequency/pll.fpd;
 80005da:	edd7 6a07 	vldr	s13, [r7, #28]
 80005de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80005e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ea:	ee17 3a90 	vmov	r3, s15
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	863b      	strh	r3, [r7, #48]	; 0x30
	pll.den = 1000;
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
	pll.num = (pll.frequency/pll.fpd-pll.n)*pll.den;
 80005f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80005fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000604:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000614:	ee07 3a90 	vmov	s15, r3
 8000618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800061c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000624:	ee17 3a90 	vmov	r3, s15
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
	pll.Fvco = pll.fpd * pll.n + (pll.num * pll.fpd / pll.den);
 800062a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800062e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000646:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800064a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800064e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000658:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a08 	vstr	s15, [r7, #32]

	return pll;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	461d      	mov	r5, r3
 8000668:	f107 041c 	add.w	r4, r7, #28
 800066c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000674:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000678:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bcb0      	pop	{r4, r5, r7}
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <LMX2572_defaultConfig>:

// Loads PLL default registers to the PLL register bank
PLL LMX2572_defaultConfig(struct PLL pll){
 8000688:	b084      	sub	sp, #16
 800068a:	b4b0      	push	{r4, r5, r7}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for(int i=0; i<126; i++) R[i] = R_default[125-i];
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e00c      	b.n	80006ba <LMX2572_defaultConfig+0x32>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <LMX2572_defaultConfig+0xc8>)
 80006a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ac:	4929      	ldr	r1, [pc, #164]	; (8000754 <LMX2572_defaultConfig+0xcc>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b7d      	cmp	r3, #125	; 0x7d
 80006be:	ddef      	ble.n	80006a0 <LMX2572_defaultConfig+0x18>

	pll.frequency = PLL_DEFAULT_frequency;
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <LMX2572_defaultConfig+0xd0>)
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
	pll.fosc = PLL_DEFAULT_fosc;
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <LMX2572_defaultConfig+0xd4>)
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
	pll.doubler = PLL_DEFAULT_doubler;
 80006c8:	2301      	movs	r3, #1
 80006ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pll.r_pre = PLL_DEFAULT_r_pre;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pll.r = PLL_DEFAULT_r;
 80006d4:	2301      	movs	r3, #1
 80006d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	pll.mult = PLL_DEFAULT_mult;
 80006da:	2302      	movs	r3, #2
 80006dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	pll.CPG = PLL_DEFAULT_CPG;
 80006e0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	pll.VCO = PLL_DEFAULT_VCO;
 80006e8:	2304      	movs	r3, #4
 80006ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	pll.VCO_force = PLL_DEFAULT_VCO_force;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	pll.MASH_order = PLL_DEFAULT_MASH_order;
 80006f4:	2303      	movs	r3, #3
 80006f6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	pll.PFD_DLY_SEL = PLL_DEFAULT_PFD_DLY_SEL;
 80006fa:	2303      	movs	r3, #3
 80006fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	pll.chdiv = PLL_DEFAULT_chdiv;
 8000700:	2302      	movs	r3, #2
 8000702:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	pll.out_mux_a = PLL_DEFAULT_out_mux_a;
 8000706:	2301      	movs	r3, #1
 8000708:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	pll.out_mux_b = PLL_DEFAULT_out_mux_b;
 800070c:	2301      	movs	r3, #1
 800070e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	pll.out_pd_a = PLL_DEFAULT_out_pd_a;
 8000712:	2301      	movs	r3, #1
 8000714:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	pll.out_pd_b = PLL_DEFAULT_out_pd_b;
 8000718:	2301      	movs	r3, #1
 800071a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	pll.out_pwr_a = PLL_DEFAULT_out_pwr_a;
 800071e:	2314      	movs	r3, #20
 8000720:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	pll.out_pwr_b = PLL_DEFAULT_out_pwr_b;
 8000724:	2300      	movs	r3, #0
 8000726:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	return pll;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	461d      	mov	r5, r3
 800072e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800073e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bcb0      	pop	{r4, r5, r7}
 800074a:	b004      	add	sp, #16
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000
 8000754:	20000220 	.word	0x20000220
 8000758:	459c4000 	.word	0x459c4000
 800075c:	41c80000 	.word	0x41c80000

08000760 <LMX2572_set_frequency>:
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
}

// Sets PLL N, DEN and NUM registers
void LMX2572_set_frequency(struct PLL pll) {
 8000760:	b084      	sub	sp, #16
 8000762:	b490      	push	{r4, r7}
 8000764:	af00      	add	r7, sp, #0
 8000766:	f107 0408 	add.w	r4, r7, #8
 800076a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Sets N
	R[34] &= ~(0x07 << 0);
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000774:	f023 0307 	bic.w	r3, r3, #7
 8000778:	4a30      	ldr	r2, [pc, #192]	; (800083c <LMX2572_set_frequency+0xdc>)
 800077a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	R[34] |= (((pll.n >> 16) & 0x07) << 0);
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000784:	4a2d      	ldr	r2, [pc, #180]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000786:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	R[36] &= ~(0xFFFF << 0);
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <LMX2572_set_frequency+0xdc>)
 800078c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	041b      	lsls	r3, r3, #16
 8000794:	4a29      	ldr	r2, [pc, #164]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	R[36] |= ((pll.n & 0xFFFF) << 0);
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <LMX2572_set_frequency+0xdc>)
 800079c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007a0:	8bba      	ldrh	r2, [r7, #28]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	// Sets DEN
	R[38] &= ~(0xFFFF << 0);
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	041b      	lsls	r3, r3, #16
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	R[38] |= ((pll.den >> 16) << 0);
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	4313      	orrs	r3, r2
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	R[39] &= ~(0xFFFF << 0);
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	041b      	lsls	r3, r3, #16
 80007d6:	4a19      	ldr	r2, [pc, #100]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	R[39] |= ((pll.den & 0x0000FFFF) << 0);
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	4a14      	ldr	r2, [pc, #80]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	// Sets NUM
	R[42] &= ~(0xFFFF << 0);
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80007f4:	0c1b      	lsrs	r3, r3, #16
 80007f6:	041b      	lsls	r3, r3, #16
 80007f8:	4a10      	ldr	r2, [pc, #64]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007fa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	R[42] |= ((pll.num >> 16) << 0);
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000800:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	0c1b      	lsrs	r3, r3, #16
 8000808:	4313      	orrs	r3, r2
 800080a:	4a0c      	ldr	r2, [pc, #48]	; (800083c <LMX2572_set_frequency+0xdc>)
 800080c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	R[43] &= ~(0xFFFF << 0);
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000816:	0c1b      	lsrs	r3, r3, #16
 8000818:	041b      	lsls	r3, r3, #16
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <LMX2572_set_frequency+0xdc>)
 800081c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	R[43] |= ((pll.num & 0x0000FFFF) << 0);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000822:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	b29b      	uxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	4a03      	ldr	r2, [pc, #12]	; (800083c <LMX2572_set_frequency+0xdc>)
 800082e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc90      	pop	{r4, r7}
 8000838:	b004      	add	sp, #16
 800083a:	4770      	bx	lr
 800083c:	20000220 	.word	0x20000220

08000840 <LMX2572_read>:
//************************
//***** TO BE TESTED *****
//************************

// Reads a register value from the PLL
uint32_t LMX2572_read(SPI_HandleTypeDef *hspi, uint32_t value) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	uint32_t read = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
	uint8_t read_value[2] = {0x00, 0x00};
 800084e:	2300      	movs	r3, #0
 8000850:	743b      	strb	r3, [r7, #16]
 8000852:	2300      	movs	r3, #0
 8000854:	747b      	strb	r3, [r7, #17]
	uint8_t spi_buf[3] = {0,0,0};
 8000856:	2300      	movs	r3, #0
 8000858:	733b      	strb	r3, [r7, #12]
 800085a:	2300      	movs	r3, #0
 800085c:	737b      	strb	r3, [r7, #13]
 800085e:	2300      	movs	r3, #0
 8000860:	73bb      	strb	r3, [r7, #14]
	spi_buf[2] = value | (1<<7);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73bb      	strb	r3, [r7, #14]
	spi_buf[1] = value >> 8;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	b2db      	uxtb	r3, r3
 8000874:	737b      	strb	r3, [r7, #13]
	spi_buf[0] = value >> 16;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	0c1b      	lsrs	r3, r3, #16
 800087a:	b2db      	uxtb	r3, r3
 800087c:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// CSB LOW
 800087e:	2200      	movs	r2, #0
 8000880:	2110      	movs	r1, #16
 8000882:	4813      	ldr	r0, [pc, #76]	; (80008d0 <LMX2572_read+0x90>)
 8000884:	f000 fe6e 	bl	8001564 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
 8000888:	f107 010c 	add.w	r1, r7, #12
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	2203      	movs	r2, #3
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f002 fa20 	bl	8002cd6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, read_value, 2, 10);
 8000896:	f107 0110 	add.w	r1, r7, #16
 800089a:	230a      	movs	r3, #10
 800089c:	2202      	movs	r2, #2
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f002 fb87 	bl	8002fb2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
 80008a4:	2201      	movs	r2, #1
 80008a6:	2110      	movs	r1, #16
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <LMX2572_read+0x90>)
 80008aa:	f000 fe5b 	bl	8001564 <HAL_GPIO_WritePin>

	read += read_value[0];
 80008ae:	7c3b      	ldrb	r3, [r7, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	4413      	add	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]
	read += read_value[1] >> 8;
 80008b8:	7c7b      	ldrb	r3, [r7, #17]
 80008ba:	121b      	asrs	r3, r3, #8
 80008bc:	461a      	mov	r2, r3
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	4413      	add	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]
	return read;
 80008c4:	697b      	ldr	r3, [r7, #20]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	48000400 	.word	0x48000400

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	b0a5      	sub	sp, #148	; 0x94
 80008d8:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 fb17 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f87d 	bl	80009dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 f95f 	bl	8000ba4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e6:	f000 f92d 	bl	8000b44 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80008ea:	f000 f8ed 	bl	8000ac8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  PLL mypll;
  mypll = LMX2572_defaultConfig(mypll);
 80008ee:	f107 0634 	add.w	r6, r7, #52	; 0x34
 80008f2:	466d      	mov	r5, sp
 80008f4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80008f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000900:	6823      	ldr	r3, [r4, #0]
 8000902:	602b      	str	r3, [r5, #0]
 8000904:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800090a:	4630      	mov	r0, r6
 800090c:	f7ff febc 	bl	8000688 <LMX2572_defaultConfig>
  mypll = LMX2572_det_param(mypll);
 8000910:	463e      	mov	r6, r7
 8000912:	466d      	mov	r5, sp
 8000914:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800091c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800091e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	602b      	str	r3, [r5, #0]
 8000924:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800092a:	4630      	mov	r0, r6
 800092c:	f7ff fe28 	bl	8000580 <LMX2572_det_param>
 8000930:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000934:	463d      	mov	r5, r7
 8000936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LMX2572_set_frequency(mypll);
 8000946:	466d      	mov	r5, sp
 8000948:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800094c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000950:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000954:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000958:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800095c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095e:	f7ff feff 	bl	8000760 <LMX2572_set_frequency>
  LMX2572_load_regs(&hspi1);
 8000962:	481c      	ldr	r0, [pc, #112]	; (80009d4 <main+0x100>)
 8000964:	f7ff fdde 	bl	8000524 <LMX2572_load_regs>
  HAL_Delay(1000);
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f000 fb4a 	bl	8001004 <HAL_Delay>

  uint32_t read;
  read= LMX2572_read(&hspi1, R[0]);
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <main+0x104>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <main+0x100>)
 8000978:	f7ff ff62 	bl	8000840 <LMX2572_read>
 800097c:	6678      	str	r0, [r7, #100]	; 0x64
  read = LMX2572_read(&hspi1, R[1]);
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <main+0x104>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	4619      	mov	r1, r3
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <main+0x100>)
 8000986:	f7ff ff5b 	bl	8000840 <LMX2572_read>
 800098a:	6678      	str	r0, [r7, #100]	; 0x64
  read = LMX2572_read(&hspi1, R[2]);
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <main+0x104>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	4619      	mov	r1, r3
 8000992:	4810      	ldr	r0, [pc, #64]	; (80009d4 <main+0x100>)
 8000994:	f7ff ff54 	bl	8000840 <LMX2572_read>
 8000998:	6678      	str	r0, [r7, #100]	; 0x64
  read = LMX2572_read(&hspi1, R[3]);
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <main+0x104>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <main+0x100>)
 80009a2:	f7ff ff4d 	bl	8000840 <LMX2572_read>
 80009a6:	6678      	str	r0, [r7, #100]	; 0x64
  read = LMX2572_read(&hspi1, R[4]);
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <main+0x104>)
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	4619      	mov	r1, r3
 80009ae:	4809      	ldr	r0, [pc, #36]	; (80009d4 <main+0x100>)
 80009b0:	f7ff ff46 	bl	8000840 <LMX2572_read>
 80009b4:	6678      	str	r0, [r7, #100]	; 0x64
  read = LMX2572_read(&hspi1, R[5]);
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <main+0x104>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <main+0x100>)
 80009be:	f7ff ff3f 	bl	8000840 <LMX2572_read>
 80009c2:	6678      	str	r0, [r7, #100]	; 0x64
  read = LMX2572_read(&hspi1, R[6]);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <main+0x104>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4802      	ldr	r0, [pc, #8]	; (80009d4 <main+0x100>)
 80009cc:	f7ff ff38 	bl	8000840 <LMX2572_read>
 80009d0:	6678      	str	r0, [r7, #100]	; 0x64

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <main+0xfe>
 80009d4:	20000610 	.word	0x20000610
 80009d8:	20000418 	.word	0x20000418

080009dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0b8      	sub	sp, #224	; 0xe0
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80009e6:	2244      	movs	r2, #68	; 0x44
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 fc36 	bl	800425c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2288      	movs	r2, #136	; 0x88
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fc28 	bl	800425c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1a:	2310      	movs	r3, #16
 8000a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a26:	2302      	movs	r3, #2
 8000a28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a32:	230a      	movs	r3, #10
 8000a34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fe04 	bl	800165c <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a5a:	f000 f921 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2303      	movs	r3, #3
 8000a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a7c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a80:	2104      	movs	r1, #4
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f9d0 	bl	8001e28 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a8e:	f000 f907 	bl	8000ca0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fbc7 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000aa8:	f000 f8fa 	bl	8000ca0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ab0:	f000 fd7e 	bl	80015b0 <HAL_PWREx_ControlVoltageScaling>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000aba:	f000 f8f1 	bl	8000ca0 <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	37e0      	adds	r7, #224	; 0xe0
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_SPI1_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000ae2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ae6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000afe:	2228      	movs	r2, #40	; 0x28
 8000b00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b16:	2207      	movs	r2, #7
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_SPI1_Init+0x74>)
 8000b28:	f002 f832 	bl	8002b90 <HAL_SPI_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f000 f8b5 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000610 	.word	0x20000610
 8000b40:	40013000 	.word	0x40013000

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_USART2_UART_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x58>)
 8000b88:	f002 ff0a 	bl	80039a0 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b92:	f000 f885 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000674 	.word	0x20000674
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a34      	ldr	r2, [pc, #208]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a28      	ldr	r2, [pc, #160]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b23      	ldr	r3, [pc, #140]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a22      	ldr	r2, [pc, #136]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b20      	ldr	r3, [pc, #128]	; (8000c90 <MX_GPIO_Init+0xec>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c24:	f000 fc9e 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	4819      	ldr	r0, [pc, #100]	; (8000c94 <MX_GPIO_Init+0xf0>)
 8000c2e:	f000 fc99 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_GPIO_Init+0xf4>)
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4815      	ldr	r0, [pc, #84]	; (8000c9c <MX_GPIO_Init+0xf8>)
 8000c48:	f000 fae4 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f000 fad4 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_GPIO_Init+0xf0>)
 8000c84:	f000 fac6 	bl	8001214 <HAL_GPIO_Init>

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	10210000 	.word	0x10210000
 8000c9c:	48000800 	.word	0x48000800

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <Error_Handler+0x6>

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_MspInit+0x44>)
 8000cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_MspInit+0x44>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_MspInit+0x44>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x44>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x44>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x44>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000

08000cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_SPI_MspInit+0x7c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d128      	bne.n	8000d64 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_SPI_MspInit+0x80>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	4a16      	ldr	r2, [pc, #88]	; (8000d70 <HAL_SPI_MspInit+0x80>)
 8000d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d1c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_SPI_MspInit+0x80>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_SPI_MspInit+0x80>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_SPI_MspInit+0x80>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_SPI_MspInit+0x80>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d42:	23e0      	movs	r3, #224	; 0xe0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d52:	2305      	movs	r3, #5
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f000 fa58 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40013000 	.word	0x40013000
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_UART_MspInit+0x7c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d128      	bne.n	8000de8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6593      	str	r3, [r2, #88]	; 0x58
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_UART_MspInit+0x80>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dc6:	230c      	movs	r3, #12
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd6:	2307      	movs	r3, #7
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f000 fa16 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	; 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40004400 	.word	0x40004400
 8000df4:	40021000 	.word	0x40021000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 f8be 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <SystemInit+0x64>)
 8000e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <SystemInit+0x64>)
 8000e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <SystemInit+0x68>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <SystemInit+0x68>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <SystemInit+0x68>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <SystemInit+0x68>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <SystemInit+0x68>)
 8000e78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <SystemInit+0x68>)
 8000e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <SystemInit+0x68>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <SystemInit+0x68>)
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <SystemInit+0x68>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SystemInit+0x64>)
 8000e9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ebc:	f7ff ffc6 	bl	8000e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ec0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ec2:	e003      	b.n	8000ecc <LoopCopyDataInit>

08000ec4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ec6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ec8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000eca:	3104      	adds	r1, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ed0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ed2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ed4:	d3f6      	bcc.n	8000ec4 <CopyDataInit>
	ldr	r2, =_sbss
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ed8:	e002      	b.n	8000ee0 <LoopFillZerobss>

08000eda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000edc:	f842 3b04 	str.w	r3, [r2], #4

08000ee0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <LoopForever+0x16>)
	cmp	r2, r3
 8000ee2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ee4:	d3f9      	bcc.n	8000eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f003 f995 	bl	8004214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eea:	f7ff fcf3 	bl	80008d4 <main>

08000eee <LoopForever>:

LoopForever:
    b LoopForever
 8000eee:	e7fe      	b.n	8000eee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000ef4:	080042dc 	.word	0x080042dc
	ldr	r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000efc:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8000f00:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 8000f04:	200006f8 	.word	0x200006f8

08000f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC1_2_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <HAL_Init+0x3c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <HAL_Init+0x3c>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 f942 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 f80f 	bl	8000f4c <HAL_InitTick>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	e001      	b.n	8000f3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3a:	f7ff feb5 	bl	8000ca8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40022000 	.word	0x40022000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_InitTick+0x6c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d023      	beq.n	8000fa8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_InitTick+0x70>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0x6c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f93f 	bl	80011fa <HAL_SYSTICK_Config>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10f      	bne.n	8000fa2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d809      	bhi.n	8000f9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f917 	bl	80011c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_InitTick+0x74>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e007      	b.n	8000fac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e004      	b.n	8000fac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	73fb      	strb	r3, [r7, #15]
 8000fa6:	e001      	b.n	8000fac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000200 	.word	0x20000200
 8000fbc:	200001f8 	.word	0x200001f8
 8000fc0:	200001fc 	.word	0x200001fc

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000200 	.word	0x20000200
 8000fe8:	200006f4 	.word	0x200006f4

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200006f4 	.word	0x200006f4

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff ffee 	bl	8000fec <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <HAL_Delay+0x40>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffde 	bl	8000fec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000200 	.word	0x20000200

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff47 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff5c 	bl	8001090 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffb0 	bl	8001168 <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001222:	e17f      	b.n	8001524 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2101      	movs	r1, #1
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8171 	beq.w	800151e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d00b      	beq.n	800125c <HAL_GPIO_Init+0x48>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d007      	beq.n	800125c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001250:	2b11      	cmp	r3, #17
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b12      	cmp	r3, #18
 800125a:	d130      	bne.n	80012be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68da      	ldr	r2, [r3, #12]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001292:	2201      	movs	r2, #1
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f003 0201 	and.w	r2, r3, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d118      	bne.n	80012fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	08db      	lsrs	r3, r3, #3
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	2203      	movs	r2, #3
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x128>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b12      	cmp	r3, #18
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80ac 	beq.w	800151e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_GPIO_Init+0x32c>)
 80013c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ca:	4a5d      	ldr	r2, [pc, #372]	; (8001540 <HAL_GPIO_Init+0x32c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6613      	str	r3, [r2, #96]	; 0x60
 80013d2:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_GPIO_Init+0x32c>)
 80013d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013de:	4a59      	ldr	r2, [pc, #356]	; (8001544 <HAL_GPIO_Init+0x330>)
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	3302      	adds	r3, #2
 80013e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001408:	d025      	beq.n	8001456 <HAL_GPIO_Init+0x242>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4e      	ldr	r2, [pc, #312]	; (8001548 <HAL_GPIO_Init+0x334>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d01f      	beq.n	8001452 <HAL_GPIO_Init+0x23e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4d      	ldr	r2, [pc, #308]	; (800154c <HAL_GPIO_Init+0x338>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x23a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4c      	ldr	r2, [pc, #304]	; (8001550 <HAL_GPIO_Init+0x33c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x236>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4b      	ldr	r2, [pc, #300]	; (8001554 <HAL_GPIO_Init+0x340>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x232>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4a      	ldr	r2, [pc, #296]	; (8001558 <HAL_GPIO_Init+0x344>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x22e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	; (800155c <HAL_GPIO_Init+0x348>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x22a>
 800143a:	2306      	movs	r3, #6
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800143e:	2307      	movs	r3, #7
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x244>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x244>
 8001456:	2300      	movs	r3, #0
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001468:	4936      	ldr	r1, [pc, #216]	; (8001544 <HAL_GPIO_Init+0x330>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_GPIO_Init+0x34c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800149a:	4a31      	ldr	r2, [pc, #196]	; (8001560 <HAL_GPIO_Init+0x34c>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_GPIO_Init+0x34c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <HAL_GPIO_Init+0x34c>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_GPIO_Init+0x34c>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_GPIO_Init+0x34c>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_GPIO_Init+0x34c>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_GPIO_Init+0x34c>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	f47f ae78 	bne.w	8001224 <HAL_GPIO_Init+0x10>
  }
}
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	48000400 	.word	0x48000400
 800154c:	48000800 	.word	0x48000800
 8001550:	48000c00 	.word	0x48000c00
 8001554:	48001000 	.word	0x48001000
 8001558:	48001400 	.word	0x48001400
 800155c:	48001800 	.word	0x48001800
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001580:	e002      	b.n	8001588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_PWREx_GetVoltageRange+0x18>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000

080015b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015be:	d130      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015cc:	d038      	beq.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d6:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2232      	movs	r2, #50	; 0x32
 80015e4:	fb02 f303 	mul.w	r3, r2, r3
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	3301      	adds	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f4:	e002      	b.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001608:	d102      	bne.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x60>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f2      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161c:	d110      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e00f      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162e:	d007      	beq.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40007000 	.word	0x40007000
 8001654:	200001f8 	.word	0x200001f8
 8001658:	431bde83 	.word	0x431bde83

0800165c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e3d4      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166e:	4ba1      	ldr	r3, [pc, #644]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001678:	4b9e      	ldr	r3, [pc, #632]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 80e4 	beq.w	8001858 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d007      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4a>
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	f040 808b 	bne.w	80017b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	f040 8087 	bne.w	80017b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a6:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_RCC_OscConfig+0x62>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e3ac      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1a      	ldr	r2, [r3, #32]
 80016c2:	4b8c      	ldr	r3, [pc, #560]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <HAL_RCC_OscConfig+0x7c>
 80016ce:	4b89      	ldr	r3, [pc, #548]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d6:	e005      	b.n	80016e4 <HAL_RCC_OscConfig+0x88>
 80016d8:	4b86      	ldr	r3, [pc, #536]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80016da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d223      	bcs.n	8001730 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fd3f 	bl	8002170 <RCC_SetFlashLatencyFromMSIRange>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e38d      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fc:	4b7d      	ldr	r3, [pc, #500]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a7c      	ldr	r2, [pc, #496]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001702:	f043 0308 	orr.w	r3, r3, #8
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b7a      	ldr	r3, [pc, #488]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4977      	ldr	r1, [pc, #476]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001716:	4313      	orrs	r3, r2
 8001718:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4972      	ldr	r1, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
 800172e:	e025      	b.n	800177c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a6f      	ldr	r2, [pc, #444]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001736:	f043 0308 	orr.w	r3, r3, #8
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	496a      	ldr	r1, [pc, #424]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	4965      	ldr	r1, [pc, #404]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fcff 	bl	8002170 <RCC_SetFlashLatencyFromMSIRange>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e34d      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800177c:	f000 fc36 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001780:	4601      	mov	r1, r0
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	4a5a      	ldr	r2, [pc, #360]	; (80018f8 <HAL_RCC_OscConfig+0x29c>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	fa21 f303 	lsr.w	r3, r1, r3
 8001798:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_RCC_OscConfig+0x2a0>)
 800179a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800179c:	4b58      	ldr	r3, [pc, #352]	; (8001900 <HAL_RCC_OscConfig+0x2a4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fbd3 	bl	8000f4c <HAL_InitTick>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d052      	beq.n	8001856 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	e331      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d032      	beq.n	8001822 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017bc:	4b4d      	ldr	r3, [pc, #308]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a4c      	ldr	r2, [pc, #304]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc10 	bl	8000fec <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d0:	f7ff fc0c 	bl	8000fec <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e31a      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e2:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a40      	ldr	r2, [pc, #256]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	493b      	ldr	r1, [pc, #236]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	4936      	ldr	r1, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e01a      	b.n	8001858 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a33      	ldr	r2, [pc, #204]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800182e:	f7ff fbdd 	bl	8000fec <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001836:	f7ff fbd9 	bl	8000fec <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e2e7      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001848:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f0      	bne.n	8001836 <HAL_RCC_OscConfig+0x1da>
 8001854:	e000      	b.n	8001858 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001856:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d074      	beq.n	800194e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b08      	cmp	r3, #8
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x21a>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d10e      	bne.n	800188e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d10b      	bne.n	800188e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d064      	beq.n	800194c <HAL_RCC_OscConfig+0x2f0>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d160      	bne.n	800194c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e2c4      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x24a>
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e01d      	b.n	80018e2 <HAL_RCC_OscConfig+0x286>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0x26e>
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80018b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e00b      	b.n	80018e2 <HAL_RCC_OscConfig+0x286>
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80018d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_RCC_OscConfig+0x298>)
 80018dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d01c      	beq.n	8001924 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb7f 	bl	8000fec <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f0:	e011      	b.n	8001916 <HAL_RCC_OscConfig+0x2ba>
 80018f2:	bf00      	nop
 80018f4:	40021000 	.word	0x40021000
 80018f8:	08004284 	.word	0x08004284
 80018fc:	200001f8 	.word	0x200001f8
 8001900:	200001fc 	.word	0x200001fc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fb72 	bl	8000fec <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e280      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	4baf      	ldr	r3, [pc, #700]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x2a8>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fb62 	bl	8000fec <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fb5e 	bl	8000fec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e26c      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	4ba5      	ldr	r3, [pc, #660]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x2d0>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d060      	beq.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x310>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d119      	bne.n	800199a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d116      	bne.n	800199a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196c:	4b99      	ldr	r3, [pc, #612]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_OscConfig+0x328>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e249      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	4990      	ldr	r1, [pc, #576]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001998:	e040      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d023      	beq.n	80019ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a2:	4b8c      	ldr	r3, [pc, #560]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a8b      	ldr	r2, [pc, #556]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff fb1d 	bl	8000fec <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fb19 	bl	8000fec <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e227      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b82      	ldr	r3, [pc, #520]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b7f      	ldr	r3, [pc, #508]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	497c      	ldr	r1, [pc, #496]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e018      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b7a      	ldr	r3, [pc, #488]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a79      	ldr	r2, [pc, #484]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 80019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff faf9 	bl	8000fec <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff faf5 	bl	8000fec <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e203      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d03c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01c      	beq.n	8001a6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a30:	4b68      	ldr	r3, [pc, #416]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a36:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff fad4 	bl	8000fec <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fad0 	bl	8000fec <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1de      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5a:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0ef      	beq.n	8001a48 <HAL_RCC_OscConfig+0x3ec>
 8001a68:	e01b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a70:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fab7 	bl	8000fec <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff fab3 	bl	8000fec <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1c1      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ef      	bne.n	8001a82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80a6 	beq.w	8001bfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ab4:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10d      	bne.n	8001adc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a43      	ldr	r2, [pc, #268]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
 8001acc:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001adc:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <HAL_RCC_OscConfig+0x57c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d118      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_RCC_OscConfig+0x57c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a3a      	ldr	r2, [pc, #232]	; (8001bd8 <HAL_RCC_OscConfig+0x57c>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa7a 	bl	8000fec <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afc:	f7ff fa76 	bl	8000fec <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e184      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0e:	4b32      	ldr	r3, [pc, #200]	; (8001bd8 <HAL_RCC_OscConfig+0x57c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d108      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4d8>
 8001b22:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b28:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b32:	e024      	b.n	8001b7e <HAL_RCC_OscConfig+0x522>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d110      	bne.n	8001b5e <HAL_RCC_OscConfig+0x502>
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a20      	ldr	r2, [pc, #128]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5c:	e00f      	b.n	8001b7e <HAL_RCC_OscConfig+0x522>
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b64:	4a1b      	ldr	r2, [pc, #108]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b74:	4a17      	ldr	r2, [pc, #92]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001b76:	f023 0304 	bic.w	r3, r3, #4
 8001b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d016      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b86:	f7ff fa31 	bl	8000fec <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b8e:	f7ff fa2d 	bl	8000fec <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e139      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_OscConfig+0x578>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0ed      	beq.n	8001b8e <HAL_RCC_OscConfig+0x532>
 8001bb2:	e01a      	b.n	8001bea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fa1a 	bl	8000fec <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fa16 	bl	8000fec <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d906      	bls.n	8001bdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e122      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bdc:	4b90      	ldr	r3, [pc, #576]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1e8      	bne.n	8001bbc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	7ffb      	ldrb	r3, [r7, #31]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b8b      	ldr	r3, [pc, #556]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	4a8a      	ldr	r2, [pc, #552]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8108 	beq.w	8001e16 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	f040 80d0 	bne.w	8001db0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c10:	4b83      	ldr	r3, [pc, #524]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d130      	bne.n	8001c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d127      	bne.n	8001c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d11f      	bne.n	8001c86 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c50:	2a07      	cmp	r2, #7
 8001c52:	bf14      	ite	ne
 8001c54:	2201      	movne	r2, #1
 8001c56:	2200      	moveq	r2, #0
 8001c58:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d113      	bne.n	8001c86 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c68:	085b      	lsrs	r3, r3, #1
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d06e      	beq.n	8001d64 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d069      	beq.n	8001d60 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0b7      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ca8:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5c      	ldr	r2, [pc, #368]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cb4:	f7ff f99a 	bl	8000fec <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f996 	bl	8000fec <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e0a4      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cce:	4b54      	ldr	r3, [pc, #336]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	4b51      	ldr	r3, [pc, #324]	; (8001e24 <HAL_RCC_OscConfig+0x7c8>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cea:	3a01      	subs	r2, #1
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf4:	0212      	lsls	r2, r2, #8
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cfc:	0852      	lsrs	r2, r2, #1
 8001cfe:	3a01      	subs	r2, #1
 8001d00:	0552      	lsls	r2, r2, #21
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d08:	0852      	lsrs	r2, r2, #1
 8001d0a:	3a01      	subs	r2, #1
 8001d0c:	0652      	lsls	r2, r2, #25
 8001d0e:	4311      	orrs	r1, r2
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d14:	0912      	lsrs	r2, r2, #4
 8001d16:	0452      	lsls	r2, r2, #17
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	4941      	ldr	r1, [pc, #260]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d20:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a3e      	ldr	r2, [pc, #248]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a3b      	ldr	r2, [pc, #236]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d38:	f7ff f958 	bl	8000fec <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff f954 	bl	8000fec <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e062      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d52:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5e:	e05a      	b.n	8001e16 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e059      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d64:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d152      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a2a      	ldr	r2, [pc, #168]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d88:	f7ff f930 	bl	8000fec <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff f92c 	bl	8000fec <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e03a      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x734>
 8001dae:	e032      	b.n	8001e16 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d02d      	beq.n	8001e12 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001dbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d105      	bne.n	8001dda <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001dd4:	f023 0303 	bic.w	r3, r3, #3
 8001dd8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001de0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f8ff 	bl	8000fec <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f8fb 	bl	8000fec <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e009      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_OscConfig+0x7c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x796>
 8001e10:	e001      	b.n	8001e16 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	f99d808c 	.word	0xf99d808c

08001e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0c8      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d910      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 0207 	bic.w	r2, r3, #7
 8001e52:	4961      	ldr	r1, [pc, #388]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b5f      	ldr	r3, [pc, #380]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0b0      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d04c      	beq.n	8001f12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e80:	4b56      	ldr	r3, [pc, #344]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d121      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e09e      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e98:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d115      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e092      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e086      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e07e      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ed0:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 0203 	bic.w	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	493f      	ldr	r1, [pc, #252]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee2:	f7ff f883 	bl	8000fec <HAL_GetTick>
 8001ee6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eea:	f7ff f87f 	bl	8000fec <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e066      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 020c 	and.w	r2, r3, #12
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d1eb      	bne.n	8001eea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	492c      	ldr	r1, [pc, #176]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d210      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4924      	ldr	r1, [pc, #144]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e036      	b.n	8001fce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4918      	ldr	r1, [pc, #96]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4910      	ldr	r1, [pc, #64]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f9e:	f000 f825 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_ClockConfig+0x1b4>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	5cd3      	ldrb	r3, [r2, r3]
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe ffc2 	bl	8000f4c <HAL_InitTick>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08004284 	.word	0x08004284
 8001fe4:	200001f8 	.word	0x200001f8
 8001fe8:	200001fc 	.word	0x200001fc

08001fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x34>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d121      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d11e      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002020:	4b33      	ldr	r3, [pc, #204]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e005      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800203c:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002048:	4a2a      	ldr	r2, [pc, #168]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d102      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	e004      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d101      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002070:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002072:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d133      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0xa4>
 800208a:	2b03      	cmp	r3, #3
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0xaa>
 800208e:	e005      	b.n	800209c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002090:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002092:	617b      	str	r3, [r7, #20]
      break;
 8002094:	e005      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002096:	4b19      	ldr	r3, [pc, #100]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002098:	617b      	str	r3, [r7, #20]
      break;
 800209a:	e002      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	617b      	str	r3, [r7, #20]
      break;
 80020a0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	3301      	adds	r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	fb02 f203 	mul.w	r2, r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x104>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0e5b      	lsrs	r3, r3, #25
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	3301      	adds	r3, #1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e2:	69bb      	ldr	r3, [r7, #24]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3724      	adds	r7, #36	; 0x24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	0800429c 	.word	0x0800429c
 80020f8:	00f42400 	.word	0x00f42400
 80020fc:	007a1200 	.word	0x007a1200

08002100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <HAL_RCC_GetHCLKFreq+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200001f8 	.word	0x200001f8

08002118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800211c:	f7ff fff0 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 8002120:	4601      	mov	r1, r0
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	0a1b      	lsrs	r3, r3, #8
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002138:	4618      	mov	r0, r3
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	08004294 	.word	0x08004294

08002144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002148:	f7ff ffda 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800214c:	4601      	mov	r1, r0
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	0adb      	lsrs	r3, r3, #11
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	4a04      	ldr	r2, [pc, #16]	; (800216c <HAL_RCC_GetPCLK2Freq+0x28>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	08004294 	.word	0x08004294

08002170 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800217c:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002188:	f7ff fa04 	bl	8001594 <HAL_PWREx_GetVoltageRange>
 800218c:	6178      	str	r0, [r7, #20]
 800218e:	e014      	b.n	80021ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	4a24      	ldr	r2, [pc, #144]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219a:	6593      	str	r3, [r2, #88]	; 0x58
 800219c:	4b22      	ldr	r3, [pc, #136]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021a8:	f7ff f9f4 	bl	8001594 <HAL_PWREx_GetVoltageRange>
 80021ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ae:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c0:	d10b      	bne.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	d919      	bls.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2ba0      	cmp	r3, #160	; 0xa0
 80021cc:	d902      	bls.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ce:	2302      	movs	r3, #2
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e013      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d4:	2301      	movs	r3, #1
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e010      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b80      	cmp	r3, #128	; 0x80
 80021de:	d902      	bls.n	80021e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021e0:	2303      	movs	r3, #3
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e00a      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d102      	bne.n	80021f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ec:	2302      	movs	r3, #2
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	e004      	b.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b70      	cmp	r3, #112	; 0x70
 80021f6:	d101      	bne.n	80021fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021f8:	2301      	movs	r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f023 0207 	bic.w	r2, r3, #7
 8002204:	4909      	ldr	r1, [pc, #36]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800220c:	4b07      	ldr	r3, [pc, #28]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	40022000 	.word	0x40022000

08002230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002238:	2300      	movs	r3, #0
 800223a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800223c:	2300      	movs	r3, #0
 800223e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03f      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002254:	d01c      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800225a:	d802      	bhi.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00e      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002260:	e01f      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002266:	d003      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002268:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800226c:	d01c      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800226e:	e018      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002270:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	4a84      	ldr	r2, [pc, #528]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800227c:	e015      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fab9 	bl	80027fc <RCCEx_PLLSAI1_Config>
 800228a:	4603      	mov	r3, r0
 800228c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800228e:	e00c      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3320      	adds	r3, #32
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f000 fba0 	bl	80029dc <RCCEx_PLLSAI2_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a0:	e003      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	74fb      	strb	r3, [r7, #19]
      break;
 80022a6:	e000      	b.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80022a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022aa:	7cfb      	ldrb	r3, [r7, #19]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022b0:	4b75      	ldr	r3, [pc, #468]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022be:	4972      	ldr	r1, [pc, #456]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022c6:	e001      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03f      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d01c      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80022e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e6:	d802      	bhi.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00e      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80022ec:	e01f      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80022ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022f2:	d003      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80022f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022f8:	d01c      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80022fa:	e018      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022fc:	4b62      	ldr	r3, [pc, #392]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a61      	ldr	r2, [pc, #388]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002306:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002308:	e015      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fa73 	bl	80027fc <RCCEx_PLLSAI1_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800231a:	e00c      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3320      	adds	r3, #32
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fb5a 	bl	80029dc <RCCEx_PLLSAI2_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800232c:	e003      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	74fb      	strb	r3, [r7, #19]
      break;
 8002332:	e000      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800233c:	4b52      	ldr	r3, [pc, #328]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002342:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800234a:	494f      	ldr	r1, [pc, #316]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002352:	e001      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a0 	beq.w	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800237a:	2300      	movs	r3, #0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002380:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	4a40      	ldr	r2, [pc, #256]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238a:	6593      	str	r3, [r2, #88]	; 0x58
 800238c:	4b3e      	ldr	r3, [pc, #248]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002398:	2301      	movs	r3, #1
 800239a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800239c:	4b3b      	ldr	r3, [pc, #236]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3a      	ldr	r2, [pc, #232]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023a8:	f7fe fe20 	bl	8000fec <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ae:	e009      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b0:	f7fe fe1c 	bl	8000fec <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d902      	bls.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	74fb      	strb	r3, [r7, #19]
        break;
 80023c2:	e005      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ef      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d15c      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01f      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d019      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023f4:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	4a20      	ldr	r2, [pc, #128]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002420:	4a19      	ldr	r2, [pc, #100]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d016      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7fe fddb 	bl	8000fec <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002438:	e00b      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fdd7 	bl	8000fec <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d902      	bls.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	74fb      	strb	r3, [r7, #19]
            break;
 8002450:	e006      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ec      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10c      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002476:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800247e:	e009      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
 8002484:	e006      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002494:	7c7b      	ldrb	r3, [r7, #17]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b9e      	ldr	r3, [pc, #632]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4a9d      	ldr	r2, [pc, #628]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b2:	4b98      	ldr	r3, [pc, #608]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f023 0203 	bic.w	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	4994      	ldr	r1, [pc, #592]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d4:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 020c 	bic.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	498c      	ldr	r1, [pc, #560]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024f6:	4b87      	ldr	r3, [pc, #540]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	4983      	ldr	r1, [pc, #524]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002518:	4b7e      	ldr	r3, [pc, #504]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	497b      	ldr	r1, [pc, #492]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800253a:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002548:	4972      	ldr	r1, [pc, #456]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800255c:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	496a      	ldr	r1, [pc, #424]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	4961      	ldr	r1, [pc, #388]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025a0:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ae:	4959      	ldr	r1, [pc, #356]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d0:	4950      	ldr	r1, [pc, #320]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	4948      	ldr	r1, [pc, #288]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	493f      	ldr	r1, [pc, #252]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d028      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	4937      	ldr	r1, [pc, #220]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002646:	d106      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002648:	4b32      	ldr	r3, [pc, #200]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a31      	ldr	r2, [pc, #196]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002652:	60d3      	str	r3, [r2, #12]
 8002654:	e011      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800265a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800265e:	d10c      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3304      	adds	r3, #4
 8002664:	2101      	movs	r1, #1
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f8c8 	bl	80027fc <RCCEx_PLLSAI1_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d028      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	491f      	ldr	r1, [pc, #124]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a6:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b0:	60d3      	str	r3, [r2, #12]
 80026b2:	e011      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2101      	movs	r1, #1
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f899 	bl	80027fc <RCCEx_PLLSAI1_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d02b      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	4908      	ldr	r1, [pc, #32]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002702:	d109      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a02      	ldr	r2, [pc, #8]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270e:	60d3      	str	r3, [r2, #12]
 8002710:	e014      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002720:	d10c      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f867 	bl	80027fc <RCCEx_PLLSAI1_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d02f      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002756:	4928      	ldr	r1, [pc, #160]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002766:	d10d      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	2102      	movs	r1, #2
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f844 	bl	80027fc <RCCEx_PLLSAI1_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d014      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800277e:	7cfb      	ldrb	r3, [r7, #19]
 8002780:	74bb      	strb	r3, [r7, #18]
 8002782:	e011      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3320      	adds	r3, #32
 8002792:	2102      	movs	r1, #2
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f921 	bl	80029dc <RCCEx_PLLSAI2_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027b4:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c2:	490d      	ldr	r1, [pc, #52]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e6:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000

080027fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800280a:	4b73      	ldr	r3, [pc, #460]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d018      	beq.n	8002848 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002816:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d10d      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
       ||
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800282e:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
       ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d044      	beq.n	80028cc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
 8002846:	e041      	b.n	80028cc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d00c      	beq.n	800286a <RCCEx_PLLSAI1_Config+0x6e>
 8002850:	2b03      	cmp	r3, #3
 8002852:	d013      	beq.n	800287c <RCCEx_PLLSAI1_Config+0x80>
 8002854:	2b01      	cmp	r3, #1
 8002856:	d120      	bne.n	800289a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002858:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d11d      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e01a      	b.n	80028a0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800286a:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800287a:	e013      	b.n	80028a4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800287c:	4b56      	ldr	r3, [pc, #344]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10f      	bne.n	80028a8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002888:	4b53      	ldr	r3, [pc, #332]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002898:	e006      	b.n	80028a8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
      break;
 800289e:	e004      	b.n	80028aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028a0:	bf00      	nop
 80028a2:	e002      	b.n	80028aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80028a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10d      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028b0:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	430b      	orrs	r3, r1
 80028c6:	4944      	ldr	r1, [pc, #272]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d17d      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028d2:	4b41      	ldr	r3, [pc, #260]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a40      	ldr	r2, [pc, #256]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028de:	f7fe fb85 	bl	8000fec <HAL_GetTick>
 80028e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028e4:	e009      	b.n	80028fa <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e6:	f7fe fb81 	bl	8000fec <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d902      	bls.n	80028fa <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	73fb      	strb	r3, [r7, #15]
        break;
 80028f8:	e005      	b.n	8002906 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028fa:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1ef      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d160      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d111      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6892      	ldr	r2, [r2, #8]
 8002922:	0211      	lsls	r1, r2, #8
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68d2      	ldr	r2, [r2, #12]
 8002928:	0912      	lsrs	r2, r2, #4
 800292a:	0452      	lsls	r2, r2, #17
 800292c:	430a      	orrs	r2, r1
 800292e:	492a      	ldr	r1, [pc, #168]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	610b      	str	r3, [r1, #16]
 8002934:	e027      	b.n	8002986 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d112      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002944:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6892      	ldr	r2, [r2, #8]
 800294c:	0211      	lsls	r1, r2, #8
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6912      	ldr	r2, [r2, #16]
 8002952:	0852      	lsrs	r2, r2, #1
 8002954:	3a01      	subs	r2, #1
 8002956:	0552      	lsls	r2, r2, #21
 8002958:	430a      	orrs	r2, r1
 800295a:	491f      	ldr	r1, [pc, #124]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800295c:	4313      	orrs	r3, r2
 800295e:	610b      	str	r3, [r1, #16]
 8002960:	e011      	b.n	8002986 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800296a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6892      	ldr	r2, [r2, #8]
 8002972:	0211      	lsls	r1, r2, #8
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6952      	ldr	r2, [r2, #20]
 8002978:	0852      	lsrs	r2, r2, #1
 800297a:	3a01      	subs	r2, #1
 800297c:	0652      	lsls	r2, r2, #25
 800297e:	430a      	orrs	r2, r1
 8002980:	4915      	ldr	r1, [pc, #84]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002982:	4313      	orrs	r3, r2
 8002984:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800298c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002990:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fb2b 	bl	8000fec <HAL_GetTick>
 8002996:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002998:	e009      	b.n	80029ae <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800299a:	f7fe fb27 	bl	8000fec <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d902      	bls.n	80029ae <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	73fb      	strb	r3, [r7, #15]
          break;
 80029ac:	e005      	b.n	80029ba <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0ef      	beq.n	800299a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d106      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4903      	ldr	r1, [pc, #12]	; (80029d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40021000 	.word	0x40021000

080029dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ea:	4b68      	ldr	r3, [pc, #416]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d018      	beq.n	8002a28 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029f6:	4b65      	ldr	r3, [pc, #404]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0203 	and.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d10d      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
       ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d009      	beq.n	8002a22 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a0e:	4b5f      	ldr	r3, [pc, #380]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d044      	beq.n	8002aac <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	e041      	b.n	8002aac <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d00c      	beq.n	8002a4a <RCCEx_PLLSAI2_Config+0x6e>
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d013      	beq.n	8002a5c <RCCEx_PLLSAI2_Config+0x80>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d120      	bne.n	8002a7a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a38:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11d      	bne.n	8002a80 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a48:	e01a      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a4a:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a5a:	e013      	b.n	8002a84 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10f      	bne.n	8002a88 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a78:	e006      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7e:	e004      	b.n	8002a8a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a80:	bf00      	nop
 8002a82:	e002      	b.n	8002a8a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a84:	bf00      	nop
 8002a86:	e000      	b.n	8002a8a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a88:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a90:	4b3e      	ldr	r3, [pc, #248]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	4939      	ldr	r1, [pc, #228]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d167      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a35      	ldr	r2, [pc, #212]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abe:	f7fe fa95 	bl	8000fec <HAL_GetTick>
 8002ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ac4:	e009      	b.n	8002ada <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ac6:	f7fe fa91 	bl	8000fec <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d902      	bls.n	8002ada <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	73fb      	strb	r3, [r7, #15]
        break;
 8002ad8:	e005      	b.n	8002ae6 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ef      	bne.n	8002ac6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d14a      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d111      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002af2:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6892      	ldr	r2, [r2, #8]
 8002b02:	0211      	lsls	r1, r2, #8
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68d2      	ldr	r2, [r2, #12]
 8002b08:	0912      	lsrs	r2, r2, #4
 8002b0a:	0452      	lsls	r2, r2, #17
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	491f      	ldr	r1, [pc, #124]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	614b      	str	r3, [r1, #20]
 8002b14:	e011      	b.n	8002b3a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	0211      	lsls	r1, r2, #8
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6912      	ldr	r2, [r2, #16]
 8002b2c:	0852      	lsrs	r2, r2, #1
 8002b2e:	3a01      	subs	r2, #1
 8002b30:	0652      	lsls	r2, r2, #25
 8002b32:	430a      	orrs	r2, r1
 8002b34:	4915      	ldr	r1, [pc, #84]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fe fa51 	bl	8000fec <HAL_GetTick>
 8002b4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b4c:	e009      	b.n	8002b62 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b4e:	f7fe fa4d 	bl	8000fec <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d902      	bls.n	8002b62 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b60:	e005      	b.n	8002b6e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0ef      	beq.n	8002b4e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d106      	bne.n	8002b82 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e095      	b.n	8002cce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb2:	d009      	beq.n	8002bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
 8002bba:	e005      	b.n	8002bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe f884 	bl	8000cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c08:	d902      	bls.n	8002c10 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e002      	b.n	8002c16 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c1e:	d007      	beq.n	8002c30 <HAL_SPI_Init+0xa0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c72:	ea42 0103 	orr.w	r1, r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	f003 0204 	and.w	r2, r3, #4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cac:	ea42 0103 	orr.w	r1, r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b088      	sub	sp, #32
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_SPI_Transmit+0x22>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e158      	b.n	8002faa <HAL_SPI_Transmit+0x2d4>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d00:	f7fe f974 	bl	8000fec <HAL_GetTick>
 8002d04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d1a:	e13d      	b.n	8002f98 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_SPI_Transmit+0x52>
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d2c:	e134      	b.n	8002f98 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2203      	movs	r2, #3
 8002d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	88fa      	ldrh	r2, [r7, #6]
 8002d46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	88fa      	ldrh	r2, [r7, #6]
 8002d4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d78:	d10f      	bne.n	8002d9a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d007      	beq.n	8002db8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dc0:	d94b      	bls.n	8002e5a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_SPI_Transmit+0xfa>
 8002dca:	8afb      	ldrh	r3, [r7, #22]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d13e      	bne.n	8002e4e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	881a      	ldrh	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002df4:	e02b      	b.n	8002e4e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d112      	bne.n	8002e2a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	1c9a      	adds	r2, r3, #2
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e28:	e011      	b.n	8002e4e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e2a:	f7fe f8df 	bl	8000fec <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d803      	bhi.n	8002e42 <HAL_SPI_Transmit+0x16c>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d102      	bne.n	8002e48 <HAL_SPI_Transmit+0x172>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e4c:	e0a4      	b.n	8002f98 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ce      	bne.n	8002df6 <HAL_SPI_Transmit+0x120>
 8002e58:	e07c      	b.n	8002f54 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Transmit+0x192>
 8002e62:	8afb      	ldrh	r3, [r7, #22]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d170      	bne.n	8002f4a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d912      	bls.n	8002e98 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	1c9a      	adds	r2, r3, #2
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b02      	subs	r3, #2
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e96:	e058      	b.n	8002f4a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	7812      	ldrb	r2, [r2, #0]
 8002ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ebe:	e044      	b.n	8002f4a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d12b      	bne.n	8002f26 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d912      	bls.n	8002efe <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	881a      	ldrh	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	1c9a      	adds	r2, r3, #2
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b02      	subs	r3, #2
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002efc:	e025      	b.n	8002f4a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
 8002f08:	7812      	ldrb	r2, [r2, #0]
 8002f0a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f24:	e011      	b.n	8002f4a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f26:	f7fe f861 	bl	8000fec <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d803      	bhi.n	8002f3e <HAL_SPI_Transmit+0x268>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d102      	bne.n	8002f44 <HAL_SPI_Transmit+0x26e>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f48:	e026      	b.n	8002f98 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1b5      	bne.n	8002ec0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fcdb 	bl	8003914 <SPI_EndRxTxTransaction>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e000      	b.n	8002f98 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002f96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b088      	sub	sp, #32
 8002fb6:	af02      	add	r7, sp, #8
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fce:	d112      	bne.n	8002ff6 <HAL_SPI_Receive+0x44>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2204      	movs	r2, #4
 8002fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f910 	bl	8003212 <HAL_SPI_TransmitReceive>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	e109      	b.n	800320a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_SPI_Receive+0x52>
 8003000:	2302      	movs	r3, #2
 8003002:	e102      	b.n	800320a <HAL_SPI_Receive+0x258>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800300c:	f7fd ffee 	bl	8000fec <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800301e:	2302      	movs	r3, #2
 8003020:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003022:	e0e9      	b.n	80031f8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_SPI_Receive+0x7e>
 800302a:	88fb      	ldrh	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003034:	e0e0      	b.n	80031f8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2204      	movs	r2, #4
 800303a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	88fa      	ldrh	r2, [r7, #6]
 800304e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	88fa      	ldrh	r2, [r7, #6]
 8003056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003080:	d908      	bls.n	8003094 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	e007      	b.n	80030a4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030a2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ac:	d10f      	bne.n	80030ce <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b40      	cmp	r3, #64	; 0x40
 80030da:	d007      	beq.n	80030ec <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f4:	d867      	bhi.n	80031c6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030f6:	e030      	b.n	800315a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d117      	bne.n	8003136 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f103 020c 	add.w	r2, r3, #12
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	7812      	ldrb	r2, [r2, #0]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003134:	e011      	b.n	800315a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003136:	f7fd ff59 	bl	8000fec <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d803      	bhi.n	800314e <HAL_SPI_Receive+0x19c>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314c:	d102      	bne.n	8003154 <HAL_SPI_Receive+0x1a2>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d102      	bne.n	800315a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003158:	e04e      	b.n	80031f8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1c8      	bne.n	80030f8 <HAL_SPI_Receive+0x146>
 8003166:	e034      	b.n	80031d2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d115      	bne.n	80031a2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	b292      	uxth	r2, r2
 8003182:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	1c9a      	adds	r2, r3, #2
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031a0:	e011      	b.n	80031c6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a2:	f7fd ff23 	bl	8000fec <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d803      	bhi.n	80031ba <HAL_SPI_Receive+0x208>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d102      	bne.n	80031c0 <HAL_SPI_Receive+0x20e>
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d102      	bne.n	80031c6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031c4:	e018      	b.n	80031f8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1ca      	bne.n	8003168 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	6839      	ldr	r1, [r7, #0]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fb44 	bl	8003864 <SPI_EndRxTransaction>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
 80031f4:	e000      	b.n	80031f8 <HAL_SPI_Receive+0x246>
  }

error :
 80031f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003208:	7dfb      	ldrb	r3, [r7, #23]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b08a      	sub	sp, #40	; 0x28
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003220:	2301      	movs	r3, #1
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_SPI_TransmitReceive+0x26>
 8003234:	2302      	movs	r3, #2
 8003236:	e1fb      	b.n	8003630 <HAL_SPI_TransmitReceive+0x41e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003240:	f7fd fed4 	bl	8000fec <HAL_GetTick>
 8003244:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800324c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800325c:	7efb      	ldrb	r3, [r7, #27]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d00e      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x6e>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003268:	d106      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x66>
 8003272:	7efb      	ldrb	r3, [r7, #27]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d003      	beq.n	8003280 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800327e:	e1cd      	b.n	800361c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_SPI_TransmitReceive+0x80>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_SPI_TransmitReceive+0x80>
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d103      	bne.n	800329a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003298:	e1c0      	b.n	800361c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b04      	cmp	r3, #4
 80032a4:	d003      	beq.n	80032ae <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2205      	movs	r2, #5
 80032aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	887a      	ldrh	r2, [r7, #2]
 80032be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	887a      	ldrh	r2, [r7, #2]
 80032c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	887a      	ldrh	r2, [r7, #2]
 80032da:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032f0:	d802      	bhi.n	80032f8 <HAL_SPI_TransmitReceive+0xe6>
 80032f2:	8a3b      	ldrh	r3, [r7, #16]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d908      	bls.n	800330a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	e007      	b.n	800331a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d007      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003340:	d97c      	bls.n	800343c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x13e>
 800334a:	8a7b      	ldrh	r3, [r7, #18]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d169      	bne.n	8003424 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	881a      	ldrh	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003374:	e056      	b.n	8003424 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d11b      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x1aa>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <HAL_SPI_TransmitReceive+0x1aa>
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	2b01      	cmp	r3, #1
 8003392:	d113      	bne.n	80033bc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	1c9a      	adds	r2, r3, #2
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d11c      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x1f2>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	b292      	uxth	r2, r2
 80033e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003400:	2301      	movs	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003404:	f7fd fdf2 	bl	8000fec <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003410:	429a      	cmp	r2, r3
 8003412:	d807      	bhi.n	8003424 <HAL_SPI_TransmitReceive+0x212>
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d003      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003422:	e0fb      	b.n	800361c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1a3      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x164>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d19d      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x164>
 800343a:	e0df      	b.n	80035fc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_SPI_TransmitReceive+0x23a>
 8003444:	8a7b      	ldrh	r3, [r7, #18]
 8003446:	2b01      	cmp	r3, #1
 8003448:	f040 80cb 	bne.w	80035e2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d912      	bls.n	800347c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	881a      	ldrh	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	1c9a      	adds	r2, r3, #2
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003470:	b29b      	uxth	r3, r3
 8003472:	3b02      	subs	r3, #2
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	87da      	strh	r2, [r3, #62]	; 0x3e
 800347a:	e0b2      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	7812      	ldrb	r2, [r2, #0]
 8003488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a2:	e09e      	b.n	80035e2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d134      	bne.n	800351c <HAL_SPI_TransmitReceive+0x30a>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02f      	beq.n	800351c <HAL_SPI_TransmitReceive+0x30a>
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d12c      	bne.n	800351c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d912      	bls.n	80034f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d0:	881a      	ldrh	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	1c9a      	adds	r2, r3, #2
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b02      	subs	r3, #2
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034f0:	e012      	b.n	8003518 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d148      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x3aa>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d042      	beq.n	80035bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d923      	bls.n	800358a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	b292      	uxth	r2, r2
 800354e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	1c9a      	adds	r2, r3, #2
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b02      	subs	r3, #2
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d81f      	bhi.n	80035b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	e016      	b.n	80035b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f103 020c 	add.w	r2, r3, #12
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	7812      	ldrb	r2, [r2, #0]
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035bc:	f7fd fd16 	bl	8000fec <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d803      	bhi.n	80035d4 <HAL_SPI_TransmitReceive+0x3c2>
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d2:	d102      	bne.n	80035da <HAL_SPI_TransmitReceive+0x3c8>
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035e0:	e01c      	b.n	800361c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f47f af5b 	bne.w	80034a4 <HAL_SPI_TransmitReceive+0x292>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f47f af54 	bne.w	80034a4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 f987 	bl	8003914 <SPI_EndRxTxTransaction>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	661a      	str	r2, [r3, #96]	; 0x60
 8003618:	e000      	b.n	800361c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800361a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800362c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003630:	4618      	mov	r0, r3
 8003632:	3728      	adds	r7, #40	; 0x28
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4613      	mov	r3, r2
 8003646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003648:	f7fd fcd0 	bl	8000fec <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	4413      	add	r3, r2
 8003656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003658:	f7fd fcc8 	bl	8000fec <HAL_GetTick>
 800365c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	015b      	lsls	r3, r3, #5
 8003664:	0d1b      	lsrs	r3, r3, #20
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800366e:	e054      	b.n	800371a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d050      	beq.n	800371a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003678:	f7fd fcb8 	bl	8000fec <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	69fa      	ldr	r2, [r7, #28]
 8003684:	429a      	cmp	r2, r3
 8003686:	d902      	bls.n	800368e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d13d      	bne.n	800370a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800369c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036a6:	d111      	bne.n	80036cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036b0:	d004      	beq.n	80036bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d107      	bne.n	80036cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036d4:	d10f      	bne.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e017      	b.n	800373a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3b01      	subs	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	429a      	cmp	r2, r3
 8003736:	d19b      	bne.n	8003670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	200001f8 	.word	0x200001f8

08003748 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003756:	f7fd fc49 	bl	8000fec <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	4413      	add	r3, r2
 8003764:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003766:	f7fd fc41 	bl	8000fec <HAL_GetTick>
 800376a:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800376c:	4b3c      	ldr	r3, [pc, #240]	; (8003860 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	00da      	lsls	r2, r3, #3
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	0d1b      	lsrs	r3, r3, #20
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	fb02 f303 	mul.w	r3, r2, r3
 8003782:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003784:	e05f      	b.n	8003846 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800378c:	d106      	bne.n	800379c <SPI_WaitFifoStateUntilTimeout+0x54>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d050      	beq.n	8003846 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037a4:	f7fd fc22 	bl	8000fec <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d902      	bls.n	80037ba <SPI_WaitFifoStateUntilTimeout+0x72>
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d13d      	bne.n	8003836 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037d2:	d111      	bne.n	80037f8 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037dc:	d004      	beq.n	80037e8 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e6:	d107      	bne.n	80037f8 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003800:	d10f      	bne.n	8003822 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e010      	b.n	8003858 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3b01      	subs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d197      	bne.n	8003786 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3720      	adds	r7, #32
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	200001f8 	.word	0x200001f8

08003864 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003878:	d111      	bne.n	800389e <SPI_EndRxTransaction+0x3a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003882:	d004      	beq.n	800388e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388c:	d107      	bne.n	800389e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f7ff fec5 	bl	8003638 <SPI_WaitFlagStateUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e023      	b.n	800390c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038cc:	d11d      	bne.n	800390a <SPI_EndRxTransaction+0xa6>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d004      	beq.n	80038e2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e0:	d113      	bne.n	800390a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7ff ff2a 	bl	8003748 <SPI_WaitFifoStateUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fe:	f043 0220 	orr.w	r2, r3, #32
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e000      	b.n	800390c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2200      	movs	r2, #0
 8003928:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff ff0b 	bl	8003748 <SPI_WaitFifoStateUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d007      	beq.n	8003948 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e027      	b.n	8003998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fe70 	bl	8003638 <SPI_WaitFlagStateUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d007      	beq.n	800396e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e014      	b.n	8003998 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2200      	movs	r2, #0
 8003976:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7ff fee4 	bl	8003748 <SPI_WaitFifoStateUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e000      	b.n	8003998 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e040      	b.n	8003a34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd f9d6 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2224      	movs	r2, #36	; 0x24
 80039cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f82c 	bl	8003a3c <UART_SetConfig>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e022      	b.n	8003a34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 faaa 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fb31 	bl	8004094 <UART_CheckIdleState>
 8003a32:	4603      	mov	r3, r0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003a40:	b088      	sub	sp, #32
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4bac      	ldr	r3, [pc, #688]	; (8003d1c <UART_SetConfig+0x2e0>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	69f9      	ldr	r1, [r7, #28]
 8003a72:	430b      	orrs	r3, r1
 8003a74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4aa2      	ldr	r2, [pc, #648]	; (8003d20 <UART_SetConfig+0x2e4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a99      	ldr	r2, [pc, #612]	; (8003d24 <UART_SetConfig+0x2e8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d121      	bne.n	8003b08 <UART_SetConfig+0xcc>
 8003ac4:	4b98      	ldr	r3, [pc, #608]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d816      	bhi.n	8003b00 <UART_SetConfig+0xc4>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0x9c>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003af5 	.word	0x08003af5
 8003ae0:	08003aef 	.word	0x08003aef
 8003ae4:	08003afb 	.word	0x08003afb
 8003ae8:	2301      	movs	r3, #1
 8003aea:	76fb      	strb	r3, [r7, #27]
 8003aec:	e0e8      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003aee:	2302      	movs	r3, #2
 8003af0:	76fb      	strb	r3, [r7, #27]
 8003af2:	e0e5      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003af4:	2304      	movs	r3, #4
 8003af6:	76fb      	strb	r3, [r7, #27]
 8003af8:	e0e2      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003afa:	2308      	movs	r3, #8
 8003afc:	76fb      	strb	r3, [r7, #27]
 8003afe:	e0df      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b00:	2310      	movs	r3, #16
 8003b02:	76fb      	strb	r3, [r7, #27]
 8003b04:	bf00      	nop
 8003b06:	e0db      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a87      	ldr	r2, [pc, #540]	; (8003d2c <UART_SetConfig+0x2f0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d134      	bne.n	8003b7c <UART_SetConfig+0x140>
 8003b12:	4b85      	ldr	r3, [pc, #532]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d829      	bhi.n	8003b74 <UART_SetConfig+0x138>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0xec>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003b75 	.word	0x08003b75
 8003b30:	08003b75 	.word	0x08003b75
 8003b34:	08003b75 	.word	0x08003b75
 8003b38:	08003b69 	.word	0x08003b69
 8003b3c:	08003b75 	.word	0x08003b75
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003b75 	.word	0x08003b75
 8003b48:	08003b63 	.word	0x08003b63
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b75 	.word	0x08003b75
 8003b58:	08003b6f 	.word	0x08003b6f
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	76fb      	strb	r3, [r7, #27]
 8003b60:	e0ae      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b62:	2302      	movs	r3, #2
 8003b64:	76fb      	strb	r3, [r7, #27]
 8003b66:	e0ab      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	76fb      	strb	r3, [r7, #27]
 8003b6c:	e0a8      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	76fb      	strb	r3, [r7, #27]
 8003b72:	e0a5      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b74:	2310      	movs	r3, #16
 8003b76:	76fb      	strb	r3, [r7, #27]
 8003b78:	bf00      	nop
 8003b7a:	e0a1      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6b      	ldr	r2, [pc, #428]	; (8003d30 <UART_SetConfig+0x2f4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d120      	bne.n	8003bc8 <UART_SetConfig+0x18c>
 8003b86:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d00f      	beq.n	8003bb4 <UART_SetConfig+0x178>
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d802      	bhi.n	8003b9e <UART_SetConfig+0x162>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <UART_SetConfig+0x16c>
 8003b9c:	e010      	b.n	8003bc0 <UART_SetConfig+0x184>
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d005      	beq.n	8003bae <UART_SetConfig+0x172>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d009      	beq.n	8003bba <UART_SetConfig+0x17e>
 8003ba6:	e00b      	b.n	8003bc0 <UART_SetConfig+0x184>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	76fb      	strb	r3, [r7, #27]
 8003bac:	e088      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	76fb      	strb	r3, [r7, #27]
 8003bb2:	e085      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	76fb      	strb	r3, [r7, #27]
 8003bb8:	e082      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bba:	2308      	movs	r3, #8
 8003bbc:	76fb      	strb	r3, [r7, #27]
 8003bbe:	e07f      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	76fb      	strb	r3, [r7, #27]
 8003bc4:	bf00      	nop
 8003bc6:	e07b      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a59      	ldr	r2, [pc, #356]	; (8003d34 <UART_SetConfig+0x2f8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d120      	bne.n	8003c14 <UART_SetConfig+0x1d8>
 8003bd2:	4b55      	ldr	r3, [pc, #340]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d00f      	beq.n	8003c00 <UART_SetConfig+0x1c4>
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d802      	bhi.n	8003bea <UART_SetConfig+0x1ae>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <UART_SetConfig+0x1b8>
 8003be8:	e010      	b.n	8003c0c <UART_SetConfig+0x1d0>
 8003bea:	2b80      	cmp	r3, #128	; 0x80
 8003bec:	d005      	beq.n	8003bfa <UART_SetConfig+0x1be>
 8003bee:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf0:	d009      	beq.n	8003c06 <UART_SetConfig+0x1ca>
 8003bf2:	e00b      	b.n	8003c0c <UART_SetConfig+0x1d0>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	76fb      	strb	r3, [r7, #27]
 8003bf8:	e062      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	76fb      	strb	r3, [r7, #27]
 8003bfe:	e05f      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c00:	2304      	movs	r3, #4
 8003c02:	76fb      	strb	r3, [r7, #27]
 8003c04:	e05c      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c06:	2308      	movs	r3, #8
 8003c08:	76fb      	strb	r3, [r7, #27]
 8003c0a:	e059      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c0c:	2310      	movs	r3, #16
 8003c0e:	76fb      	strb	r3, [r7, #27]
 8003c10:	bf00      	nop
 8003c12:	e055      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a47      	ldr	r2, [pc, #284]	; (8003d38 <UART_SetConfig+0x2fc>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d124      	bne.n	8003c68 <UART_SetConfig+0x22c>
 8003c1e:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d012      	beq.n	8003c54 <UART_SetConfig+0x218>
 8003c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c32:	d802      	bhi.n	8003c3a <UART_SetConfig+0x1fe>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <UART_SetConfig+0x20c>
 8003c38:	e012      	b.n	8003c60 <UART_SetConfig+0x224>
 8003c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3e:	d006      	beq.n	8003c4e <UART_SetConfig+0x212>
 8003c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c44:	d009      	beq.n	8003c5a <UART_SetConfig+0x21e>
 8003c46:	e00b      	b.n	8003c60 <UART_SetConfig+0x224>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	76fb      	strb	r3, [r7, #27]
 8003c4c:	e038      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	76fb      	strb	r3, [r7, #27]
 8003c52:	e035      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c54:	2304      	movs	r3, #4
 8003c56:	76fb      	strb	r3, [r7, #27]
 8003c58:	e032      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	76fb      	strb	r3, [r7, #27]
 8003c5e:	e02f      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c60:	2310      	movs	r3, #16
 8003c62:	76fb      	strb	r3, [r7, #27]
 8003c64:	bf00      	nop
 8003c66:	e02b      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a2c      	ldr	r2, [pc, #176]	; (8003d20 <UART_SetConfig+0x2e4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d124      	bne.n	8003cbc <UART_SetConfig+0x280>
 8003c72:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <UART_SetConfig+0x2ec>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c80:	d012      	beq.n	8003ca8 <UART_SetConfig+0x26c>
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d802      	bhi.n	8003c8e <UART_SetConfig+0x252>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <UART_SetConfig+0x260>
 8003c8c:	e012      	b.n	8003cb4 <UART_SetConfig+0x278>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c92:	d006      	beq.n	8003ca2 <UART_SetConfig+0x266>
 8003c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c98:	d009      	beq.n	8003cae <UART_SetConfig+0x272>
 8003c9a:	e00b      	b.n	8003cb4 <UART_SetConfig+0x278>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	76fb      	strb	r3, [r7, #27]
 8003ca0:	e00e      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	76fb      	strb	r3, [r7, #27]
 8003ca6:	e00b      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003ca8:	2304      	movs	r3, #4
 8003caa:	76fb      	strb	r3, [r7, #27]
 8003cac:	e008      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003cae:	2308      	movs	r3, #8
 8003cb0:	76fb      	strb	r3, [r7, #27]
 8003cb2:	e005      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	76fb      	strb	r3, [r7, #27]
 8003cb8:	bf00      	nop
 8003cba:	e001      	b.n	8003cc0 <UART_SetConfig+0x284>
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a16      	ldr	r2, [pc, #88]	; (8003d20 <UART_SetConfig+0x2e4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	f040 8087 	bne.w	8003dda <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ccc:	7efb      	ldrb	r3, [r7, #27]
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d836      	bhi.n	8003d40 <UART_SetConfig+0x304>
 8003cd2:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0x29c>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003cfd 	.word	0x08003cfd
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003d05 	.word	0x08003d05
 8003ce4:	08003d41 	.word	0x08003d41
 8003ce8:	08003d0b 	.word	0x08003d0b
 8003cec:	08003d41 	.word	0x08003d41
 8003cf0:	08003d41 	.word	0x08003d41
 8003cf4:	08003d41 	.word	0x08003d41
 8003cf8:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cfc:	f7fe fa0c 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8003d00:	6178      	str	r0, [r7, #20]
        break;
 8003d02:	e022      	b.n	8003d4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <UART_SetConfig+0x300>)
 8003d06:	617b      	str	r3, [r7, #20]
        break;
 8003d08:	e01f      	b.n	8003d4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7fe f96f 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8003d0e:	6178      	str	r0, [r7, #20]
        break;
 8003d10:	e01b      	b.n	8003d4a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	617b      	str	r3, [r7, #20]
        break;
 8003d18:	e017      	b.n	8003d4a <UART_SetConfig+0x30e>
 8003d1a:	bf00      	nop
 8003d1c:	efff69f3 	.word	0xefff69f3
 8003d20:	40008000 	.word	0x40008000
 8003d24:	40013800 	.word	0x40013800
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40004400 	.word	0x40004400
 8003d30:	40004800 	.word	0x40004800
 8003d34:	40004c00 	.word	0x40004c00
 8003d38:	40005000 	.word	0x40005000
 8003d3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	76bb      	strb	r3, [r7, #26]
        break;
 8003d48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80f1 	beq.w	8003f34 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d305      	bcc.n	8003d6e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d902      	bls.n	8003d74 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	76bb      	strb	r3, [r7, #26]
 8003d72:	e0df      	b.n	8003f34 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4619      	mov	r1, r3
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	0214      	lsls	r4, r2, #8
 8003d86:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003d8a:	020b      	lsls	r3, r1, #8
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	0852      	lsrs	r2, r2, #1
 8003d92:	4611      	mov	r1, r2
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	eb13 0b01 	adds.w	fp, r3, r1
 8003d9c:	eb44 0c02 	adc.w	ip, r4, r2
 8003da0:	4658      	mov	r0, fp
 8003da2:	4661      	mov	r1, ip
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f04f 0400 	mov.w	r4, #0
 8003dac:	461a      	mov	r2, r3
 8003dae:	4623      	mov	r3, r4
 8003db0:	f7fc fa0a 	bl	80001c8 <__aeabi_uldivmod>
 8003db4:	4603      	mov	r3, r0
 8003db6:	460c      	mov	r4, r1
 8003db8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dc0:	d308      	bcc.n	8003dd4 <UART_SetConfig+0x398>
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc8:	d204      	bcs.n	8003dd4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	e0af      	b.n	8003f34 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	76bb      	strb	r3, [r7, #26]
 8003dd8:	e0ac      	b.n	8003f34 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de2:	d15b      	bne.n	8003e9c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003de4:	7efb      	ldrb	r3, [r7, #27]
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d827      	bhi.n	8003e3a <UART_SetConfig+0x3fe>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <UART_SetConfig+0x3b4>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e1d 	.word	0x08003e1d
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e2b 	.word	0x08003e2b
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e14:	f7fe f980 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8003e18:	6178      	str	r0, [r7, #20]
        break;
 8003e1a:	e013      	b.n	8003e44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e1c:	f7fe f992 	bl	8002144 <HAL_RCC_GetPCLK2Freq>
 8003e20:	6178      	str	r0, [r7, #20]
        break;
 8003e22:	e00f      	b.n	8003e44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <UART_SetConfig+0x510>)
 8003e26:	617b      	str	r3, [r7, #20]
        break;
 8003e28:	e00c      	b.n	8003e44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe f8df 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8003e2e:	6178      	str	r0, [r7, #20]
        break;
 8003e30:	e008      	b.n	8003e44 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	617b      	str	r3, [r7, #20]
        break;
 8003e38:	e004      	b.n	8003e44 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	76bb      	strb	r3, [r7, #26]
        break;
 8003e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d074      	beq.n	8003f34 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005a      	lsls	r2, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b0f      	cmp	r3, #15
 8003e66:	d916      	bls.n	8003e96 <UART_SetConfig+0x45a>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d212      	bcs.n	8003e96 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f023 030f 	bic.w	r3, r3, #15
 8003e78:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	085b      	lsrs	r3, r3, #1
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	89fb      	ldrh	r3, [r7, #14]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	89fa      	ldrh	r2, [r7, #14]
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e04e      	b.n	8003f34 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	76bb      	strb	r3, [r7, #26]
 8003e9a:	e04b      	b.n	8003f34 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9c:	7efb      	ldrb	r3, [r7, #27]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d827      	bhi.n	8003ef2 <UART_SetConfig+0x4b6>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x46c>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ef3 	.word	0x08003ef3
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003ef3 	.word	0x08003ef3
 8003ec0:	08003ef3 	.word	0x08003ef3
 8003ec4:	08003ef3 	.word	0x08003ef3
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7fe f924 	bl	8002118 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	6178      	str	r0, [r7, #20]
        break;
 8003ed2:	e013      	b.n	8003efc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7fe f936 	bl	8002144 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	6178      	str	r0, [r7, #20]
        break;
 8003eda:	e00f      	b.n	8003efc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	; (8003f4c <UART_SetConfig+0x510>)
 8003ede:	617b      	str	r3, [r7, #20]
        break;
 8003ee0:	e00c      	b.n	8003efc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7fe f883 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8003ee6:	6178      	str	r0, [r7, #20]
        break;
 8003ee8:	e008      	b.n	8003efc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	617b      	str	r3, [r7, #20]
        break;
 8003ef0:	e004      	b.n	8003efc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	76bb      	strb	r3, [r7, #26]
        break;
 8003efa:	bf00      	nop
    }

    if (pclk != 0U)
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d018      	beq.n	8003f34 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	085a      	lsrs	r2, r3, #1
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d908      	bls.n	8003f30 <UART_SetConfig+0x4f4>
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d204      	bcs.n	8003f30 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	e001      	b.n	8003f34 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003f40:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404e:	d10a      	bne.n	8004066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040a2:	f7fc ffa3 	bl	8000fec <HAL_GetTick>
 80040a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d10e      	bne.n	80040d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f82a 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e020      	b.n	8004116 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d10e      	bne.n	8004100 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f814 	bl	800411e <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e00a      	b.n	8004116 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	603b      	str	r3, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800412e:	e05d      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d059      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004138:	f7fc ff58 	bl	8000fec <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <UART_WaitOnFlagUntilTimeout+0x30>
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11b      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800415c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 0201 	bic.w	r2, r2, #1
 800416c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e042      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d02b      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a2:	d123      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041bc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e00f      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	429a      	cmp	r2, r3
 8004208:	d092      	beq.n	8004130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <__libc_init_array>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	4e0d      	ldr	r6, [pc, #52]	; (800424c <__libc_init_array+0x38>)
 8004218:	4c0d      	ldr	r4, [pc, #52]	; (8004250 <__libc_init_array+0x3c>)
 800421a:	1ba4      	subs	r4, r4, r6
 800421c:	10a4      	asrs	r4, r4, #2
 800421e:	2500      	movs	r5, #0
 8004220:	42a5      	cmp	r5, r4
 8004222:	d109      	bne.n	8004238 <__libc_init_array+0x24>
 8004224:	4e0b      	ldr	r6, [pc, #44]	; (8004254 <__libc_init_array+0x40>)
 8004226:	4c0c      	ldr	r4, [pc, #48]	; (8004258 <__libc_init_array+0x44>)
 8004228:	f000 f820 	bl	800426c <_init>
 800422c:	1ba4      	subs	r4, r4, r6
 800422e:	10a4      	asrs	r4, r4, #2
 8004230:	2500      	movs	r5, #0
 8004232:	42a5      	cmp	r5, r4
 8004234:	d105      	bne.n	8004242 <__libc_init_array+0x2e>
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800423c:	4798      	blx	r3
 800423e:	3501      	adds	r5, #1
 8004240:	e7ee      	b.n	8004220 <__libc_init_array+0xc>
 8004242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004246:	4798      	blx	r3
 8004248:	3501      	adds	r5, #1
 800424a:	e7f2      	b.n	8004232 <__libc_init_array+0x1e>
 800424c:	080042d4 	.word	0x080042d4
 8004250:	080042d4 	.word	0x080042d4
 8004254:	080042d4 	.word	0x080042d4
 8004258:	080042d8 	.word	0x080042d8

0800425c <memset>:
 800425c:	4402      	add	r2, r0
 800425e:	4603      	mov	r3, r0
 8004260:	4293      	cmp	r3, r2
 8004262:	d100      	bne.n	8004266 <memset+0xa>
 8004264:	4770      	bx	lr
 8004266:	f803 1b01 	strb.w	r1, [r3], #1
 800426a:	e7f9      	b.n	8004260 <memset+0x4>

0800426c <_init>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr

08004278 <_fini>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr
