
LMX2572_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006260  08006260  00016260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f0  080063f0  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f8  080063f8  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063fc  080063fc  000163fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  08006400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000268  08006668  00020268  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007d4  08006668  000207d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b93  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002586  00000000  00000000  00030e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000333b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000341e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002768e  00000000  00000000  00034f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f49f  00000000  00000000  0005c58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef957  00000000  00000000  0006ba2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015b384  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a0  00000000  00000000  0015b3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000268 	.word	0x20000268
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006248 	.word	0x08006248

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000026c 	.word	0x2000026c
 80001cc:	08006248 	.word	0x08006248

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <LMX2572_write>:
#include "lmx2572.h"

// **** THIS WORKS! *******************************************

// Writes a register to the PLL
void LMX2572_write(SPI_HandleTypeDef *hspi, uint32_t value) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	uint8_t spi_buf[3] = {0,0,0};
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <LMX2572_write+0x5c>)
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	6812      	ldr	r2, [r2, #0]
 800057a:	4611      	mov	r1, r2
 800057c:	8019      	strh	r1, [r3, #0]
 800057e:	3302      	adds	r3, #2
 8000580:	0c12      	lsrs	r2, r2, #16
 8000582:	701a      	strb	r2, [r3, #0]

	spi_buf[2] = value;
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	73bb      	strb	r3, [r7, #14]
	spi_buf[1] = value >> 8;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	b2db      	uxtb	r3, r3
 8000590:	737b      	strb	r3, [r7, #13]
	spi_buf[0] = value >> 16;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	0c1b      	lsrs	r3, r3, #16
 8000596:	b2db      	uxtb	r3, r3
 8000598:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// CSB LOW
 800059a:	2200      	movs	r2, #0
 800059c:	2110      	movs	r1, #16
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <LMX2572_write+0x60>)
 80005a0:	f001 fb44 	bl	8001c2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
 80005a4:	f107 010c 	add.w	r1, r7, #12
 80005a8:	2364      	movs	r3, #100	; 0x64
 80005aa:	2203      	movs	r2, #3
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f002 ff04 	bl	80033ba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
 80005b2:	2201      	movs	r2, #1
 80005b4:	2110      	movs	r1, #16
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <LMX2572_write+0x60>)
 80005b8:	f001 fb38 	bl	8001c2c <HAL_GPIO_WritePin>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	08006260 	.word	0x08006260
 80005c8:	48000400 	.word	0x48000400

080005cc <LMX2572_load_regs>:

// Loads the registers to the PLL
void LMX2572_load_regs(SPI_HandleTypeDef *hspi){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	int i = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	while ((R[125-i] & 0x00FF0000) != 0) {
 80005d8:	e00c      	b.n	80005f4 <LMX2572_load_regs+0x28>
		LMX2572_write(hspi, R[125-i]);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80005e0:	4a10      	ldr	r2, [pc, #64]	; (8000624 <LMX2572_load_regs+0x58>)
 80005e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e6:	4619      	mov	r1, r3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ffbd 	bl	8000568 <LMX2572_write>
		i++;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
	while ((R[125-i] & 0x00FF0000) != 0) {
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LMX2572_load_regs+0x58>)
 80005fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000600:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d1e8      	bne.n	80005da <LMX2572_load_regs+0xe>
	}
	LMX2572_write(hspi, R[125-i]);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <LMX2572_load_regs+0x58>)
 8000610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000614:	4619      	mov	r1, r3
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff ffa6 	bl	8000568 <LMX2572_write>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000284 	.word	0x20000284

08000628 <LMX2572_set_fpd>:

	HAL_Delay(500);
}

// Sets pfd frequency
void LMX2572_set_fpd(struct PLL pll) {
 8000628:	b084      	sub	sp, #16
 800062a:	b490      	push	{r4, r7}
 800062c:	af00      	add	r7, sp, #0
 800062e:	f107 0408 	add.w	r4, r7, #8
 8000632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Set Doubler
	if (pll.doubler == 2) R[9] |= (0x01 << 12);
 8000636:	7e3b      	ldrb	r3, [r7, #24]
 8000638:	2b02      	cmp	r3, #2
 800063a:	d106      	bne.n	800064a <LMX2572_set_fpd+0x22>
 800063c:	4b33      	ldr	r3, [pc, #204]	; (800070c <LMX2572_set_fpd+0xe4>)
 800063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000640:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000644:	4a31      	ldr	r2, [pc, #196]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000646:	6253      	str	r3, [r2, #36]	; 0x24
 8000648:	e005      	b.n	8000656 <LMX2572_set_fpd+0x2e>
	else 			 	  R[9] &= ~(0x01 << 12);
 800064a:	4b30      	ldr	r3, [pc, #192]	; (800070c <LMX2572_set_fpd+0xe4>)
 800064c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800064e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000652:	4a2e      	ldr	r2, [pc, #184]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000654:	6253      	str	r3, [r2, #36]	; 0x24

	// Set Pre R
	R[12] &= ~(0xFFF << 0);
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800065e:	f023 030f 	bic.w	r3, r3, #15
 8000662:	4a2a      	ldr	r2, [pc, #168]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
	R[12] |= ((pll.r_pre & 0xFFF) << 0);
 8000666:	4b29      	ldr	r3, [pc, #164]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	7e7a      	ldrb	r2, [r7, #25]
 800066c:	4313      	orrs	r3, r2
 800066e:	4a27      	ldr	r2, [pc, #156]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000670:	6313      	str	r3, [r2, #48]	; 0x30

	// Set Multiplier
	R[10] &= ~(0x1F << 7);
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000676:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
 800067a:	4a24      	ldr	r2, [pc, #144]	; (800070c <LMX2572_set_fpd+0xe4>)
 800067c:	6293      	str	r3, [r2, #40]	; 0x28
	R[10] |= ((pll.mult & 0x1F) << 7);
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000682:	7efb      	ldrb	r3, [r7, #27]
 8000684:	01db      	lsls	r3, r3, #7
 8000686:	f403 6378 	and.w	r3, r3, #3968	; 0xf80
 800068a:	4313      	orrs	r3, r2
 800068c:	4a1f      	ldr	r2, [pc, #124]	; (800070c <LMX2572_set_fpd+0xe4>)
 800068e:	6293      	str	r3, [r2, #40]	; 0x28

	// Set R
	R[11] &= ~(0xFF << 4);
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <LMX2572_set_fpd+0xe4>)
 8000692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000694:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000698:	4a1c      	ldr	r2, [pc, #112]	; (800070c <LMX2572_set_fpd+0xe4>)
 800069a:	62d3      	str	r3, [r2, #44]	; 0x2c
	R[11] |= ((pll.r & 0xFF) << 4);
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <LMX2572_set_fpd+0xe4>)
 800069e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a0:	7eba      	ldrb	r2, [r7, #26]
 80006a2:	0112      	lsls	r2, r2, #4
 80006a4:	4313      	orrs	r3, r2
 80006a6:	4a19      	ldr	r2, [pc, #100]	; (800070c <LMX2572_set_fpd+0xe4>)
 80006a8:	62d3      	str	r3, [r2, #44]	; 0x2c

	if (pll.fosc * pll.doubler / pll.r_pre * pll.mult > 100) R[9] |= (0x01 << 14);
 80006aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80006ae:	7e3b      	ldrb	r3, [r7, #24]
 80006b0:	ee07 3a90 	vmov	s15, r3
 80006b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006b8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80006bc:	7e7b      	ldrb	r3, [r7, #25]
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80006ca:	7efb      	ldrb	r3, [r7, #27]
 80006cc:	ee07 3a90 	vmov	s15, r3
 80006d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000710 <LMX2572_set_fpd+0xe8>
 80006dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e4:	dd06      	ble.n	80006f4 <LMX2572_set_fpd+0xcc>
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <LMX2572_set_fpd+0xe4>)
 80006e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <LMX2572_set_fpd+0xe4>)
 80006f0:	6253      	str	r3, [r2, #36]	; 0x24
	else R[9] &= ~(0x01 << 14);
}
 80006f2:	e005      	b.n	8000700 <LMX2572_set_fpd+0xd8>
	else R[9] &= ~(0x01 << 14);
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <LMX2572_set_fpd+0xe4>)
 80006f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <LMX2572_set_fpd+0xe4>)
 80006fe:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc90      	pop	{r4, r7}
 8000706:	b004      	add	sp, #16
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000284 	.word	0x20000284
 8000710:	42c80000 	.word	0x42c80000

08000714 <LMX2572_det_param>:

// Determine N, NUM and DEN values from target frequency and fpd
PLL LMX2572_det_param(struct PLL pll){
 8000714:	b084      	sub	sp, #16
 8000716:	b4b0      	push	{r4, r5, r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	f107 001c 	add.w	r0, r7, #28
 8000722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pll.fpd = pll.fosc*pll.doubler/pll.r_pre* pll.mult/pll.r;
 8000726:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800072a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000736:	ee67 6a27 	vmul.f32	s13, s14, s15
 800073a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800074a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800074e:	ee07 3a90 	vmov	s15, r3
 8000752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000756:	ee67 6a27 	vmul.f32	s13, s14, s15
 800075a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800076a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pll.n = pll.frequency/pll.fpd;
 800076e:	edd7 6a07 	vldr	s13, [r7, #28]
 8000772:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800077a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800077e:	ee17 3a90 	vmov	r3, s15
 8000782:	b29b      	uxth	r3, r3
 8000784:	863b      	strh	r3, [r7, #48]	; 0x30
	pll.den = 1000;
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
	pll.num = (pll.frequency/pll.fpd-pll.n)*pll.den;
 800078c:	edd7 6a07 	vldr	s13, [r7, #28]
 8000790:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000798:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007b8:	ee17 3a90 	vmov	r3, s15
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
	pll.Fvco = pll.fpd * pll.n + (pll.num * pll.fpd / pll.den);
 80007be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80007c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80007de:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80007e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007e4:	ee07 3a90 	vmov	s15, r3
 80007e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007ec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80007f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f4:	edc7 7a08 	vstr	s15, [r7, #32]

	return pll;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	461d      	mov	r5, r3
 80007fc:	f107 041c 	add.w	r4, r7, #28
 8000800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000808:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800080c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bcb0      	pop	{r4, r5, r7}
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <LMX2572_defaultConfig>:

// Loads PLL default registers to the PLL register bank
PLL LMX2572_defaultConfig(struct PLL pll){
 800081c:	b084      	sub	sp, #16
 800081e:	b4b0      	push	{r4, r5, r7}
 8000820:	b085      	sub	sp, #20
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800082a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for(int i=0; i<126; i++) R[i] = R_default[125-i];
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e00c      	b.n	800084e <LMX2572_defaultConfig+0x32>
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 800083a:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <LMX2572_defaultConfig+0xc8>)
 800083c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000840:	4929      	ldr	r1, [pc, #164]	; (80008e8 <LMX2572_defaultConfig+0xcc>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b7d      	cmp	r3, #125	; 0x7d
 8000852:	ddef      	ble.n	8000834 <LMX2572_defaultConfig+0x18>

	pll.frequency = PLL_DEFAULT_frequency;
 8000854:	4b25      	ldr	r3, [pc, #148]	; (80008ec <LMX2572_defaultConfig+0xd0>)
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
	pll.fosc = PLL_DEFAULT_fosc;
 8000858:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <LMX2572_defaultConfig+0xd4>)
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
	pll.doubler = PLL_DEFAULT_doubler;
 800085c:	2301      	movs	r3, #1
 800085e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pll.r_pre = PLL_DEFAULT_r_pre;
 8000862:	2301      	movs	r3, #1
 8000864:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pll.r = PLL_DEFAULT_r;
 8000868:	2301      	movs	r3, #1
 800086a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	pll.mult = PLL_DEFAULT_mult;
 800086e:	2302      	movs	r3, #2
 8000870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	pll.CPG = PLL_DEFAULT_CPG;
 8000874:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000878:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	pll.VCO = PLL_DEFAULT_VCO;
 800087c:	2304      	movs	r3, #4
 800087e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	pll.VCO_force = PLL_DEFAULT_VCO_force;
 8000882:	2300      	movs	r3, #0
 8000884:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	pll.MASH_order = PLL_DEFAULT_MASH_order;
 8000888:	2303      	movs	r3, #3
 800088a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	pll.PFD_DLY_SEL = PLL_DEFAULT_PFD_DLY_SEL;
 800088e:	2303      	movs	r3, #3
 8000890:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	pll.chdiv = PLL_DEFAULT_chdiv;
 8000894:	2302      	movs	r3, #2
 8000896:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	pll.out_mux_a = PLL_DEFAULT_out_mux_a;
 800089a:	2301      	movs	r3, #1
 800089c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	pll.out_mux_b = PLL_DEFAULT_out_mux_b;
 80008a0:	2301      	movs	r3, #1
 80008a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	pll.out_pd_a = PLL_DEFAULT_out_pd_a;
 80008a6:	2301      	movs	r3, #1
 80008a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	pll.out_pd_b = PLL_DEFAULT_out_pd_b;
 80008ac:	2301      	movs	r3, #1
 80008ae:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	pll.out_pwr_a = PLL_DEFAULT_out_pwr_a;
 80008b2:	2314      	movs	r3, #20
 80008b4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	pll.out_pwr_b = PLL_DEFAULT_out_pwr_b;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	return pll;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	461d      	mov	r5, r3
 80008c2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80008c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	3714      	adds	r7, #20
 80008da:	46bd      	mov	sp, r7
 80008dc:	bcb0      	pop	{r4, r5, r7}
 80008de:	b004      	add	sp, #16
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000284 	.word	0x20000284
 80008ec:	459c4000 	.word	0x459c4000
 80008f0:	41c80000 	.word	0x41c80000

080008f4 <LMX2572_set_frequency>:
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
}

// Sets PLL N, DEN and NUM registers
void LMX2572_set_frequency(struct PLL pll) {
 80008f4:	b084      	sub	sp, #16
 80008f6:	b490      	push	{r4, r7}
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	f107 0408 	add.w	r4, r7, #8
 80008fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Sets N
	R[34] &= ~(0x07 << 0);
 8000902:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000908:	f023 0307 	bic.w	r3, r3, #7
 800090c:	4a30      	ldr	r2, [pc, #192]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800090e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	R[34] |= (((pll.n >> 16) & 0x07) << 0);
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000918:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800091a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	R[36] &= ~(0xFFFF << 0);
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000924:	0c1b      	lsrs	r3, r3, #16
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	4a29      	ldr	r2, [pc, #164]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800092a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	R[36] |= ((pll.n & 0xFFFF) << 0);
 800092e:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000934:	8bba      	ldrh	r2, [r7, #28]
 8000936:	4313      	orrs	r3, r2
 8000938:	4a25      	ldr	r2, [pc, #148]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800093a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	// Sets DEN
	R[38] &= ~(0xFFFF << 0);
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000944:	0c1b      	lsrs	r3, r3, #16
 8000946:	041b      	lsls	r3, r3, #16
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800094a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	R[38] |= ((pll.den >> 16) << 0);
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000950:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	0c1b      	lsrs	r3, r3, #16
 8000958:	4313      	orrs	r3, r2
 800095a:	4a1d      	ldr	r2, [pc, #116]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800095c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	R[39] &= ~(0xFFFF << 0);
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000966:	0c1b      	lsrs	r3, r3, #16
 8000968:	041b      	lsls	r3, r3, #16
 800096a:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800096c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	R[39] |= ((pll.den & 0x0000FFFF) << 0);
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000972:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	b29b      	uxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	4a14      	ldr	r2, [pc, #80]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800097e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	// Sets NUM
	R[42] &= ~(0xFFFF << 0);
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000984:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000988:	0c1b      	lsrs	r3, r3, #16
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 800098e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	R[42] |= ((pll.num >> 16) << 0);
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 8000994:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	0c1b      	lsrs	r3, r3, #16
 800099c:	4313      	orrs	r3, r2
 800099e:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 80009a0:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	R[43] &= ~(0xFFFF << 0);
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 80009a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80009aa:	0c1b      	lsrs	r3, r3, #16
 80009ac:	041b      	lsls	r3, r3, #16
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 80009b0:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	R[43] |= ((pll.num & 0x0000FFFF) << 0);
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 80009b6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80009ba:	6a3b      	ldr	r3, [r7, #32]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	4313      	orrs	r3, r2
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <LMX2572_set_frequency+0xdc>)
 80009c2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc90      	pop	{r4, r7}
 80009cc:	b004      	add	sp, #16
 80009ce:	4770      	bx	lr
 80009d0:	20000284 	.word	0x20000284

080009d4 <LMX2572_RFoutA_Off>:
	R[44] &= ~(0x01 << 6);
	pll.out_pd_a = 0;
}

// Turns off RFout A output
void LMX2572_RFoutA_Off(struct PLL pll){
 80009d4:	b084      	sub	sp, #16
 80009d6:	b490      	push	{r4, r7}
 80009d8:	af00      	add	r7, sp, #0
 80009da:	f107 0408 	add.w	r4, r7, #8
 80009de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[44] |= (0x01 << 6);
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <LMX2572_RFoutA_Off+0x30>)
 80009e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ec:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <LMX2572_RFoutA_Off+0x30>)
 80009ee:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	pll.out_pd_a = 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc90      	pop	{r4, r7}
 80009fe:	b004      	add	sp, #16
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000284 	.word	0x20000284

08000a08 <LMX2572_RFoutB_Off>:
	R[44] &= ~(0x01 << 7);
	pll.out_pd_b = 0;
}

// Turns off RFout B output
void LMX2572_RFoutB_Off(struct PLL pll){
 8000a08:	b084      	sub	sp, #16
 8000a0a:	b490      	push	{r4, r7}
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	f107 0408 	add.w	r4, r7, #8
 8000a12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[44] |= (0x01 << 7);
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <LMX2572_RFoutB_Off+0x30>)
 8000a18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <LMX2572_RFoutB_Off+0x30>)
 8000a22:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	pll.out_pd_b = 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc90      	pop	{r4, r7}
 8000a32:	b004      	add	sp, #16
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000284 	.word	0x20000284

08000a3c <LMX2572_RFoutA_pwr>:

// Sets RFoutA output power
void LMX2572_RFoutA_pwr(struct PLL pll){
 8000a3c:	b084      	sub	sp, #16
 8000a3e:	b490      	push	{r4, r7}
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	f107 0408 	add.w	r4, r7, #8
 8000a46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[44] &= ~(0x3F << 8);
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <LMX2572_RFoutA_pwr+0x3c>)
 8000a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000a50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <LMX2572_RFoutA_pwr+0x3c>)
 8000a56:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	R[44] |= (pll.out_pwr_a << 8);
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <LMX2572_RFoutA_pwr+0x3c>)
 8000a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000a60:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8000a64:	0212      	lsls	r2, r2, #8
 8000a66:	4313      	orrs	r3, r2
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <LMX2572_RFoutA_pwr+0x3c>)
 8000a6a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc90      	pop	{r4, r7}
 8000a74:	b004      	add	sp, #16
 8000a76:	4770      	bx	lr
 8000a78:	20000284 	.word	0x20000284

08000a7c <LMX2572_read>:
}

// **** TO BE TESTED ******************************************

// Reads a register value from the PLL
uint32_t LMX2572_read(SPI_HandleTypeDef *hspi, uint32_t value) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	uint32_t read = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
	uint8_t read_value[2] = {0x00, 0x00};
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	823b      	strh	r3, [r7, #16]
	uint8_t spi_buf[3] = {0,0,0};
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <LMX2572_read+0x90>)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	4611      	mov	r1, r2
 8000a98:	8019      	strh	r1, [r3, #0]
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	0c12      	lsrs	r2, r2, #16
 8000a9e:	701a      	strb	r2, [r3, #0]
	spi_buf[2] = value | (1<<7);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	73bb      	strb	r3, [r7, #14]
	spi_buf[1] = value >> 8;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	737b      	strb	r3, [r7, #13]
	spi_buf[0] = value >> 16;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	0c1b      	lsrs	r3, r3, #16
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// CSB LOW
 8000abc:	2200      	movs	r2, #0
 8000abe:	2110      	movs	r1, #16
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <LMX2572_read+0x94>)
 8000ac2:	f001 f8b3 	bl	8001c2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	2203      	movs	r2, #3
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f002 fc73 	bl	80033ba <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, read_value, 2, 10);
 8000ad4:	f107 0110 	add.w	r1, r7, #16
 8000ad8:	230a      	movs	r3, #10
 8000ada:	2202      	movs	r2, #2
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f002 fdda 	bl	8003696 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <LMX2572_read+0x94>)
 8000ae8:	f001 f8a0 	bl	8001c2c <HAL_GPIO_WritePin>

	read += read_value[0];
 8000aec:	7c3b      	ldrb	r3, [r7, #16]
 8000aee:	461a      	mov	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	4413      	add	r3, r2
 8000af4:	617b      	str	r3, [r7, #20]
	read += read_value[1] >> 8;
 8000af6:	7c7b      	ldrb	r3, [r7, #17]
 8000af8:	121b      	asrs	r3, r3, #8
 8000afa:	461a      	mov	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	4413      	add	r3, r2
 8000b00:	617b      	str	r3, [r7, #20]
	return read;
 8000b02:	697b      	ldr	r3, [r7, #20]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08006260 	.word	0x08006260
 8000b10:	48000400 	.word	0x48000400

08000b14 <LMX2572_init>:
	R[37] &= ~(0x3F << 8);
	R[37] |= (pll.PFD_DLY_SEL << 8);
}

// Initializes LMX2572 with default values
PLL LMX2572_init(struct PLL pll, SPI_HandleTypeDef *hspi) {
 8000b14:	b084      	sub	sp, #16
 8000b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b18:	b099      	sub	sp, #100	; 0x64
 8000b1a:	af0a      	add	r7, sp, #40	; 0x28
 8000b1c:	6378      	str	r0, [r7, #52]	; 0x34
 8000b1e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pll = LMX2572_defaultConfig(pll);
 8000b26:	f107 0654 	add.w	r6, r7, #84	; 0x54
 8000b2a:	466d      	mov	r5, sp
 8000b2c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	602b      	str	r3, [r5, #0]
 8000b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b42:	4630      	mov	r0, r6
 8000b44:	f7ff fe6a 	bl	800081c <LMX2572_defaultConfig>
	pll = LMX2572_det_param(pll);
 8000b48:	463e      	mov	r6, r7
 8000b4a:	466d      	mov	r5, sp
 8000b4c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	602b      	str	r3, [r5, #0]
 8000b5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b62:	4630      	mov	r0, r6
 8000b64:	f7ff fdd6 	bl	8000714 <LMX2572_det_param>
 8000b68:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b6c:	463d      	mov	r5, r7
 8000b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	LMX2572_set_fpd(pll);
 8000b7e:	466d      	mov	r5, sp
 8000b80:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b8c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b96:	f7ff fd47 	bl	8000628 <LMX2572_set_fpd>
	LMX2572_set_frequency(pll);
 8000b9a:	466d      	mov	r5, sp
 8000b9c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ba8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000bac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb2:	f7ff fe9f 	bl	80008f4 <LMX2572_set_frequency>
	LMX2572_RFoutA_pwr(pll);
 8000bb6:	466d      	mov	r5, sp
 8000bb8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bc4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000bc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bce:	f7ff ff35 	bl	8000a3c <LMX2572_RFoutA_pwr>
	LMX2572_RFoutA_Off(pll);
 8000bd2:	466d      	mov	r5, sp
 8000bd4:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bdc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000be0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000be4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bea:	f7ff fef3 	bl	80009d4 <LMX2572_RFoutA_Off>
	LMX2572_RFoutB_Off(pll);
 8000bee:	466d      	mov	r5, sp
 8000bf0:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bfc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c06:	f7ff feff 	bl	8000a08 <LMX2572_RFoutB_Off>
	LMX2572_load_regs(hspi);
 8000c0a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000c0e:	f7ff fcdd 	bl	80005cc <LMX2572_load_regs>

	return pll;
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	461d      	mov	r5, r3
 8000c16:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000c26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000c2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c2c:	373c      	adds	r7, #60	; 0x3c
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart2, UART1_rxBuffer, 12);
 8000c40:	220c      	movs	r2, #12
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <HAL_UART_RxCpltCallback+0x1c>)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <HAL_UART_RxCpltCallback+0x20>)
 8000c46:	f003 fa6b 	bl	8004120 <HAL_UART_Receive_IT>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000674 	.word	0x20000674
 8000c58:	200006f0 	.word	0x200006f0

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5e:	b099      	sub	sp, #100	; 0x64
 8000c60:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f000 fc6b 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f889 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 f999 	bl	8000fa0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c6e:	f000 f967 	bl	8000f40 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000c72:	f000 f8fb 	bl	8000e6c <MX_SPI1_Init>
  MX_USART1_Init();
 8000c76:	f000 f937 	bl	8000ee8 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, UART1_rxBuffer, 12);
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	4934      	ldr	r1, [pc, #208]	; (8000d50 <main+0xf4>)
 8000c7e:	4835      	ldr	r0, [pc, #212]	; (8000d54 <main+0xf8>)
 8000c80:	f003 fa4e 	bl	8004120 <HAL_UART_Receive_IT>

  PLL mypll;
  mypll = LMX2572_init(mypll, &hspi1);
 8000c84:	1d3e      	adds	r6, r7, #4
 8000c86:	4b34      	ldr	r3, [pc, #208]	; (8000d58 <main+0xfc>)
 8000c88:	9309      	str	r3, [sp, #36]	; 0x24
 8000c8a:	466d      	mov	r5, sp
 8000c8c:	f107 0410 	add.w	r4, r7, #16
 8000c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	602b      	str	r3, [r5, #0]
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	f7ff ff37 	bl	8000b14 <LMX2572_init>


  long read;
  read= LMX2572_read(&hspi1, R[0]);
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <main+0x100>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	482a      	ldr	r0, [pc, #168]	; (8000d58 <main+0xfc>)
 8000cae:	f7ff fee5 	bl	8000a7c <LMX2572_read>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	637b      	str	r3, [r7, #52]	; 0x34
  printf("R[0]: %o", read);
 8000cb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cb8:	4829      	ldr	r0, [pc, #164]	; (8000d60 <main+0x104>)
 8000cba:	f004 fb6f 	bl	800539c <iprintf>
  read = LMX2572_read(&hspi1, R[1]);
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <main+0x100>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4824      	ldr	r0, [pc, #144]	; (8000d58 <main+0xfc>)
 8000cc6:	f7ff fed9 	bl	8000a7c <LMX2572_read>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  printf("R[1]: %o", read);
 8000cce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cd0:	4824      	ldr	r0, [pc, #144]	; (8000d64 <main+0x108>)
 8000cd2:	f004 fb63 	bl	800539c <iprintf>
  read = LMX2572_read(&hspi1, R[2]);
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <main+0x100>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	481e      	ldr	r0, [pc, #120]	; (8000d58 <main+0xfc>)
 8000cde:	f7ff fecd 	bl	8000a7c <LMX2572_read>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  printf("R[2]: %o", read);
 8000ce6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ce8:	481f      	ldr	r0, [pc, #124]	; (8000d68 <main+0x10c>)
 8000cea:	f004 fb57 	bl	800539c <iprintf>
  read = LMX2572_read(&hspi1, R[3]);
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <main+0x100>)
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4818      	ldr	r0, [pc, #96]	; (8000d58 <main+0xfc>)
 8000cf6:	f7ff fec1 	bl	8000a7c <LMX2572_read>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
  printf("R[3]: %o", read);
 8000cfe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <main+0x110>)
 8000d02:	f004 fb4b 	bl	800539c <iprintf>
  read = LMX2572_read(&hspi1, R[4]);
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <main+0x100>)
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4812      	ldr	r0, [pc, #72]	; (8000d58 <main+0xfc>)
 8000d0e:	f7ff feb5 	bl	8000a7c <LMX2572_read>
 8000d12:	4603      	mov	r3, r0
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  printf("R[4]: %o", read);
 8000d16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d18:	4815      	ldr	r0, [pc, #84]	; (8000d70 <main+0x114>)
 8000d1a:	f004 fb3f 	bl	800539c <iprintf>
  read = LMX2572_read(&hspi1, R[5]);
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <main+0x100>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <main+0xfc>)
 8000d26:	f7ff fea9 	bl	8000a7c <LMX2572_read>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  printf("R[5]: %o", read);
 8000d2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d30:	4810      	ldr	r0, [pc, #64]	; (8000d74 <main+0x118>)
 8000d32:	f004 fb33 	bl	800539c <iprintf>
  read = LMX2572_read(&hspi1, R[6]);
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <main+0x100>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <main+0xfc>)
 8000d3e:	f7ff fe9d 	bl	8000a7c <LMX2572_read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  printf("R[6]: %o", read);
 8000d46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <main+0x11c>)
 8000d4a:	f004 fb27 	bl	800539c <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000d4e:	e7fe      	b.n	8000d4e <main+0xf2>
 8000d50:	20000674 	.word	0x20000674
 8000d54:	200006f0 	.word	0x200006f0
 8000d58:	2000068c 	.word	0x2000068c
 8000d5c:	2000047c 	.word	0x2000047c
 8000d60:	080062bc 	.word	0x080062bc
 8000d64:	080062c8 	.word	0x080062c8
 8000d68:	080062d4 	.word	0x080062d4
 8000d6c:	080062e0 	.word	0x080062e0
 8000d70:	080062ec 	.word	0x080062ec
 8000d74:	080062f8 	.word	0x080062f8
 8000d78:	08006304 	.word	0x08006304

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b0b8      	sub	sp, #224	; 0xe0
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d86:	2244      	movs	r2, #68	; 0x44
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f004 fafe 	bl	800538c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2288      	movs	r2, #136	; 0x88
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 faf0 	bl	800538c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dac:	2302      	movs	r3, #2
 8000dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dba:	2310      	movs	r3, #16
 8000dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dd8:	2307      	movs	r3, #7
 8000dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 ff98 	bl	8001d24 <HAL_RCC_OscConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dfa:	f000 f94f 	bl	800109c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	230f      	movs	r3, #15
 8000e00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2303      	movs	r3, #3
 8000e06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e20:	2104      	movs	r1, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f001 fb64 	bl	80024f0 <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e2e:	f000 f935 	bl	800109c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000e32:	2303      	movs	r3, #3
 8000e34:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fd5b 	bl	80028fc <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e4c:	f000 f926 	bl	800109c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e54:	f000 ff10 	bl	8001c78 <HAL_PWREx_ControlVoltageScaling>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000e5e:	f000 f91d 	bl	800109c <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	37e0      	adds	r7, #224	; 0xe0
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <MX_SPI1_Init+0x78>)
 8000e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e76:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ea2:	2228      	movs	r2, #40	; 0x28
 8000ea4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000eba:	2207      	movs	r2, #7
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_SPI1_Init+0x74>)
 8000ecc:	f002 f9d2 	bl	8003274 <HAL_SPI_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 f8e1 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000068c 	.word	0x2000068c
 8000ee4:	40013000 	.word	0x40013000

08000ee8 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_USART1_Init+0x50>)
 8000eee:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <MX_USART1_Init+0x54>)
 8000ef0:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART1_Init+0x50>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_USART1_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_USART1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_USART1_Init+0x50>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_USART1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_USART1_Init+0x50>)
 8000f26:	f003 fe33 	bl	8004b90 <HAL_USART_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000f30:	f000 f8b4 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000770 	.word	0x20000770
 8000f3c:	40013800 	.word	0x40013800

08000f40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_USART2_UART_Init+0x5c>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_USART2_UART_Init+0x58>)
 8000f84:	f003 f87e 	bl	8004084 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f8e:	f000 f885 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200006f0 	.word	0x200006f0
 8000f9c:	40004400 	.word	0x40004400

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b35      	ldr	r3, [pc, #212]	; (800108c <MX_GPIO_Init+0xec>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <MX_GPIO_Init+0xec>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <MX_GPIO_Init+0xec>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b2f      	ldr	r3, [pc, #188]	; (800108c <MX_GPIO_Init+0xec>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a2e      	ldr	r2, [pc, #184]	; (800108c <MX_GPIO_Init+0xec>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <MX_GPIO_Init+0xec>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b29      	ldr	r3, [pc, #164]	; (800108c <MX_GPIO_Init+0xec>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a28      	ldr	r2, [pc, #160]	; (800108c <MX_GPIO_Init+0xec>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <MX_GPIO_Init+0xec>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_GPIO_Init+0xec>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a22      	ldr	r2, [pc, #136]	; (800108c <MX_GPIO_Init+0xec>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_GPIO_Init+0xec>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f000 fe04 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	4819      	ldr	r0, [pc, #100]	; (8001090 <MX_GPIO_Init+0xf0>)
 800102a:	f000 fdff 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_GPIO_Init+0xf4>)
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4815      	ldr	r0, [pc, #84]	; (8001098 <MX_GPIO_Init+0xf8>)
 8001044:	f000 fc48 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f000 fc38 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001068:	2310      	movs	r3, #16
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_GPIO_Init+0xf0>)
 8001080:	f000 fc2a 	bl	80018d8 <HAL_GPIO_Init>

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40021000 	.word	0x40021000
 8001090:	48000400 	.word	0x48000400
 8001094:	10210000 	.word	0x10210000
 8001098:	48000800 	.word	0x48000800

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <HAL_MspInit+0x44>)
 80010b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <HAL_MspInit+0x44>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	6613      	str	r3, [r2, #96]	; 0x60
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_MspInit+0x44>)
 80010bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_MspInit+0x44>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_MspInit+0x44>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_SPI_MspInit+0x7c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d128      	bne.n	8001164 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_SPI_MspInit+0x80>)
 8001114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <HAL_SPI_MspInit+0x80>)
 8001118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800111c:	6613      	str	r3, [r2, #96]	; 0x60
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_SPI_MspInit+0x80>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_SPI_MspInit+0x80>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	4a10      	ldr	r2, [pc, #64]	; (8001170 <HAL_SPI_MspInit+0x80>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_SPI_MspInit+0x80>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001142:	23e0      	movs	r3, #224	; 0xe0
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001152:	2305      	movs	r3, #5
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f000 fbba 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40013000 	.word	0x40013000
 8001170:	40021000 	.word	0x40021000

08001174 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a2a      	ldr	r2, [pc, #168]	; (800123c <HAL_USART_MspInit+0xc8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d14d      	bne.n	8001232 <HAL_USART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <HAL_USART_MspInit+0xcc>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <HAL_USART_MspInit+0xcc>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6613      	str	r3, [r2, #96]	; 0x60
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_USART_MspInit+0xcc>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_USART_MspInit+0xcc>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_USART_MspInit+0xcc>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <HAL_USART_MspInit+0xcc>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <HAL_USART_MspInit+0xcc>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_USART_MspInit+0xcc>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <HAL_USART_MspInit+0xcc>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80011de:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f0:	2307      	movs	r3, #7
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fe:	f000 fb6b 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001212:	2307      	movs	r3, #7
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <HAL_USART_MspInit+0xd0>)
 800121e:	f000 fb5b 	bl	80018d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2025      	movs	r0, #37	; 0x25
 8001228:	f000 fadf 	bl	80017ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800122c:	2025      	movs	r0, #37	; 0x25
 800122e:	f000 faf8 	bl	8001822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40013800 	.word	0x40013800
 8001240:	40021000 	.word	0x40021000
 8001244:	48000400 	.word	0x48000400

08001248 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_UART_MspInit+0x7c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d128      	bne.n	80012bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <HAL_UART_MspInit+0x80>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <HAL_UART_MspInit+0x80>)
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	6593      	str	r3, [r2, #88]	; 0x58
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_UART_MspInit+0x80>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_UART_MspInit+0x80>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <HAL_UART_MspInit+0x80>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <HAL_UART_MspInit+0x80>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800129a:	230c      	movs	r3, #12
 800129c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a6:	2303      	movs	r3, #3
 80012a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012aa:	2307      	movs	r3, #7
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b8:	f000 fb0e 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40004400 	.word	0x40004400
 80012c8:	40021000 	.word	0x40021000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001318:	f000 f96c 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <USART1_IRQHandler+0x10>)
 8001326:	f003 fc7d 	bl	8004c24 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000770 	.word	0x20000770

08001334 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e00a      	b.n	800135c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001346:	f3af 8000 	nop.w
 800134a:	4601      	mov	r1, r0
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	b2ca      	uxtb	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf0      	blt.n	8001346 <_read+0x12>
	}

return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e009      	b.n	8001394 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf1      	blt.n	8001380 <_write+0x12>
	}
	return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_close>:

int _close(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ce:	605a      	str	r2, [r3, #4]
	return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_isatty>:

int _isatty(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	return 1;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f003 ff7a 	bl	8005338 <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20018000 	.word	0x20018000
 8001470:	00000400 	.word	0x00000400
 8001474:	20000680 	.word	0x20000680
 8001478:	200007d8 	.word	0x200007d8

0800147c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <SystemInit+0x64>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <SystemInit+0x64>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <SystemInit+0x68>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <SystemInit+0x68>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <SystemInit+0x68>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <SystemInit+0x68>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <SystemInit+0x68>)
 80014a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <SystemInit+0x68>)
 80014b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <SystemInit+0x68>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <SystemInit+0x68>)
 80014c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <SystemInit+0x68>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SystemInit+0x64>)
 80014ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d2:	609a      	str	r2, [r3, #8]
#endif
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	40021000 	.word	0x40021000

080014e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ec:	f7ff ffc6 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014f2:	e003      	b.n	80014fc <LoopCopyDataInit>

080014f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014fa:	3104      	adds	r1, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014fc:	480a      	ldr	r0, [pc, #40]	; (8001528 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001500:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001502:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001504:	d3f6      	bcc.n	80014f4 <CopyDataInit>
	ldr	r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001508:	e002      	b.n	8001510 <LoopFillZerobss>

0800150a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800150a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800150c:	f842 3b04 	str.w	r3, [r2], #4

08001510 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <LoopForever+0x16>)
	cmp	r2, r3
 8001512:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001514:	d3f9      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f003 ff15 	bl	8005344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151a:	f7ff fb9f 	bl	8000c5c <main>

0800151e <LoopForever>:

LoopForever:
    b LoopForever
 800151e:	e7fe      	b.n	800151e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001520:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001524:	08006400 	.word	0x08006400
	ldr	r0, =_sdata
 8001528:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800152c:	20000268 	.word	0x20000268
	ldr	r2, =_sbss
 8001530:	20000268 	.word	0x20000268
	ldr	r3, = _ebss
 8001534:	200007d4 	.word	0x200007d4

08001538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC1_2_IRQHandler>
	...

0800153c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_Init+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_Init+0x3c>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001552:	2003      	movs	r0, #3
 8001554:	f000 f93e 	bl	80017d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001558:	2000      	movs	r0, #0
 800155a:	f000 f80f 	bl	800157c <HAL_InitTick>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	e001      	b.n	800156e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800156a:	f7ff fd9d 	bl	80010a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156e:	79fb      	ldrb	r3, [r7, #7]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40022000 	.word	0x40022000

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_InitTick+0x6c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d023      	beq.n	80015d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_InitTick+0x70>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <HAL_InitTick+0x6c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f949 	bl	800183e <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d809      	bhi.n	80015cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 f913 	bl	80017ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c4:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <HAL_InitTick+0x74>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e007      	b.n	80015dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	e004      	b.n	80015dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e001      	b.n	80015dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000200 	.word	0x20000200
 80015ec:	200001f8 	.word	0x200001f8
 80015f0:	200001fc 	.word	0x200001fc

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000200 	.word	0x20000200
 8001618:	200007c0 	.word	0x200007c0

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200007c0 	.word	0x200007c0

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db0b      	blt.n	80016c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	f003 021f 	and.w	r2, r3, #31
 80016b0:	4907      	ldr	r1, [pc, #28]	; (80016d0 <__NVIC_EnableIRQ+0x38>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	2001      	movs	r0, #1
 80016ba:	fa00 f202 	lsl.w	r2, r0, r2
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100

080016d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	6039      	str	r1, [r7, #0]
 80016de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	db0a      	blt.n	80016fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	490c      	ldr	r1, [pc, #48]	; (8001720 <__NVIC_SetPriority+0x4c>)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	0112      	lsls	r2, r2, #4
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	440b      	add	r3, r1
 80016f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016fc:	e00a      	b.n	8001714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4908      	ldr	r1, [pc, #32]	; (8001724 <__NVIC_SetPriority+0x50>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	3b04      	subs	r3, #4
 800170c:	0112      	lsls	r2, r2, #4
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	440b      	add	r3, r1
 8001712:	761a      	strb	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000e100 	.word	0xe000e100
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001728:	b480      	push	{r7}
 800172a:	b089      	sub	sp, #36	; 0x24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f1c3 0307 	rsb	r3, r3, #7
 8001742:	2b04      	cmp	r3, #4
 8001744:	bf28      	it	cs
 8001746:	2304      	movcs	r3, #4
 8001748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	3304      	adds	r3, #4
 800174e:	2b06      	cmp	r3, #6
 8001750:	d902      	bls.n	8001758 <NVIC_EncodePriority+0x30>
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3b03      	subs	r3, #3
 8001756:	e000      	b.n	800175a <NVIC_EncodePriority+0x32>
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	f04f 32ff 	mov.w	r2, #4294967295
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	401a      	ands	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001770:	f04f 31ff 	mov.w	r1, #4294967295
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43d9      	mvns	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	4313      	orrs	r3, r2
         );
}
 8001782:	4618      	mov	r0, r3
 8001784:	3724      	adds	r7, #36	; 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a0:	d301      	bcc.n	80017a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00f      	b.n	80017c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a6:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <SysTick_Config+0x40>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ae:	210f      	movs	r1, #15
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f7ff ff8e 	bl	80016d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <SysTick_Config+0x40>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <SysTick_Config+0x40>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff29 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017fc:	f7ff ff3e 	bl	800167c <__NVIC_GetPriorityGrouping>
 8001800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff ff8e 	bl	8001728 <NVIC_EncodePriority>
 800180c:	4602      	mov	r2, r0
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff5d 	bl	80016d4 <__NVIC_SetPriority>
}
 800181a:	bf00      	nop
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff31 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffa2 	bl	8001790 <SysTick_Config>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d005      	beq.n	800187a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2204      	movs	r2, #4
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
 8001878:	e029      	b.n	80018ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 020e 	bic.w	r2, r2, #14
 8001888:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 0201 	bic.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f003 021c 	and.w	r2, r3, #28
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2101      	movs	r1, #1
 80018a8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
    }
  }
  return status;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e17f      	b.n	8001be8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fa01 f303 	lsl.w	r3, r1, r3
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8171 	beq.w	8001be2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d00b      	beq.n	8001920 <HAL_GPIO_Init+0x48>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d007      	beq.n	8001920 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001914:	2b11      	cmp	r3, #17
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b12      	cmp	r3, #18
 800191e:	d130      	bne.n	8001982 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001956:	2201      	movs	r2, #1
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	f003 0201 	and.w	r2, r3, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b03      	cmp	r3, #3
 800198c:	d118      	bne.n	80019c0 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001994:	2201      	movs	r2, #1
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x128>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b12      	cmp	r3, #18
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	6939      	ldr	r1, [r7, #16]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ac 	beq.w	8001be2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	4a5e      	ldr	r2, [pc, #376]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6613      	str	r3, [r2, #96]	; 0x60
 8001a96:	4b5c      	ldr	r3, [pc, #368]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	; (8001c0c <HAL_GPIO_Init+0x334>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x242>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4f      	ldr	r2, [pc, #316]	; (8001c10 <HAL_GPIO_Init+0x338>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4e      	ldr	r2, [pc, #312]	; (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4d      	ldr	r2, [pc, #308]	; (8001c18 <HAL_GPIO_Init+0x340>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4c      	ldr	r2, [pc, #304]	; (8001c1c <HAL_GPIO_Init+0x344>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_GPIO_Init+0x348>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	; (8001c24 <HAL_GPIO_Init+0x34c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b02:	2307      	movs	r3, #7
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x244>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b2c:	4937      	ldr	r1, [pc, #220]	; (8001c0c <HAL_GPIO_Init+0x334>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b5e:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b88:	4a27      	ldr	r2, [pc, #156]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bb2:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f ae78 	bne.w	80018e8 <HAL_GPIO_Init+0x10>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	48000400 	.word	0x48000400
 8001c14:	48000800 	.word	0x48000800
 8001c18:	48000c00 	.word	0x48000c00
 8001c1c:	48001000 	.word	0x48001000
 8001c20:	48001400 	.word	0x48001400
 8001c24:	48001800 	.word	0x48001800
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40007000 	.word	0x40007000

08001c78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c86:	d130      	bne.n	8001cea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c94:	d038      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c96:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2232      	movs	r2, #50	; 0x32
 8001cac:	fb02 f303 	mul.w	r3, r2, r3
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb6:	0c9b      	lsrs	r3, r3, #18
 8001cb8:	3301      	adds	r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cbc:	e002      	b.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cc4:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d102      	bne.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f2      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce4:	d110      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e00f      	b.n	8001d0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf6:	d007      	beq.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	200001f8 	.word	0x200001f8
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e3d4      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d36:	4ba1      	ldr	r3, [pc, #644]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d40:	4b9e      	ldr	r3, [pc, #632]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80e4 	beq.w	8001f20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_RCC_OscConfig+0x4a>
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	f040 808b 	bne.w	8001e7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	f040 8087 	bne.w	8001e7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6e:	4b93      	ldr	r3, [pc, #588]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x62>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e3ac      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1a      	ldr	r2, [r3, #32]
 8001d8a:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_RCC_OscConfig+0x7c>
 8001d96:	4b89      	ldr	r3, [pc, #548]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d9e:	e005      	b.n	8001dac <HAL_RCC_OscConfig+0x88>
 8001da0:	4b86      	ldr	r3, [pc, #536]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d223      	bcs.n	8001df8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fd41 	bl	800283c <RCC_SetFlashLatencyFromMSIRange>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e38d      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc4:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a7c      	ldr	r2, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b7a      	ldr	r3, [pc, #488]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4977      	ldr	r1, [pc, #476]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	4972      	ldr	r1, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
 8001df6:	e025      	b.n	8001e44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df8:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6f      	ldr	r2, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	496a      	ldr	r1, [pc, #424]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e16:	4b69      	ldr	r3, [pc, #420]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	021b      	lsls	r3, r3, #8
 8001e24:	4965      	ldr	r1, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fd01 	bl	800283c <RCC_SetFlashLatencyFromMSIRange>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e34d      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e44:	f000 fc36 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	091b      	lsrs	r3, r3, #4
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	495a      	ldr	r1, [pc, #360]	; (8001fc0 <HAL_RCC_OscConfig+0x29c>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <HAL_RCC_OscConfig+0x2a0>)
 8001e62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e64:	4b58      	ldr	r3, [pc, #352]	; (8001fc8 <HAL_RCC_OscConfig+0x2a4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fb87 	bl	800157c <HAL_InitTick>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d052      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	e331      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d032      	beq.n	8001eea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e84:	4b4d      	ldr	r3, [pc, #308]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a4c      	ldr	r2, [pc, #304]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fbc4 	bl	800161c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e98:	f7ff fbc0 	bl	800161c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e31a      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b3e      	ldr	r3, [pc, #248]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	493b      	ldr	r1, [pc, #236]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	4936      	ldr	r1, [pc, #216]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	604b      	str	r3, [r1, #4]
 8001ee8:	e01a      	b.n	8001f20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fb91 	bl	800161c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efe:	f7ff fb8d 	bl	800161c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e2e7      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x1da>
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d074      	beq.n	8002016 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d005      	beq.n	8001f3e <HAL_RCC_OscConfig+0x21a>
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	d10e      	bne.n	8001f56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d10b      	bne.n	8001f56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d064      	beq.n	8002014 <HAL_RCC_OscConfig+0x2f0>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d160      	bne.n	8002014 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e2c4      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x24a>
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e01d      	b.n	8001faa <HAL_RCC_OscConfig+0x286>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x26e>
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e00b      	b.n	8001faa <HAL_RCC_OscConfig+0x286>
 8001f92:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a06      	ldr	r2, [pc, #24]	; (8001fbc <HAL_RCC_OscConfig+0x298>)
 8001fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01c      	beq.n	8001fec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fb33 	bl	800161c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb8:	e011      	b.n	8001fde <HAL_RCC_OscConfig+0x2ba>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	08006310 	.word	0x08006310
 8001fc4:	200001f8 	.word	0x200001f8
 8001fc8:	200001fc 	.word	0x200001fc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fb26 	bl	800161c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e280      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fde:	4baf      	ldr	r3, [pc, #700]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2a8>
 8001fea:	e014      	b.n	8002016 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fec:	f7ff fb16 	bl	800161c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff4:	f7ff fb12 	bl	800161c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e26c      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002006:	4ba5      	ldr	r3, [pc, #660]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x2d0>
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d060      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d005      	beq.n	8002034 <HAL_RCC_OscConfig+0x310>
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d119      	bne.n	8002062 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d116      	bne.n	8002062 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002034:	4b99      	ldr	r3, [pc, #612]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_OscConfig+0x328>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e249      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b93      	ldr	r3, [pc, #588]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	4990      	ldr	r1, [pc, #576]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002060:	e040      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d023      	beq.n	80020b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206a:	4b8c      	ldr	r3, [pc, #560]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a8b      	ldr	r2, [pc, #556]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002076:	f7ff fad1 	bl	800161c <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207e:	f7ff facd 	bl	800161c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e227      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	061b      	lsls	r3, r3, #24
 80020aa:	497c      	ldr	r1, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x578>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
 80020b0:	e018      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	4b7a      	ldr	r3, [pc, #488]	; (800229c <HAL_RCC_OscConfig+0x578>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a79      	ldr	r2, [pc, #484]	; (800229c <HAL_RCC_OscConfig+0x578>)
 80020b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020be:	f7ff faad 	bl	800161c <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c6:	f7ff faa9 	bl	800161c <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e203      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d8:	4b70      	ldr	r3, [pc, #448]	; (800229c <HAL_RCC_OscConfig+0x578>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1f0      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03c      	beq.n	800216a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01c      	beq.n	8002132 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f8:	4b68      	ldr	r3, [pc, #416]	; (800229c <HAL_RCC_OscConfig+0x578>)
 80020fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fe:	4a67      	ldr	r2, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fa88 	bl	800161c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fa84 	bl	800161c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1de      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002122:	4b5e      	ldr	r3, [pc, #376]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCC_OscConfig+0x3ec>
 8002130:	e01b      	b.n	800216a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b5a      	ldr	r3, [pc, #360]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002138:	4a58      	ldr	r2, [pc, #352]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7ff fa6b 	bl	800161c <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214a:	f7ff fa67 	bl	800161c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1c1      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800215c:	4b4f      	ldr	r3, [pc, #316]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ef      	bne.n	800214a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	f000 80a6 	beq.w	80022c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800217c:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a43      	ldr	r2, [pc, #268]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a4:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_RCC_OscConfig+0x57c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d118      	bne.n	80021e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_OscConfig+0x57c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <HAL_RCC_OscConfig+0x57c>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fa2e 	bl	800161c <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7ff fa2a 	bl	800161c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e184      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d6:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_RCC_OscConfig+0x57c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d108      	bne.n	80021fc <HAL_RCC_OscConfig+0x4d8>
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <HAL_RCC_OscConfig+0x578>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x578>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021fa:	e024      	b.n	8002246 <HAL_RCC_OscConfig+0x522>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2b05      	cmp	r3, #5
 8002202:	d110      	bne.n	8002226 <HAL_RCC_OscConfig+0x502>
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	4a24      	ldr	r2, [pc, #144]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221a:	4a20      	ldr	r2, [pc, #128]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002224:	e00f      	b.n	8002246 <HAL_RCC_OscConfig+0x522>
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800222e:	f023 0301 	bic.w	r3, r3, #1
 8002232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_OscConfig+0x578>)
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	4a17      	ldr	r2, [pc, #92]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800223e:	f023 0304 	bic.w	r3, r3, #4
 8002242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d016      	beq.n	800227c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224e:	f7ff f9e5 	bl	800161c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002254:	e00a      	b.n	800226c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002256:	f7ff f9e1 	bl	800161c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	f241 3288 	movw	r2, #5000	; 0x1388
 8002264:	4293      	cmp	r3, r2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e139      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x578>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ed      	beq.n	8002256 <HAL_RCC_OscConfig+0x532>
 800227a:	e01a      	b.n	80022b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227c:	f7ff f9ce 	bl	800161c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002282:	e00f      	b.n	80022a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002284:	f7ff f9ca 	bl	800161c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d906      	bls.n	80022a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e122      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022a4:	4b90      	ldr	r3, [pc, #576]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e8      	bne.n	8002284 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022b2:	7ffb      	ldrb	r3, [r7, #31]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b8:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	4a8a      	ldr	r2, [pc, #552]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80022be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8108 	beq.w	80024de <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	f040 80d0 	bne.w	8002478 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022d8:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f003 0203 	and.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d130      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	3b01      	subs	r3, #1
 80022f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d127      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d11f      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002318:	2a07      	cmp	r2, #7
 800231a:	bf14      	ite	ne
 800231c:	2201      	movne	r2, #1
 800231e:	2200      	moveq	r2, #0
 8002320:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002322:	4293      	cmp	r3, r2
 8002324:	d113      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d109      	bne.n	800234e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	085b      	lsrs	r3, r3, #1
 8002346:	3b01      	subs	r3, #1
 8002348:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d06e      	beq.n	800242c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d069      	beq.n	8002428 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002354:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0b7      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002370:	4b5d      	ldr	r3, [pc, #372]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a5c      	ldr	r2, [pc, #368]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800237c:	f7ff f94e 	bl	800161c <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f94a 	bl	800161c <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0a4      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002396:	4b54      	ldr	r3, [pc, #336]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	4b51      	ldr	r3, [pc, #324]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b51      	ldr	r3, [pc, #324]	; (80024ec <HAL_RCC_OscConfig+0x7c8>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023bc:	0212      	lsls	r2, r2, #8
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023c4:	0852      	lsrs	r2, r2, #1
 80023c6:	3a01      	subs	r2, #1
 80023c8:	0552      	lsls	r2, r2, #21
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023d0:	0852      	lsrs	r2, r2, #1
 80023d2:	3a01      	subs	r2, #1
 80023d4:	0652      	lsls	r2, r2, #25
 80023d6:	4311      	orrs	r1, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023dc:	0912      	lsrs	r2, r2, #4
 80023de:	0452      	lsls	r2, r2, #17
 80023e0:	430a      	orrs	r2, r1
 80023e2:	4941      	ldr	r1, [pc, #260]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a3e      	ldr	r2, [pc, #248]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a3b      	ldr	r2, [pc, #236]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002400:	f7ff f90c 	bl	800161c <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f908 	bl	800161c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e062      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002426:	e05a      	b.n	80024de <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e059      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242c:	4b2e      	ldr	r3, [pc, #184]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d152      	bne.n	80024de <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a2a      	ldr	r2, [pc, #168]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002450:	f7ff f8e4 	bl	800161c <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7ff f8e0 	bl	800161c <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e03a      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x734>
 8002476:	e032      	b.n	80024de <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d02d      	beq.n	80024da <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002488:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	4a13      	ldr	r2, [pc, #76]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 800249c:	f023 0303 	bic.w	r3, r3, #3
 80024a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80024a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7ff f8b3 	bl	800161c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7ff f8af 	bl	800161c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e009      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_OscConfig+0x7c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x796>
 80024d8:	e001      	b.n	80024de <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	f99d808c 	.word	0xf99d808c

080024f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0c8      	b.n	8002696 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002504:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d910      	bls.n	8002534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b63      	ldr	r3, [pc, #396]	; (80026a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4961      	ldr	r1, [pc, #388]	; (80026a0 <HAL_RCC_ClockConfig+0x1b0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b0      	b.n	8002696 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	d04c      	beq.n	80025da <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d107      	bne.n	8002558 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002548:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d121      	bne.n	8002598 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e09e      	b.n	8002696 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d107      	bne.n	8002570 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002560:	4b50      	ldr	r3, [pc, #320]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d115      	bne.n	8002598 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e092      	b.n	8002696 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d107      	bne.n	8002588 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e086      	b.n	8002696 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002588:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e07e      	b.n	8002696 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002598:	4b42      	ldr	r3, [pc, #264]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f023 0203 	bic.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	493f      	ldr	r1, [pc, #252]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025aa:	f7ff f837 	bl	800161c <HAL_GetTick>
 80025ae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7ff f833 	bl	800161c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e066      	b.n	8002696 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c8:	4b36      	ldr	r3, [pc, #216]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 020c 	and.w	r2, r3, #12
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d1eb      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	492c      	ldr	r1, [pc, #176]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_RCC_ClockConfig+0x1b0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d210      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 0207 	bic.w	r2, r3, #7
 800260e:	4924      	ldr	r1, [pc, #144]	; (80026a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b22      	ldr	r3, [pc, #136]	; (80026a0 <HAL_RCC_ClockConfig+0x1b0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e036      	b.n	8002696 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4918      	ldr	r1, [pc, #96]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4910      	ldr	r1, [pc, #64]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002666:	f000 f825 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCC_ClockConfig+0x1b4>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490c      	ldr	r1, [pc, #48]	; (80026a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe ff76 	bl	800157c <HAL_InitTick>
 8002690:	4603      	mov	r3, r0
 8002692:	72fb      	strb	r3, [r7, #11]

  return status;
 8002694:	7afb      	ldrb	r3, [r7, #11]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40022000 	.word	0x40022000
 80026a4:	40021000 	.word	0x40021000
 80026a8:	08006310 	.word	0x08006310
 80026ac:	200001f8 	.word	0x200001f8
 80026b0:	200001fc 	.word	0x200001fc

080026b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	; 0x24
 80026b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	4b3e      	ldr	r3, [pc, #248]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026cc:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x34>
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d121      	bne.n	8002726 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d11e      	bne.n	8002726 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026e8:	4b34      	ldr	r3, [pc, #208]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d107      	bne.n	8002704 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026f4:	4b31      	ldr	r3, [pc, #196]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 80026f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e005      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002710:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10d      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002724:	e00a      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d102      	bne.n	8002732 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800272e:	61bb      	str	r3, [r7, #24]
 8002730:	e004      	b.n	800273c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d101      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002738:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800273a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d134      	bne.n	80027ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d003      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0xa6>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d003      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0xac>
 8002758:	e005      	b.n	8002766 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800275c:	617b      	str	r3, [r7, #20]
      break;
 800275e:	e005      	b.n	800276c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002762:	617b      	str	r3, [r7, #20]
      break;
 8002764:	e002      	b.n	800276c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	617b      	str	r3, [r7, #20]
      break;
 800276a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	3301      	adds	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	fb02 f203 	mul.w	r2, r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	0e5b      	lsrs	r3, r3, #25
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	3301      	adds	r3, #1
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027ac:	69bb      	ldr	r3, [r7, #24]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	08006328 	.word	0x08006328
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	007a1200 	.word	0x007a1200

080027cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	200001f8 	.word	0x200001f8

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027e8:	f7ff fff0 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4904      	ldr	r1, [pc, #16]	; (800280c <HAL_RCC_GetPCLK1Freq+0x28>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	08006320 	.word	0x08006320

08002810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002814:	f7ff ffda 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	0adb      	lsrs	r3, r3, #11
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	08006320 	.word	0x08006320

0800283c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002854:	f7ff fa02 	bl	8001c5c <HAL_PWREx_GetVoltageRange>
 8002858:	6178      	str	r0, [r7, #20]
 800285a:	e014      	b.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
 8002868:	4b22      	ldr	r3, [pc, #136]	; (80028f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002874:	f7ff f9f2 	bl	8001c5c <HAL_PWREx_GetVoltageRange>
 8002878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287e:	4a1d      	ldr	r2, [pc, #116]	; (80028f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002884:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800288c:	d10b      	bne.n	80028a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b80      	cmp	r3, #128	; 0x80
 8002892:	d919      	bls.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2ba0      	cmp	r3, #160	; 0xa0
 8002898:	d902      	bls.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800289a:	2302      	movs	r3, #2
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	e013      	b.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028a0:	2301      	movs	r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	e010      	b.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b80      	cmp	r3, #128	; 0x80
 80028aa:	d902      	bls.n	80028b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80028ac:	2303      	movs	r3, #3
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	e00a      	b.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b80      	cmp	r3, #128	; 0x80
 80028b6:	d102      	bne.n	80028be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028b8:	2302      	movs	r3, #2
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	e004      	b.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b70      	cmp	r3, #112	; 0x70
 80028c2:	d101      	bne.n	80028c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028c4:	2301      	movs	r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 0207 	bic.w	r2, r3, #7
 80028d0:	4909      	ldr	r1, [pc, #36]	; (80028f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40022000 	.word	0x40022000

080028fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002904:	2300      	movs	r3, #0
 8002906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002908:	2300      	movs	r3, #0
 800290a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002914:	2b00      	cmp	r3, #0
 8002916:	d041      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800291c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002920:	d02a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002922:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002926:	d824      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800292c:	d008      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800292e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002932:	d81e      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800293c:	d010      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800293e:	e018      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002940:	4b86      	ldr	r3, [pc, #536]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4a85      	ldr	r2, [pc, #532]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800294c:	e015      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fabb 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800295e:	e00c      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3320      	adds	r3, #32
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fba6 	bl	80030b8 <RCCEx_PLLSAI2_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002970:	e003      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	74fb      	strb	r3, [r7, #19]
      break;
 8002976:	e000      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800297a:	7cfb      	ldrb	r3, [r7, #19]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002980:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800298e:	4973      	ldr	r1, [pc, #460]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002996:	e001      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	7cfb      	ldrb	r3, [r7, #19]
 800299a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d041      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029b0:	d02a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80029b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029b6:	d824      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029bc:	d008      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029c2:	d81e      	bhi.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d010      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029ce:	e018      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029d0:	4b62      	ldr	r3, [pc, #392]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a61      	ldr	r2, [pc, #388]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029dc:	e015      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2100      	movs	r1, #0
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fa73 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029ee:	e00c      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3320      	adds	r3, #32
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fb5e 	bl	80030b8 <RCCEx_PLLSAI2_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a00:	e003      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	74fb      	strb	r3, [r7, #19]
      break;
 8002a06:	e000      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a0a:	7cfb      	ldrb	r3, [r7, #19]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10b      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a10:	4b52      	ldr	r3, [pc, #328]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a1e:	494f      	ldr	r1, [pc, #316]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a26:	e001      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80a0 	beq.w	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a3e:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b41      	ldr	r3, [pc, #260]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a58:	4a40      	ldr	r2, [pc, #256]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a60:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a70:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a7c:	f7fe fdce 	bl	800161c <HAL_GetTick>
 8002a80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a82:	e009      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a84:	f7fe fdca 	bl	800161c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d902      	bls.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	74fb      	strb	r3, [r7, #19]
        break;
 8002a96:	e005      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a98:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0ef      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d15c      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aaa:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01f      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d019      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ac8:	4b24      	ldr	r3, [pc, #144]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae4:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002af4:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d016      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fd89 	bl	800161c <HAL_GetTick>
 8002b0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b0c:	e00b      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fd85 	bl	800161c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d902      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	74fb      	strb	r3, [r7, #19]
            break;
 8002b24:	e006      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ec      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4a:	4904      	ldr	r1, [pc, #16]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b52:	e009      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
 8002b58:	e006      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b5a:	bf00      	nop
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	7cfb      	ldrb	r3, [r7, #19]
 8002b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b68:	7c7b      	ldrb	r3, [r7, #17]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b9e      	ldr	r3, [pc, #632]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	4a9d      	ldr	r2, [pc, #628]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b86:	4b98      	ldr	r3, [pc, #608]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	f023 0203 	bic.w	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	4994      	ldr	r1, [pc, #592]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ba8:	4b8f      	ldr	r3, [pc, #572]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f023 020c 	bic.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	498c      	ldr	r1, [pc, #560]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bca:	4b87      	ldr	r3, [pc, #540]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	4983      	ldr	r1, [pc, #524]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bec:	4b7e      	ldr	r3, [pc, #504]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	497b      	ldr	r1, [pc, #492]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c0e:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1c:	4972      	ldr	r1, [pc, #456]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c30:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	496a      	ldr	r1, [pc, #424]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c52:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	4961      	ldr	r1, [pc, #388]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c74:	4b5c      	ldr	r3, [pc, #368]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c82:	4959      	ldr	r1, [pc, #356]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca4:	4950      	ldr	r1, [pc, #320]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	4948      	ldr	r1, [pc, #288]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cda:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce8:	493f      	ldr	r1, [pc, #252]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d028      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cfc:	4b3a      	ldr	r3, [pc, #232]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0a:	4937      	ldr	r1, [pc, #220]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d1a:	d106      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a31      	ldr	r2, [pc, #196]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d26:	60d3      	str	r3, [r2, #12]
 8002d28:	e011      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d32:	d10c      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	2101      	movs	r1, #1
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f8c8 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d028      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	491f      	ldr	r1, [pc, #124]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d78:	d106      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d84:	60d3      	str	r3, [r2, #12]
 8002d86:	e011      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	2101      	movs	r1, #1
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f899 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02b      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dd6:	d109      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a02      	ldr	r2, [pc, #8]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de2:	60d3      	str	r3, [r2, #12]
 8002de4:	e014      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f867 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002e02:	4603      	mov	r3, r0
 8002e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02f      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e2a:	4928      	ldr	r1, [pc, #160]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e3a:	d10d      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2102      	movs	r1, #2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f844 	bl	8002ed0 <RCCEx_PLLSAI1_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d014      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e52:	7cfb      	ldrb	r3, [r7, #19]
 8002e54:	74bb      	strb	r3, [r7, #18]
 8002e56:	e011      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3320      	adds	r3, #32
 8002e66:	2102      	movs	r1, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f925 	bl	80030b8 <RCCEx_PLLSAI2_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e72:	7cfb      	ldrb	r3, [r7, #19]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e78:	7cfb      	ldrb	r3, [r7, #19]
 8002e7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00a      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e96:	490d      	ldr	r1, [pc, #52]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eba:	4904      	ldr	r1, [pc, #16]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ec2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ede:	4b75      	ldr	r3, [pc, #468]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d018      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002eea:	4b72      	ldr	r3, [pc, #456]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f003 0203 	and.w	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d10d      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
       ||
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f02:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	091b      	lsrs	r3, r3, #4
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
       ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d047      	beq.n	8002fa6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
 8002f1a:	e044      	b.n	8002fa6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d018      	beq.n	8002f56 <RCCEx_PLLSAI1_Config+0x86>
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d825      	bhi.n	8002f74 <RCCEx_PLLSAI1_Config+0xa4>
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d002      	beq.n	8002f32 <RCCEx_PLLSAI1_Config+0x62>
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d009      	beq.n	8002f44 <RCCEx_PLLSAI1_Config+0x74>
 8002f30:	e020      	b.n	8002f74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f32:	4b60      	ldr	r3, [pc, #384]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d11d      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f42:	e01a      	b.n	8002f7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f44:	4b5b      	ldr	r3, [pc, #364]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d116      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f54:	e013      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f56:	4b57      	ldr	r3, [pc, #348]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f62:	4b54      	ldr	r3, [pc, #336]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f72:	e006      	b.n	8002f82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	e004      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f7a:	bf00      	nop
 8002f7c:	e002      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e000      	b.n	8002f84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f82:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10d      	bne.n	8002fa6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6819      	ldr	r1, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	4944      	ldr	r1, [pc, #272]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d17d      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002fac:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a40      	ldr	r2, [pc, #256]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb8:	f7fe fb30 	bl	800161c <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fbe:	e009      	b.n	8002fd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fc0:	f7fe fb2c 	bl	800161c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d902      	bls.n	8002fd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fd2:	e005      	b.n	8002fe0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fd4:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1ef      	bne.n	8002fc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d160      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d111      	bne.n	8003010 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fec:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6892      	ldr	r2, [r2, #8]
 8002ffc:	0211      	lsls	r1, r2, #8
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68d2      	ldr	r2, [r2, #12]
 8003002:	0912      	lsrs	r2, r2, #4
 8003004:	0452      	lsls	r2, r2, #17
 8003006:	430a      	orrs	r2, r1
 8003008:	492a      	ldr	r1, [pc, #168]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	610b      	str	r3, [r1, #16]
 800300e:	e027      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d112      	bne.n	800303c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003016:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800301e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	0211      	lsls	r1, r2, #8
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6912      	ldr	r2, [r2, #16]
 800302c:	0852      	lsrs	r2, r2, #1
 800302e:	3a01      	subs	r2, #1
 8003030:	0552      	lsls	r2, r2, #21
 8003032:	430a      	orrs	r2, r1
 8003034:	491f      	ldr	r1, [pc, #124]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	610b      	str	r3, [r1, #16]
 800303a:	e011      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303c:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003044:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6892      	ldr	r2, [r2, #8]
 800304c:	0211      	lsls	r1, r2, #8
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6952      	ldr	r2, [r2, #20]
 8003052:	0852      	lsrs	r2, r2, #1
 8003054:	3a01      	subs	r2, #1
 8003056:	0652      	lsls	r2, r2, #25
 8003058:	430a      	orrs	r2, r1
 800305a:	4916      	ldr	r1, [pc, #88]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305c:	4313      	orrs	r3, r2
 800305e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a13      	ldr	r2, [pc, #76]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003066:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800306a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe fad6 	bl	800161c <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003072:	e009      	b.n	8003088 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003074:	f7fe fad2 	bl	800161c <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d902      	bls.n	8003088 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	73fb      	strb	r3, [r7, #15]
          break;
 8003086:	e005      	b.n	8003094 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0ef      	beq.n	8003074 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	4904      	ldr	r1, [pc, #16]	; (80030b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000

080030b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030c6:	4b6a      	ldr	r3, [pc, #424]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d018      	beq.n	8003104 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030d2:	4b67      	ldr	r3, [pc, #412]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0203 	and.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10d      	bne.n	80030fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
       ||
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d009      	beq.n	80030fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030ea:	4b61      	ldr	r3, [pc, #388]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
       ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d047      	beq.n	800318e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e044      	b.n	800318e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d018      	beq.n	800313e <RCCEx_PLLSAI2_Config+0x86>
 800310c:	2b03      	cmp	r3, #3
 800310e:	d825      	bhi.n	800315c <RCCEx_PLLSAI2_Config+0xa4>
 8003110:	2b01      	cmp	r3, #1
 8003112:	d002      	beq.n	800311a <RCCEx_PLLSAI2_Config+0x62>
 8003114:	2b02      	cmp	r3, #2
 8003116:	d009      	beq.n	800312c <RCCEx_PLLSAI2_Config+0x74>
 8003118:	e020      	b.n	800315c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800311a:	4b55      	ldr	r3, [pc, #340]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d11d      	bne.n	8003162 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312a:	e01a      	b.n	8003162 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003134:	2b00      	cmp	r3, #0
 8003136:	d116      	bne.n	8003166 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800313c:	e013      	b.n	8003166 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800313e:	4b4c      	ldr	r3, [pc, #304]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800314a:	4b49      	ldr	r3, [pc, #292]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800315a:	e006      	b.n	800316a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e004      	b.n	800316c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003162:	bf00      	nop
 8003164:	e002      	b.n	800316c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800316a:	bf00      	nop
    }

    if(status == HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6819      	ldr	r1, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	430b      	orrs	r3, r1
 8003188:	4939      	ldr	r1, [pc, #228]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d167      	bne.n	8003264 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003194:	4b36      	ldr	r3, [pc, #216]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a35      	ldr	r2, [pc, #212]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fe fa3c 	bl	800161c <HAL_GetTick>
 80031a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031a6:	e009      	b.n	80031bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031a8:	f7fe fa38 	bl	800161c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d902      	bls.n	80031bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	73fb      	strb	r3, [r7, #15]
        break;
 80031ba:	e005      	b.n	80031c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031bc:	4b2c      	ldr	r3, [pc, #176]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1ef      	bne.n	80031a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d14a      	bne.n	8003264 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d111      	bne.n	80031f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6892      	ldr	r2, [r2, #8]
 80031e4:	0211      	lsls	r1, r2, #8
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	0912      	lsrs	r2, r2, #4
 80031ec:	0452      	lsls	r2, r2, #17
 80031ee:	430a      	orrs	r2, r1
 80031f0:	491f      	ldr	r1, [pc, #124]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	614b      	str	r3, [r1, #20]
 80031f6:	e011      	b.n	800321c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6892      	ldr	r2, [r2, #8]
 8003208:	0211      	lsls	r1, r2, #8
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6912      	ldr	r2, [r2, #16]
 800320e:	0852      	lsrs	r2, r2, #1
 8003210:	3a01      	subs	r2, #1
 8003212:	0652      	lsls	r2, r2, #25
 8003214:	430a      	orrs	r2, r1
 8003216:	4916      	ldr	r1, [pc, #88]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003218:	4313      	orrs	r3, r2
 800321a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a13      	ldr	r2, [pc, #76]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003226:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe f9f8 	bl	800161c <HAL_GetTick>
 800322c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800322e:	e009      	b.n	8003244 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003230:	f7fe f9f4 	bl	800161c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d902      	bls.n	8003244 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	73fb      	strb	r3, [r7, #15]
          break;
 8003242:	e005      	b.n	8003250 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ef      	beq.n	8003230 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	4904      	ldr	r1, [pc, #16]	; (8003270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003260:	4313      	orrs	r3, r2
 8003262:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000

08003274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e095      	b.n	80033b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003296:	d009      	beq.n	80032ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	61da      	str	r2, [r3, #28]
 800329e:	e005      	b.n	80032ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fd ff12 	bl	80010f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032ec:	d902      	bls.n	80032f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e002      	b.n	80032fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003302:	d007      	beq.n	8003314 <HAL_SPI_Init+0xa0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003356:	ea42 0103 	orr.w	r1, r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	0c1b      	lsrs	r3, r3, #16
 8003370:	f003 0204 	and.w	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003390:	ea42 0103 	orr.w	r1, r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b088      	sub	sp, #32
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	4613      	mov	r3, r2
 80033c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_SPI_Transmit+0x22>
 80033d8:	2302      	movs	r3, #2
 80033da:	e158      	b.n	800368e <HAL_SPI_Transmit+0x2d4>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033e4:	f7fe f91a 	bl	800161c <HAL_GetTick>
 80033e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
 80033fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80033fe:	e13d      	b.n	800367c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_SPI_Transmit+0x52>
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003410:	e134      	b.n	800367c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2203      	movs	r2, #3
 8003416:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345c:	d10f      	bne.n	800347e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800347c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d007      	beq.n	800349c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a4:	d94b      	bls.n	800353e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_Transmit+0xfa>
 80034ae:	8afb      	ldrh	r3, [r7, #22]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d13e      	bne.n	8003532 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	881a      	ldrh	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	1c9a      	adds	r2, r3, #2
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034d8:	e02b      	b.n	8003532 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d112      	bne.n	800350e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	1c9a      	adds	r2, r3, #2
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800350c:	e011      	b.n	8003532 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800350e:	f7fe f885 	bl	800161c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d803      	bhi.n	8003526 <HAL_SPI_Transmit+0x16c>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d102      	bne.n	800352c <HAL_SPI_Transmit+0x172>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d102      	bne.n	8003532 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003530:	e0a4      	b.n	800367c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ce      	bne.n	80034da <HAL_SPI_Transmit+0x120>
 800353c:	e07c      	b.n	8003638 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_SPI_Transmit+0x192>
 8003546:	8afb      	ldrh	r3, [r7, #22]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d170      	bne.n	800362e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d912      	bls.n	800357c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	881a      	ldrh	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	1c9a      	adds	r2, r3, #2
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b02      	subs	r3, #2
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	87da      	strh	r2, [r3, #62]	; 0x3e
 800357a:	e058      	b.n	800362e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	7812      	ldrb	r2, [r2, #0]
 8003588:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035a2:	e044      	b.n	800362e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d12b      	bne.n	800360a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d912      	bls.n	80035e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	881a      	ldrh	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	1c9a      	adds	r2, r3, #2
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	3b02      	subs	r3, #2
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035e0:	e025      	b.n	800362e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003608:	e011      	b.n	800362e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800360a:	f7fe f807 	bl	800161c <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d803      	bhi.n	8003622 <HAL_SPI_Transmit+0x268>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d102      	bne.n	8003628 <HAL_SPI_Transmit+0x26e>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800362c:	e026      	b.n	800367c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1b5      	bne.n	80035a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fcdb 	bl	8003ff8 <SPI_EndRxTxTransaction>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10a      	bne.n	800366c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	e000      	b.n	800367c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800367a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800368c:	7ffb      	ldrb	r3, [r7, #31]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b088      	sub	sp, #32
 800369a:	af02      	add	r7, sp, #8
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b2:	d112      	bne.n	80036da <HAL_SPI_Receive+0x44>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10e      	bne.n	80036da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2204      	movs	r2, #4
 80036c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f910 	bl	80038f6 <HAL_SPI_TransmitReceive>
 80036d6:	4603      	mov	r3, r0
 80036d8:	e109      	b.n	80038ee <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_SPI_Receive+0x52>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e102      	b.n	80038ee <HAL_SPI_Receive+0x258>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036f0:	f7fd ff94 	bl	800161c <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d002      	beq.n	8003708 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003706:	e0e9      	b.n	80038dc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_SPI_Receive+0x7e>
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d102      	bne.n	800371a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003718:	e0e0      	b.n	80038dc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2204      	movs	r2, #4
 800371e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	88fa      	ldrh	r2, [r7, #6]
 8003732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003764:	d908      	bls.n	8003778 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	e007      	b.n	8003788 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003786:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003790:	d10f      	bne.n	80037b2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d007      	beq.n	80037d0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037d8:	d867      	bhi.n	80038aa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037da:	e030      	b.n	800383e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d117      	bne.n	800381a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f103 020c 	add.w	r2, r3, #12
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	7812      	ldrb	r2, [r2, #0]
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003818:	e011      	b.n	800383e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381a:	f7fd feff 	bl	800161c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d803      	bhi.n	8003832 <HAL_SPI_Receive+0x19c>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d102      	bne.n	8003838 <HAL_SPI_Receive+0x1a2>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800383c:	e04e      	b.n	80038dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1c8      	bne.n	80037dc <HAL_SPI_Receive+0x146>
 800384a:	e034      	b.n	80038b6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d115      	bne.n	8003886 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	b292      	uxth	r2, r2
 8003866:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003884:	e011      	b.n	80038aa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003886:	f7fd fec9 	bl	800161c <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d803      	bhi.n	800389e <HAL_SPI_Receive+0x208>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d102      	bne.n	80038a4 <HAL_SPI_Receive+0x20e>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038a8:	e018      	b.n	80038dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ca      	bne.n	800384c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 fb44 	bl	8003f48 <SPI_EndRxTransaction>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d002      	beq.n	80038da <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
 80038d8:	e000      	b.n	80038dc <HAL_SPI_Receive+0x246>
  }

error :
 80038da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08a      	sub	sp, #40	; 0x28
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003904:	2301      	movs	r3, #1
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_SPI_TransmitReceive+0x26>
 8003918:	2302      	movs	r3, #2
 800391a:	e1fb      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x41e>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003924:	f7fd fe7a 	bl	800161c <HAL_GetTick>
 8003928:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003930:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003938:	887b      	ldrh	r3, [r7, #2]
 800393a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800393c:	887b      	ldrh	r3, [r7, #2]
 800393e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003940:	7efb      	ldrb	r3, [r7, #27]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d00e      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x6e>
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394c:	d106      	bne.n	800395c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_SPI_TransmitReceive+0x66>
 8003956:	7efb      	ldrb	r3, [r7, #27]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d003      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800395c:	2302      	movs	r3, #2
 800395e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003962:	e1cd      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x80>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x80>
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800397c:	e1c0      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2205      	movs	r2, #5
 800398e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	887a      	ldrh	r2, [r7, #2]
 80039a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	887a      	ldrh	r2, [r7, #2]
 80039aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	887a      	ldrh	r2, [r7, #2]
 80039be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d4:	d802      	bhi.n	80039dc <HAL_SPI_TransmitReceive+0xe6>
 80039d6:	8a3b      	ldrh	r3, [r7, #16]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d908      	bls.n	80039ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	e007      	b.n	80039fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d007      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a24:	d97c      	bls.n	8003b20 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_SPI_TransmitReceive+0x13e>
 8003a2e:	8a7b      	ldrh	r3, [r7, #18]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d169      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	881a      	ldrh	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	1c9a      	adds	r2, r3, #2
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a58:	e056      	b.n	8003b08 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d11b      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x1aa>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d016      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x1aa>
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d113      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d11c      	bne.n	8003ae8 <HAL_SPI_TransmitReceive+0x1f2>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	b292      	uxth	r2, r2
 8003ac6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ae8:	f7fd fd98 	bl	800161c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d807      	bhi.n	8003b08 <HAL_SPI_TransmitReceive+0x212>
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d003      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b06:	e0fb      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1a3      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x164>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d19d      	bne.n	8003a5a <HAL_SPI_TransmitReceive+0x164>
 8003b1e:	e0df      	b.n	8003ce0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_SPI_TransmitReceive+0x23a>
 8003b28:	8a7b      	ldrh	r3, [r7, #18]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	f040 80cb 	bne.w	8003cc6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d912      	bls.n	8003b60 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	881a      	ldrh	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b02      	subs	r3, #2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b5e:	e0b2      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b86:	e09e      	b.n	8003cc6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d134      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x30a>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d02f      	beq.n	8003c00 <HAL_SPI_TransmitReceive+0x30a>
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d12c      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d912      	bls.n	8003bd6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	1c9a      	adds	r2, r3, #2
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	3b02      	subs	r3, #2
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bd4:	e012      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	330c      	adds	r3, #12
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d148      	bne.n	8003ca0 <HAL_SPI_TransmitReceive+0x3aa>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d042      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d923      	bls.n	8003c6e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	b292      	uxth	r2, r2
 8003c32:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b02      	subs	r3, #2
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d81f      	bhi.n	8003c9c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	e016      	b.n	8003c9c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f103 020c 	add.w	r2, r3, #12
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	7812      	ldrb	r2, [r2, #0]
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ca0:	f7fd fcbc 	bl	800161c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d803      	bhi.n	8003cb8 <HAL_SPI_TransmitReceive+0x3c2>
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_TransmitReceive+0x3c8>
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d103      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003cc4:	e01c      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f47f af5b 	bne.w	8003b88 <HAL_SPI_TransmitReceive+0x292>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f47f af54 	bne.w	8003b88 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f987 	bl	8003ff8 <SPI_EndRxTxTransaction>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d006      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	661a      	str	r2, [r3, #96]	; 0x60
 8003cfc:	e000      	b.n	8003d00 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3728      	adds	r7, #40	; 0x28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d2c:	f7fd fc76 	bl	800161c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	4413      	add	r3, r2
 8003d3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d3c:	f7fd fc6e 	bl	800161c <HAL_GetTick>
 8003d40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	015b      	lsls	r3, r3, #5
 8003d48:	0d1b      	lsrs	r3, r3, #20
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	fb02 f303 	mul.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d52:	e054      	b.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d050      	beq.n	8003dfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d5c:	f7fd fc5e 	bl	800161c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d902      	bls.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d13d      	bne.n	8003dee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d8a:	d111      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d94:	d004      	beq.n	8003da0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	d107      	bne.n	8003db0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db8:	d10f      	bne.n	8003dda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e017      	b.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4013      	ands	r3, r2
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	bf0c      	ite	eq
 8003e0e:	2301      	moveq	r3, #1
 8003e10:	2300      	movne	r3, #0
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	461a      	mov	r2, r3
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d19b      	bne.n	8003d54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200001f8 	.word	0x200001f8

08003e2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e3a:	f7fd fbef 	bl	800161c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e4a:	f7fd fbe7 	bl	800161c <HAL_GetTick>
 8003e4e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e50:	4b3c      	ldr	r3, [pc, #240]	; (8003f44 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	00da      	lsls	r2, r3, #3
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	0d1b      	lsrs	r3, r3, #20
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e68:	e05f      	b.n	8003f2a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e70:	d106      	bne.n	8003e80 <SPI_WaitFifoStateUntilTimeout+0x54>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d050      	beq.n	8003f2a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e88:	f7fd fbc8 	bl	800161c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d902      	bls.n	8003e9e <SPI_WaitFifoStateUntilTimeout+0x72>
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d13d      	bne.n	8003f1a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003eac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb6:	d111      	bne.n	8003edc <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec0:	d004      	beq.n	8003ecc <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d107      	bne.n	8003edc <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ee4:	d10f      	bne.n	8003f06 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e010      	b.n	8003f3c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d197      	bne.n	8003e6a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	200001f8 	.word	0x200001f8

08003f48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f5c:	d111      	bne.n	8003f82 <SPI_EndRxTransaction+0x3a>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	d004      	beq.n	8003f72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f70:	d107      	bne.n	8003f82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f80:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff fec5 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d007      	beq.n	8003fa8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e023      	b.n	8003ff0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb0:	d11d      	bne.n	8003fee <SPI_EndRxTransaction+0xa6>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d004      	beq.n	8003fc6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc4:	d113      	bne.n	8003fee <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff ff2a 	bl	8003e2c <SPI_WaitFifoStateUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e000      	b.n	8003ff0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff ff0b 	bl	8003e2c <SPI_WaitFifoStateUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e027      	b.n	800407c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	2180      	movs	r1, #128	; 0x80
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff fe70 	bl	8003d1c <SPI_WaitFlagStateUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d007      	beq.n	8004052 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e014      	b.n	800407c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	9300      	str	r3, [sp, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff fee4 	bl	8003e2c <SPI_WaitFifoStateUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e000      	b.n	800407c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e040      	b.n	8004118 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fd f8ce 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	; 0x24
 80040b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0201 	bic.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8ce 	bl	8004264 <UART_SetConfig>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e022      	b.n	8004118 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fb4c 	bl	8004778 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0201 	orr.w	r2, r2, #1
 800410e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fbd3 	bl	80048bc <UART_CheckIdleState>
 8004116:	4603      	mov	r3, r0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004132:	2b20      	cmp	r3, #32
 8004134:	f040 808a 	bne.w	800424c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_UART_Receive_IT+0x24>
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e082      	b.n	800424e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_UART_Receive_IT+0x36>
 8004152:	2302      	movs	r3, #2
 8004154:	e07b      	b.n	800424e <HAL_UART_Receive_IT+0x12e>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004182:	d10e      	bne.n	80041a2 <HAL_UART_Receive_IT+0x82>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d105      	bne.n	8004198 <HAL_UART_Receive_IT+0x78>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004192:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004196:	e02d      	b.n	80041f4 <HAL_UART_Receive_IT+0xd4>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	22ff      	movs	r2, #255	; 0xff
 800419c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041a0:	e028      	b.n	80041f4 <HAL_UART_Receive_IT+0xd4>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_UART_Receive_IT+0xa6>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <HAL_UART_Receive_IT+0x9c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041ba:	e01b      	b.n	80041f4 <HAL_UART_Receive_IT+0xd4>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	227f      	movs	r2, #127	; 0x7f
 80041c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041c4:	e016      	b.n	80041f4 <HAL_UART_Receive_IT+0xd4>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ce:	d10d      	bne.n	80041ec <HAL_UART_Receive_IT+0xcc>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_UART_Receive_IT+0xc2>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	227f      	movs	r2, #127	; 0x7f
 80041dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041e0:	e008      	b.n	80041f4 <HAL_UART_Receive_IT+0xd4>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	223f      	movs	r2, #63	; 0x3f
 80041e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80041ea:	e003      	b.n	80041f4 <HAL_UART_Receive_IT+0xd4>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2222      	movs	r2, #34	; 0x22
 80041fe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004218:	d107      	bne.n	800422a <HAL_UART_Receive_IT+0x10a>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d103      	bne.n	800422a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <HAL_UART_Receive_IT+0x13c>)
 8004226:	661a      	str	r2, [r3, #96]	; 0x60
 8004228:	e002      	b.n	8004230 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <HAL_UART_Receive_IT+0x140>)
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004246:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	08004ae7 	.word	0x08004ae7
 8004260:	08004a3d 	.word	0x08004a3d

08004264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004264:	b5b0      	push	{r4, r5, r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	4313      	orrs	r3, r2
 8004286:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4bad      	ldr	r3, [pc, #692]	; (8004544 <UART_SetConfig+0x2e0>)
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	69f9      	ldr	r1, [r7, #28]
 8004298:	430b      	orrs	r3, r1
 800429a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4aa2      	ldr	r2, [pc, #648]	; (8004548 <UART_SetConfig+0x2e4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	430a      	orrs	r2, r1
 80042de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a99      	ldr	r2, [pc, #612]	; (800454c <UART_SetConfig+0x2e8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d121      	bne.n	800432e <UART_SetConfig+0xca>
 80042ea:	4b99      	ldr	r3, [pc, #612]	; (8004550 <UART_SetConfig+0x2ec>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d817      	bhi.n	8004328 <UART_SetConfig+0xc4>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x9c>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004311 	.word	0x08004311
 8004304:	0800431d 	.word	0x0800431d
 8004308:	08004317 	.word	0x08004317
 800430c:	08004323 	.word	0x08004323
 8004310:	2301      	movs	r3, #1
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	e0e7      	b.n	80044e6 <UART_SetConfig+0x282>
 8004316:	2302      	movs	r3, #2
 8004318:	76fb      	strb	r3, [r7, #27]
 800431a:	e0e4      	b.n	80044e6 <UART_SetConfig+0x282>
 800431c:	2304      	movs	r3, #4
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	e0e1      	b.n	80044e6 <UART_SetConfig+0x282>
 8004322:	2308      	movs	r3, #8
 8004324:	76fb      	strb	r3, [r7, #27]
 8004326:	e0de      	b.n	80044e6 <UART_SetConfig+0x282>
 8004328:	2310      	movs	r3, #16
 800432a:	76fb      	strb	r3, [r7, #27]
 800432c:	e0db      	b.n	80044e6 <UART_SetConfig+0x282>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a88      	ldr	r2, [pc, #544]	; (8004554 <UART_SetConfig+0x2f0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d132      	bne.n	800439e <UART_SetConfig+0x13a>
 8004338:	4b85      	ldr	r3, [pc, #532]	; (8004550 <UART_SetConfig+0x2ec>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d828      	bhi.n	8004398 <UART_SetConfig+0x134>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0xe8>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	08004381 	.word	0x08004381
 8004350:	08004399 	.word	0x08004399
 8004354:	08004399 	.word	0x08004399
 8004358:	08004399 	.word	0x08004399
 800435c:	0800438d 	.word	0x0800438d
 8004360:	08004399 	.word	0x08004399
 8004364:	08004399 	.word	0x08004399
 8004368:	08004399 	.word	0x08004399
 800436c:	08004387 	.word	0x08004387
 8004370:	08004399 	.word	0x08004399
 8004374:	08004399 	.word	0x08004399
 8004378:	08004399 	.word	0x08004399
 800437c:	08004393 	.word	0x08004393
 8004380:	2300      	movs	r3, #0
 8004382:	76fb      	strb	r3, [r7, #27]
 8004384:	e0af      	b.n	80044e6 <UART_SetConfig+0x282>
 8004386:	2302      	movs	r3, #2
 8004388:	76fb      	strb	r3, [r7, #27]
 800438a:	e0ac      	b.n	80044e6 <UART_SetConfig+0x282>
 800438c:	2304      	movs	r3, #4
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	e0a9      	b.n	80044e6 <UART_SetConfig+0x282>
 8004392:	2308      	movs	r3, #8
 8004394:	76fb      	strb	r3, [r7, #27]
 8004396:	e0a6      	b.n	80044e6 <UART_SetConfig+0x282>
 8004398:	2310      	movs	r3, #16
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	e0a3      	b.n	80044e6 <UART_SetConfig+0x282>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a6d      	ldr	r2, [pc, #436]	; (8004558 <UART_SetConfig+0x2f4>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d120      	bne.n	80043ea <UART_SetConfig+0x186>
 80043a8:	4b69      	ldr	r3, [pc, #420]	; (8004550 <UART_SetConfig+0x2ec>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043b2:	2b30      	cmp	r3, #48	; 0x30
 80043b4:	d013      	beq.n	80043de <UART_SetConfig+0x17a>
 80043b6:	2b30      	cmp	r3, #48	; 0x30
 80043b8:	d814      	bhi.n	80043e4 <UART_SetConfig+0x180>
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d009      	beq.n	80043d2 <UART_SetConfig+0x16e>
 80043be:	2b20      	cmp	r3, #32
 80043c0:	d810      	bhi.n	80043e4 <UART_SetConfig+0x180>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <UART_SetConfig+0x168>
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d006      	beq.n	80043d8 <UART_SetConfig+0x174>
 80043ca:	e00b      	b.n	80043e4 <UART_SetConfig+0x180>
 80043cc:	2300      	movs	r3, #0
 80043ce:	76fb      	strb	r3, [r7, #27]
 80043d0:	e089      	b.n	80044e6 <UART_SetConfig+0x282>
 80043d2:	2302      	movs	r3, #2
 80043d4:	76fb      	strb	r3, [r7, #27]
 80043d6:	e086      	b.n	80044e6 <UART_SetConfig+0x282>
 80043d8:	2304      	movs	r3, #4
 80043da:	76fb      	strb	r3, [r7, #27]
 80043dc:	e083      	b.n	80044e6 <UART_SetConfig+0x282>
 80043de:	2308      	movs	r3, #8
 80043e0:	76fb      	strb	r3, [r7, #27]
 80043e2:	e080      	b.n	80044e6 <UART_SetConfig+0x282>
 80043e4:	2310      	movs	r3, #16
 80043e6:	76fb      	strb	r3, [r7, #27]
 80043e8:	e07d      	b.n	80044e6 <UART_SetConfig+0x282>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a5b      	ldr	r2, [pc, #364]	; (800455c <UART_SetConfig+0x2f8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d120      	bne.n	8004436 <UART_SetConfig+0x1d2>
 80043f4:	4b56      	ldr	r3, [pc, #344]	; (8004550 <UART_SetConfig+0x2ec>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004400:	d013      	beq.n	800442a <UART_SetConfig+0x1c6>
 8004402:	2bc0      	cmp	r3, #192	; 0xc0
 8004404:	d814      	bhi.n	8004430 <UART_SetConfig+0x1cc>
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d009      	beq.n	800441e <UART_SetConfig+0x1ba>
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d810      	bhi.n	8004430 <UART_SetConfig+0x1cc>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <UART_SetConfig+0x1b4>
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d006      	beq.n	8004424 <UART_SetConfig+0x1c0>
 8004416:	e00b      	b.n	8004430 <UART_SetConfig+0x1cc>
 8004418:	2300      	movs	r3, #0
 800441a:	76fb      	strb	r3, [r7, #27]
 800441c:	e063      	b.n	80044e6 <UART_SetConfig+0x282>
 800441e:	2302      	movs	r3, #2
 8004420:	76fb      	strb	r3, [r7, #27]
 8004422:	e060      	b.n	80044e6 <UART_SetConfig+0x282>
 8004424:	2304      	movs	r3, #4
 8004426:	76fb      	strb	r3, [r7, #27]
 8004428:	e05d      	b.n	80044e6 <UART_SetConfig+0x282>
 800442a:	2308      	movs	r3, #8
 800442c:	76fb      	strb	r3, [r7, #27]
 800442e:	e05a      	b.n	80044e6 <UART_SetConfig+0x282>
 8004430:	2310      	movs	r3, #16
 8004432:	76fb      	strb	r3, [r7, #27]
 8004434:	e057      	b.n	80044e6 <UART_SetConfig+0x282>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a49      	ldr	r2, [pc, #292]	; (8004560 <UART_SetConfig+0x2fc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d125      	bne.n	800448c <UART_SetConfig+0x228>
 8004440:	4b43      	ldr	r3, [pc, #268]	; (8004550 <UART_SetConfig+0x2ec>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444e:	d017      	beq.n	8004480 <UART_SetConfig+0x21c>
 8004450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004454:	d817      	bhi.n	8004486 <UART_SetConfig+0x222>
 8004456:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445a:	d00b      	beq.n	8004474 <UART_SetConfig+0x210>
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d811      	bhi.n	8004486 <UART_SetConfig+0x222>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <UART_SetConfig+0x20a>
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d006      	beq.n	800447a <UART_SetConfig+0x216>
 800446c:	e00b      	b.n	8004486 <UART_SetConfig+0x222>
 800446e:	2300      	movs	r3, #0
 8004470:	76fb      	strb	r3, [r7, #27]
 8004472:	e038      	b.n	80044e6 <UART_SetConfig+0x282>
 8004474:	2302      	movs	r3, #2
 8004476:	76fb      	strb	r3, [r7, #27]
 8004478:	e035      	b.n	80044e6 <UART_SetConfig+0x282>
 800447a:	2304      	movs	r3, #4
 800447c:	76fb      	strb	r3, [r7, #27]
 800447e:	e032      	b.n	80044e6 <UART_SetConfig+0x282>
 8004480:	2308      	movs	r3, #8
 8004482:	76fb      	strb	r3, [r7, #27]
 8004484:	e02f      	b.n	80044e6 <UART_SetConfig+0x282>
 8004486:	2310      	movs	r3, #16
 8004488:	76fb      	strb	r3, [r7, #27]
 800448a:	e02c      	b.n	80044e6 <UART_SetConfig+0x282>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a2d      	ldr	r2, [pc, #180]	; (8004548 <UART_SetConfig+0x2e4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d125      	bne.n	80044e2 <UART_SetConfig+0x27e>
 8004496:	4b2e      	ldr	r3, [pc, #184]	; (8004550 <UART_SetConfig+0x2ec>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a4:	d017      	beq.n	80044d6 <UART_SetConfig+0x272>
 80044a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044aa:	d817      	bhi.n	80044dc <UART_SetConfig+0x278>
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b0:	d00b      	beq.n	80044ca <UART_SetConfig+0x266>
 80044b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b6:	d811      	bhi.n	80044dc <UART_SetConfig+0x278>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <UART_SetConfig+0x260>
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c0:	d006      	beq.n	80044d0 <UART_SetConfig+0x26c>
 80044c2:	e00b      	b.n	80044dc <UART_SetConfig+0x278>
 80044c4:	2300      	movs	r3, #0
 80044c6:	76fb      	strb	r3, [r7, #27]
 80044c8:	e00d      	b.n	80044e6 <UART_SetConfig+0x282>
 80044ca:	2302      	movs	r3, #2
 80044cc:	76fb      	strb	r3, [r7, #27]
 80044ce:	e00a      	b.n	80044e6 <UART_SetConfig+0x282>
 80044d0:	2304      	movs	r3, #4
 80044d2:	76fb      	strb	r3, [r7, #27]
 80044d4:	e007      	b.n	80044e6 <UART_SetConfig+0x282>
 80044d6:	2308      	movs	r3, #8
 80044d8:	76fb      	strb	r3, [r7, #27]
 80044da:	e004      	b.n	80044e6 <UART_SetConfig+0x282>
 80044dc:	2310      	movs	r3, #16
 80044de:	76fb      	strb	r3, [r7, #27]
 80044e0:	e001      	b.n	80044e6 <UART_SetConfig+0x282>
 80044e2:	2310      	movs	r3, #16
 80044e4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <UART_SetConfig+0x2e4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	f040 8087 	bne.w	8004600 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044f2:	7efb      	ldrb	r3, [r7, #27]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d837      	bhi.n	8004568 <UART_SetConfig+0x304>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0x29c>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004525 	.word	0x08004525
 8004504:	08004569 	.word	0x08004569
 8004508:	0800452d 	.word	0x0800452d
 800450c:	08004569 	.word	0x08004569
 8004510:	08004533 	.word	0x08004533
 8004514:	08004569 	.word	0x08004569
 8004518:	08004569 	.word	0x08004569
 800451c:	08004569 	.word	0x08004569
 8004520:	0800453b 	.word	0x0800453b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004524:	f7fe f95e 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8004528:	6178      	str	r0, [r7, #20]
        break;
 800452a:	e022      	b.n	8004572 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <UART_SetConfig+0x300>)
 800452e:	617b      	str	r3, [r7, #20]
        break;
 8004530:	e01f      	b.n	8004572 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004532:	f7fe f8bf 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8004536:	6178      	str	r0, [r7, #20]
        break;
 8004538:	e01b      	b.n	8004572 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453e:	617b      	str	r3, [r7, #20]
        break;
 8004540:	e017      	b.n	8004572 <UART_SetConfig+0x30e>
 8004542:	bf00      	nop
 8004544:	efff69f3 	.word	0xefff69f3
 8004548:	40008000 	.word	0x40008000
 800454c:	40013800 	.word	0x40013800
 8004550:	40021000 	.word	0x40021000
 8004554:	40004400 	.word	0x40004400
 8004558:	40004800 	.word	0x40004800
 800455c:	40004c00 	.word	0x40004c00
 8004560:	40005000 	.word	0x40005000
 8004564:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	76bb      	strb	r3, [r7, #26]
        break;
 8004570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80f1 	beq.w	800475c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4413      	add	r3, r2
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	429a      	cmp	r2, r3
 8004588:	d305      	bcc.n	8004596 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	429a      	cmp	r2, r3
 8004594:	d902      	bls.n	800459c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	76bb      	strb	r3, [r7, #26]
 800459a:	e0df      	b.n	800475c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4618      	mov	r0, r3
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	020b      	lsls	r3, r1, #8
 80045ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045b2:	0202      	lsls	r2, r0, #8
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	6849      	ldr	r1, [r1, #4]
 80045b8:	0849      	lsrs	r1, r1, #1
 80045ba:	4608      	mov	r0, r1
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	1814      	adds	r4, r2, r0
 80045c2:	eb43 0501 	adc.w	r5, r3, r1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	4620      	mov	r0, r4
 80045d2:	4629      	mov	r1, r5
 80045d4:	f7fb fe4c 	bl	8000270 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045e6:	d308      	bcc.n	80045fa <UART_SetConfig+0x396>
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ee:	d204      	bcs.n	80045fa <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	60da      	str	r2, [r3, #12]
 80045f8:	e0b0      	b.n	800475c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	76bb      	strb	r3, [r7, #26]
 80045fe:	e0ad      	b.n	800475c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004608:	d15c      	bne.n	80046c4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800460a:	7efb      	ldrb	r3, [r7, #27]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d828      	bhi.n	8004662 <UART_SetConfig+0x3fe>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <UART_SetConfig+0x3b4>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800463d 	.word	0x0800463d
 800461c:	08004645 	.word	0x08004645
 8004620:	0800464d 	.word	0x0800464d
 8004624:	08004663 	.word	0x08004663
 8004628:	08004653 	.word	0x08004653
 800462c:	08004663 	.word	0x08004663
 8004630:	08004663 	.word	0x08004663
 8004634:	08004663 	.word	0x08004663
 8004638:	0800465b 	.word	0x0800465b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800463c:	f7fe f8d2 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8004640:	6178      	str	r0, [r7, #20]
        break;
 8004642:	e013      	b.n	800466c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004644:	f7fe f8e4 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8004648:	6178      	str	r0, [r7, #20]
        break;
 800464a:	e00f      	b.n	800466c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800464c:	4b49      	ldr	r3, [pc, #292]	; (8004774 <UART_SetConfig+0x510>)
 800464e:	617b      	str	r3, [r7, #20]
        break;
 8004650:	e00c      	b.n	800466c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004652:	f7fe f82f 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8004656:	6178      	str	r0, [r7, #20]
        break;
 8004658:	e008      	b.n	800466c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800465a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800465e:	617b      	str	r3, [r7, #20]
        break;
 8004660:	e004      	b.n	800466c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	76bb      	strb	r3, [r7, #26]
        break;
 800466a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d074      	beq.n	800475c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	005a      	lsls	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	fbb2 f3f3 	udiv	r3, r2, r3
 8004686:	b29b      	uxth	r3, r3
 8004688:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b0f      	cmp	r3, #15
 800468e:	d916      	bls.n	80046be <UART_SetConfig+0x45a>
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004696:	d212      	bcs.n	80046be <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f023 030f 	bic.w	r3, r3, #15
 80046a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	89fb      	ldrh	r3, [r7, #14]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	89fa      	ldrh	r2, [r7, #14]
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	e04e      	b.n	800475c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	76bb      	strb	r3, [r7, #26]
 80046c2:	e04b      	b.n	800475c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046c4:	7efb      	ldrb	r3, [r7, #27]
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d827      	bhi.n	800471a <UART_SetConfig+0x4b6>
 80046ca:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <UART_SetConfig+0x46c>)
 80046cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	080046fd 	.word	0x080046fd
 80046d8:	08004705 	.word	0x08004705
 80046dc:	0800471b 	.word	0x0800471b
 80046e0:	0800470b 	.word	0x0800470b
 80046e4:	0800471b 	.word	0x0800471b
 80046e8:	0800471b 	.word	0x0800471b
 80046ec:	0800471b 	.word	0x0800471b
 80046f0:	08004713 	.word	0x08004713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f4:	f7fe f876 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 80046f8:	6178      	str	r0, [r7, #20]
        break;
 80046fa:	e013      	b.n	8004724 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046fc:	f7fe f888 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8004700:	6178      	str	r0, [r7, #20]
        break;
 8004702:	e00f      	b.n	8004724 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <UART_SetConfig+0x510>)
 8004706:	617b      	str	r3, [r7, #20]
        break;
 8004708:	e00c      	b.n	8004724 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470a:	f7fd ffd3 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 800470e:	6178      	str	r0, [r7, #20]
        break;
 8004710:	e008      	b.n	8004724 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004716:	617b      	str	r3, [r7, #20]
        break;
 8004718:	e004      	b.n	8004724 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	76bb      	strb	r3, [r7, #26]
        break;
 8004722:	bf00      	nop
    }

    if (pclk != 0U)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d018      	beq.n	800475c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	085a      	lsrs	r2, r3, #1
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	441a      	add	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	b29b      	uxth	r3, r3
 800473e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b0f      	cmp	r3, #15
 8004744:	d908      	bls.n	8004758 <UART_SetConfig+0x4f4>
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474c:	d204      	bcs.n	8004758 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	e001      	b.n	800475c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004768:	7ebb      	ldrb	r3, [r7, #26]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bdb0      	pop	{r4, r5, r7, pc}
 8004772:	bf00      	nop
 8004774:	00f42400 	.word	0x00f42400

08004778 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01a      	beq.n	800488e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004876:	d10a      	bne.n	800488e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80048ca:	f7fc fea7 	bl	800161c <HAL_GetTick>
 80048ce:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d10e      	bne.n	80048fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f82a 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e020      	b.n	800493e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b04      	cmp	r3, #4
 8004908:	d10e      	bne.n	8004928 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f814 	bl	8004946 <UART_WaitOnFlagUntilTimeout>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e00a      	b.n	800493e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b084      	sub	sp, #16
 800494a:	af00      	add	r7, sp, #0
 800494c:	60f8      	str	r0, [r7, #12]
 800494e:	60b9      	str	r1, [r7, #8]
 8004950:	603b      	str	r3, [r7, #0]
 8004952:	4613      	mov	r3, r2
 8004954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004956:	e05d      	b.n	8004a14 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d059      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004960:	f7fc fe5c 	bl	800161c <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <UART_WaitOnFlagUntilTimeout+0x30>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11b      	bne.n	80049ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004984:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2220      	movs	r2, #32
 80049a0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e042      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d02b      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ca:	d123      	bne.n	8004a14 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049e4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e00f      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d092      	beq.n	8004958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a4a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a50:	2b22      	cmp	r3, #34	; 0x22
 8004a52:	d13a      	bne.n	8004aca <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004a5a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a5c:	89bb      	ldrh	r3, [r7, #12]
 8004a5e:	b2d9      	uxtb	r1, r3
 8004a60:	89fb      	ldrh	r3, [r7, #14]
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	400a      	ands	r2, r1
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d123      	bne.n	8004ade <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004aa4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc f8b8 	bl	8000c38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ac8:	e009      	b.n	8004ade <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	8b1b      	ldrh	r3, [r3, #24]
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	b292      	uxth	r2, r2
 8004adc:	831a      	strh	r2, [r3, #24]
}
 8004ade:	bf00      	nop
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b084      	sub	sp, #16
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004af4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004afa:	2b22      	cmp	r3, #34	; 0x22
 8004afc:	d13a      	bne.n	8004b74 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b04:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004b0c:	89ba      	ldrh	r2, [r7, #12]
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	1c9a      	adds	r2, r3, #2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d123      	bne.n	8004b88 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b4e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fc f863 	bl	8000c38 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b72:	e009      	b.n	8004b88 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	8b1b      	ldrh	r3, [r3, #24]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0208 	orr.w	r2, r2, #8
 8004b84:	b292      	uxth	r2, r2
 8004b86:	831a      	strh	r2, [r3, #24]
}
 8004b88:	bf00      	nop
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e03c      	b.n	8004c1c <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fc fadc 	bl	8001174 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f9d3 	bl	8004f80 <USART_SetConfig>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e01b      	b.n	8004c1c <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bf2:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c02:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fb09 	bl	800522c <USART_CheckIdleState>
 8004c1a:	4603      	mov	r3, r0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
#if defined(USART_CR2_SLVEN)
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
#else
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	613b      	str	r3, [r7, #16]
#endif /* USART_CR2_SLVEN */
  if (errorflags == 0U)
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d113      	bne.n	8004c7a <HAL_USART_IRQHandler+0x56>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00e      	beq.n	8004c7a <HAL_USART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <HAL_USART_IRQHandler+0x56>
#endif /* USART_CR1_FIFOEN */
    {
      if (husart->RxISR != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 80f8 	beq.w	8004e60 <HAL_USART_IRQHandler+0x23c>
      {
        husart->RxISR(husart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
      }
      return;
 8004c78:	e0f2      	b.n	8004e60 <HAL_USART_IRQHandler+0x23c>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
#else
  if ((errorflags != 0U)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80ce 	beq.w	8004e1e <HAL_USART_IRQHandler+0x1fa>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_USART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80c3 	beq.w	8004e1e <HAL_USART_IRQHandler+0x1fa>
#endif /* USART_CR1_FIFOEN */
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_USART_IRQHandler+0x9c>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <HAL_USART_IRQHandler+0x9c>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb8:	f043 0201 	orr.w	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00e      	beq.n	8004ce8 <HAL_USART_IRQHandler+0xc4>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <HAL_USART_IRQHandler+0xec>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_USART_IRQHandler+0xec>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2204      	movs	r2, #4
 8004d02:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d08:	f043 0202 	orr.w	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	64da      	str	r2, [r3, #76]	; 0x4c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d013      	beq.n	8004d42 <HAL_USART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <HAL_USART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_USART_IRQHandler+0x11e>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2208      	movs	r2, #8
 8004d34:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3a:	f043 0208 	orr.w	r2, r3, #8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
#endif /* USART_CR2_SLVEN */

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 808c 	beq.w	8004e64 <HAL_USART_IRQHandler+0x240>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00c      	beq.n	8004d70 <HAL_USART_IRQHandler+0x14c>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <HAL_USART_IRQHandler+0x14c>
#endif /* USART_CR1_FIFOEN */
      {
        if (husart->RxISR != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_USART_IRQHandler+0x14c>
        {
          husart->RxISR(husart);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d002      	beq.n	8004d8e <HAL_USART_IRQHandler+0x16a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03e      	beq.n	8004e0c <HAL_USART_IRQHandler+0x1e8>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f88e 	bl	8004eb0 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d130      	bne.n	8004e04 <HAL_USART_IRQHandler+0x1e0>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db0:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d008      	beq.n	8004dcc <HAL_USART_IRQHandler+0x1a8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fc fd45 	bl	8001856 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d013      	beq.n	8004dfc <HAL_USART_IRQHandler+0x1d8>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <HAL_USART_IRQHandler+0x24c>)
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fc fd38 	bl	8001856 <HAL_DMA_Abort_IT>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d016      	beq.n	8004e1a <HAL_USART_IRQHandler+0x1f6>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004df6:	4610      	mov	r0, r2
 8004df8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004dfa:	e00e      	b.n	8004e1a <HAL_USART_IRQHandler+0x1f6>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f84d 	bl	8004e9c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004e02:	e00a      	b.n	8004e1a <HAL_USART_IRQHandler+0x1f6>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f849 	bl	8004e9c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004e0a:	e006      	b.n	8004e1a <HAL_USART_IRQHandler+0x1f6>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f845 	bl	8004e9c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
    return;
 8004e18:	e024      	b.n	8004e64 <HAL_USART_IRQHandler+0x240>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8004e1a:	bf00      	nop
    return;
 8004e1c:	e022      	b.n	8004e64 <HAL_USART_IRQHandler+0x240>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00d      	beq.n	8004e44 <HAL_USART_IRQHandler+0x220>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_USART_IRQHandler+0x220>
#endif /* USART_CR1_FIFOEN */
  {
    if (husart->TxISR != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <HAL_USART_IRQHandler+0x244>
    {
      husart->TxISR(husart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
    }
    return;
 8004e42:	e011      	b.n	8004e68 <HAL_USART_IRQHandler+0x244>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <HAL_USART_IRQHandler+0x246>
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d008      	beq.n	8004e6a <HAL_USART_IRQHandler+0x246>
  {
    USART_EndTransmit_IT(husart);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 fa2a 	bl	80052b2 <USART_EndTransmit_IT>
    return;
 8004e5e:	e004      	b.n	8004e6a <HAL_USART_IRQHandler+0x246>
      return;
 8004e60:	bf00      	nop
 8004e62:	e002      	b.n	8004e6a <HAL_USART_IRQHandler+0x246>
    return;
 8004e64:	bf00      	nop
 8004e66:	e000      	b.n	8004e6a <HAL_USART_IRQHandler+0x246>
    return;
 8004e68:	bf00      	nop
    HAL_USARTEx_RxFifoFullCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	08004eed 	.word	0x08004eed

08004e74 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8004ec6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ffc8 	bl	8004e9c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004f24:	e018      	b.n	8004f58 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2c:	d014      	beq.n	8004f58 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fc fb75 	bl	800161c <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <USART_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d109      	bne.n	8004f58 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e00f      	b.n	8004f78 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69da      	ldr	r2, [r3, #28]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	4013      	ands	r3, r2
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	bf0c      	ite	eq
 8004f68:	2301      	moveq	r3, #1
 8004f6a:	2300      	movne	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	79fb      	ldrb	r3, [r7, #7]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d0d7      	beq.n	8004f26 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4b9a      	ldr	r3, [pc, #616]	; (8005218 <USART_SetConfig+0x298>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	430b      	orrs	r3, r1
 8004fb8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8004fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fbe:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a87      	ldr	r2, [pc, #540]	; (800521c <USART_SetConfig+0x29c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d121      	bne.n	8005046 <USART_SetConfig+0xc6>
 8005002:	4b87      	ldr	r3, [pc, #540]	; (8005220 <USART_SetConfig+0x2a0>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	2b03      	cmp	r3, #3
 800500e:	d817      	bhi.n	8005040 <USART_SetConfig+0xc0>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <USART_SetConfig+0x98>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	08005029 	.word	0x08005029
 800501c:	08005035 	.word	0x08005035
 8005020:	0800502f 	.word	0x0800502f
 8005024:	0800503b 	.word	0x0800503b
 8005028:	2301      	movs	r3, #1
 800502a:	77fb      	strb	r3, [r7, #31]
 800502c:	e06b      	b.n	8005106 <USART_SetConfig+0x186>
 800502e:	2302      	movs	r3, #2
 8005030:	77fb      	strb	r3, [r7, #31]
 8005032:	e068      	b.n	8005106 <USART_SetConfig+0x186>
 8005034:	2304      	movs	r3, #4
 8005036:	77fb      	strb	r3, [r7, #31]
 8005038:	e065      	b.n	8005106 <USART_SetConfig+0x186>
 800503a:	2308      	movs	r3, #8
 800503c:	77fb      	strb	r3, [r7, #31]
 800503e:	e062      	b.n	8005106 <USART_SetConfig+0x186>
 8005040:	2310      	movs	r3, #16
 8005042:	77fb      	strb	r3, [r7, #31]
 8005044:	e05f      	b.n	8005106 <USART_SetConfig+0x186>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a76      	ldr	r2, [pc, #472]	; (8005224 <USART_SetConfig+0x2a4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d132      	bne.n	80050b6 <USART_SetConfig+0x136>
 8005050:	4b73      	ldr	r3, [pc, #460]	; (8005220 <USART_SetConfig+0x2a0>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	f003 030c 	and.w	r3, r3, #12
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d828      	bhi.n	80050b0 <USART_SetConfig+0x130>
 800505e:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <USART_SetConfig+0xe4>)
 8005060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005064:	08005099 	.word	0x08005099
 8005068:	080050b1 	.word	0x080050b1
 800506c:	080050b1 	.word	0x080050b1
 8005070:	080050b1 	.word	0x080050b1
 8005074:	080050a5 	.word	0x080050a5
 8005078:	080050b1 	.word	0x080050b1
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050b1 	.word	0x080050b1
 8005084:	0800509f 	.word	0x0800509f
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b1 	.word	0x080050b1
 8005094:	080050ab 	.word	0x080050ab
 8005098:	2300      	movs	r3, #0
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e033      	b.n	8005106 <USART_SetConfig+0x186>
 800509e:	2302      	movs	r3, #2
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e030      	b.n	8005106 <USART_SetConfig+0x186>
 80050a4:	2304      	movs	r3, #4
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e02d      	b.n	8005106 <USART_SetConfig+0x186>
 80050aa:	2308      	movs	r3, #8
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e02a      	b.n	8005106 <USART_SetConfig+0x186>
 80050b0:	2310      	movs	r3, #16
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e027      	b.n	8005106 <USART_SetConfig+0x186>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a5b      	ldr	r2, [pc, #364]	; (8005228 <USART_SetConfig+0x2a8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d120      	bne.n	8005102 <USART_SetConfig+0x182>
 80050c0:	4b57      	ldr	r3, [pc, #348]	; (8005220 <USART_SetConfig+0x2a0>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050ca:	2b30      	cmp	r3, #48	; 0x30
 80050cc:	d013      	beq.n	80050f6 <USART_SetConfig+0x176>
 80050ce:	2b30      	cmp	r3, #48	; 0x30
 80050d0:	d814      	bhi.n	80050fc <USART_SetConfig+0x17c>
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d009      	beq.n	80050ea <USART_SetConfig+0x16a>
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d810      	bhi.n	80050fc <USART_SetConfig+0x17c>
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <USART_SetConfig+0x164>
 80050de:	2b10      	cmp	r3, #16
 80050e0:	d006      	beq.n	80050f0 <USART_SetConfig+0x170>
 80050e2:	e00b      	b.n	80050fc <USART_SetConfig+0x17c>
 80050e4:	2300      	movs	r3, #0
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e00d      	b.n	8005106 <USART_SetConfig+0x186>
 80050ea:	2302      	movs	r3, #2
 80050ec:	77fb      	strb	r3, [r7, #31]
 80050ee:	e00a      	b.n	8005106 <USART_SetConfig+0x186>
 80050f0:	2304      	movs	r3, #4
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e007      	b.n	8005106 <USART_SetConfig+0x186>
 80050f6:	2308      	movs	r3, #8
 80050f8:	77fb      	strb	r3, [r7, #31]
 80050fa:	e004      	b.n	8005106 <USART_SetConfig+0x186>
 80050fc:	2310      	movs	r3, #16
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	e001      	b.n	8005106 <USART_SetConfig+0x186>
 8005102:	2310      	movs	r3, #16
 8005104:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005106:	7ffb      	ldrb	r3, [r7, #31]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d85a      	bhi.n	80051c2 <USART_SetConfig+0x242>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <USART_SetConfig+0x194>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005139 	.word	0x08005139
 8005118:	08005157 	.word	0x08005157
 800511c:	08005175 	.word	0x08005175
 8005120:	080051c3 	.word	0x080051c3
 8005124:	0800518f 	.word	0x0800518f
 8005128:	080051c3 	.word	0x080051c3
 800512c:	080051c3 	.word	0x080051c3
 8005130:	080051c3 	.word	0x080051c3
 8005134:	080051ad 	.word	0x080051ad
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005138:	f7fd fb54 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 800513c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	005a      	lsls	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	441a      	add	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005154:	e038      	b.n	80051c8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005156:	f7fd fb5b 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 800515a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	005a      	lsls	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	441a      	add	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8005172:	e029      	b.n	80051c8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800517e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6852      	ldr	r2, [r2, #4]
 8005186:	fbb3 f3f2 	udiv	r3, r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800518c:	e01c      	b.n	80051c8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800518e:	f7fd fa91 	bl	80026b4 <HAL_RCC_GetSysClockFreq>
 8005192:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	005a      	lsls	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	441a      	add	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80051aa:	e00d      	b.n	80051c8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80051be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80051c0:	e002      	b.n	80051c8 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77bb      	strb	r3, [r7, #30]
      break;
 80051c6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d916      	bls.n	80051fc <USART_SetConfig+0x27c>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d4:	d212      	bcs.n	80051fc <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f023 030f 	bic.w	r3, r3, #15
 80051de:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	89fa      	ldrh	r2, [r7, #14]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	e001      	b.n	8005200 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 800520c:	7fbb      	ldrb	r3, [r7, #30]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	efff69f3 	.word	0xefff69f3
 800521c:	40013800 	.word	0x40013800
 8005220:	40021000 	.word	0x40021000
 8005224:	40004400 	.word	0x40004400
 8005228:	40004800 	.word	0x40004800

0800522c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800523a:	f7fc f9ef 	bl	800161c <HAL_GetTick>
 800523e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b08      	cmp	r3, #8
 800524c:	d10e      	bne.n	800526c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800524e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff fe59 	bl	8004f14 <USART_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e01e      	b.n	80052aa <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b04      	cmp	r3, #4
 8005278:	d10e      	bne.n	8005298 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800527a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff fe43 	bl	8004f14 <USART_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e008      	b.n	80052aa <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c8:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0201 	bic.w	r2, r2, #1
 80052d8:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	63da      	str	r2, [r3, #60]	; 0x3c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b12      	cmp	r3, #18
 80052ea:	d115      	bne.n	8005318 <USART_EndTransmit_IT+0x66>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2208      	movs	r2, #8
 80052f2:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	8b1b      	ldrh	r3, [r3, #24]
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0208 	orr.w	r2, r2, #8
 8005304:	b292      	uxth	r2, r2
 8005306:	831a      	strh	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fdaf 	bl	8004e74 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005316:	e00b      	b.n	8005330 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    HAL_USART_TxRxCpltCallback(husart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff fdac 	bl	8004e88 <HAL_USART_TxRxCpltCallback>
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <__errno>:
 8005338:	4b01      	ldr	r3, [pc, #4]	; (8005340 <__errno+0x8>)
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000204 	.word	0x20000204

08005344 <__libc_init_array>:
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	4d0d      	ldr	r5, [pc, #52]	; (800537c <__libc_init_array+0x38>)
 8005348:	4c0d      	ldr	r4, [pc, #52]	; (8005380 <__libc_init_array+0x3c>)
 800534a:	1b64      	subs	r4, r4, r5
 800534c:	10a4      	asrs	r4, r4, #2
 800534e:	2600      	movs	r6, #0
 8005350:	42a6      	cmp	r6, r4
 8005352:	d109      	bne.n	8005368 <__libc_init_array+0x24>
 8005354:	4d0b      	ldr	r5, [pc, #44]	; (8005384 <__libc_init_array+0x40>)
 8005356:	4c0c      	ldr	r4, [pc, #48]	; (8005388 <__libc_init_array+0x44>)
 8005358:	f000 ff76 	bl	8006248 <_init>
 800535c:	1b64      	subs	r4, r4, r5
 800535e:	10a4      	asrs	r4, r4, #2
 8005360:	2600      	movs	r6, #0
 8005362:	42a6      	cmp	r6, r4
 8005364:	d105      	bne.n	8005372 <__libc_init_array+0x2e>
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	f855 3b04 	ldr.w	r3, [r5], #4
 800536c:	4798      	blx	r3
 800536e:	3601      	adds	r6, #1
 8005370:	e7ee      	b.n	8005350 <__libc_init_array+0xc>
 8005372:	f855 3b04 	ldr.w	r3, [r5], #4
 8005376:	4798      	blx	r3
 8005378:	3601      	adds	r6, #1
 800537a:	e7f2      	b.n	8005362 <__libc_init_array+0x1e>
 800537c:	080063f8 	.word	0x080063f8
 8005380:	080063f8 	.word	0x080063f8
 8005384:	080063f8 	.word	0x080063f8
 8005388:	080063fc 	.word	0x080063fc

0800538c <memset>:
 800538c:	4402      	add	r2, r0
 800538e:	4603      	mov	r3, r0
 8005390:	4293      	cmp	r3, r2
 8005392:	d100      	bne.n	8005396 <memset+0xa>
 8005394:	4770      	bx	lr
 8005396:	f803 1b01 	strb.w	r1, [r3], #1
 800539a:	e7f9      	b.n	8005390 <memset+0x4>

0800539c <iprintf>:
 800539c:	b40f      	push	{r0, r1, r2, r3}
 800539e:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <iprintf+0x2c>)
 80053a0:	b513      	push	{r0, r1, r4, lr}
 80053a2:	681c      	ldr	r4, [r3, #0]
 80053a4:	b124      	cbz	r4, 80053b0 <iprintf+0x14>
 80053a6:	69a3      	ldr	r3, [r4, #24]
 80053a8:	b913      	cbnz	r3, 80053b0 <iprintf+0x14>
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 f866 	bl	800547c <__sinit>
 80053b0:	ab05      	add	r3, sp, #20
 80053b2:	9a04      	ldr	r2, [sp, #16]
 80053b4:	68a1      	ldr	r1, [r4, #8]
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 f983 	bl	80056c4 <_vfiprintf_r>
 80053be:	b002      	add	sp, #8
 80053c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c4:	b004      	add	sp, #16
 80053c6:	4770      	bx	lr
 80053c8:	20000204 	.word	0x20000204

080053cc <std>:
 80053cc:	2300      	movs	r3, #0
 80053ce:	b510      	push	{r4, lr}
 80053d0:	4604      	mov	r4, r0
 80053d2:	e9c0 3300 	strd	r3, r3, [r0]
 80053d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053da:	6083      	str	r3, [r0, #8]
 80053dc:	8181      	strh	r1, [r0, #12]
 80053de:	6643      	str	r3, [r0, #100]	; 0x64
 80053e0:	81c2      	strh	r2, [r0, #14]
 80053e2:	6183      	str	r3, [r0, #24]
 80053e4:	4619      	mov	r1, r3
 80053e6:	2208      	movs	r2, #8
 80053e8:	305c      	adds	r0, #92	; 0x5c
 80053ea:	f7ff ffcf 	bl	800538c <memset>
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <std+0x38>)
 80053f0:	6263      	str	r3, [r4, #36]	; 0x24
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <std+0x3c>)
 80053f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <std+0x40>)
 80053f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <std+0x44>)
 80053fc:	6224      	str	r4, [r4, #32]
 80053fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005400:	bd10      	pop	{r4, pc}
 8005402:	bf00      	nop
 8005404:	08005c6d 	.word	0x08005c6d
 8005408:	08005c8f 	.word	0x08005c8f
 800540c:	08005cc7 	.word	0x08005cc7
 8005410:	08005ceb 	.word	0x08005ceb

08005414 <_cleanup_r>:
 8005414:	4901      	ldr	r1, [pc, #4]	; (800541c <_cleanup_r+0x8>)
 8005416:	f000 b8af 	b.w	8005578 <_fwalk_reent>
 800541a:	bf00      	nop
 800541c:	08005fc5 	.word	0x08005fc5

08005420 <__sfmoreglue>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	1e4a      	subs	r2, r1, #1
 8005424:	2568      	movs	r5, #104	; 0x68
 8005426:	4355      	muls	r5, r2
 8005428:	460e      	mov	r6, r1
 800542a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800542e:	f000 f8c5 	bl	80055bc <_malloc_r>
 8005432:	4604      	mov	r4, r0
 8005434:	b140      	cbz	r0, 8005448 <__sfmoreglue+0x28>
 8005436:	2100      	movs	r1, #0
 8005438:	e9c0 1600 	strd	r1, r6, [r0]
 800543c:	300c      	adds	r0, #12
 800543e:	60a0      	str	r0, [r4, #8]
 8005440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005444:	f7ff ffa2 	bl	800538c <memset>
 8005448:	4620      	mov	r0, r4
 800544a:	bd70      	pop	{r4, r5, r6, pc}

0800544c <__sfp_lock_acquire>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__sfp_lock_acquire+0x8>)
 800544e:	f000 b8b3 	b.w	80055b8 <__retarget_lock_acquire_recursive>
 8005452:	bf00      	nop
 8005454:	200007cc 	.word	0x200007cc

08005458 <__sfp_lock_release>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__sfp_lock_release+0x8>)
 800545a:	f000 b8ae 	b.w	80055ba <__retarget_lock_release_recursive>
 800545e:	bf00      	nop
 8005460:	200007cc 	.word	0x200007cc

08005464 <__sinit_lock_acquire>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__sinit_lock_acquire+0x8>)
 8005466:	f000 b8a7 	b.w	80055b8 <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	200007c7 	.word	0x200007c7

08005470 <__sinit_lock_release>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__sinit_lock_release+0x8>)
 8005472:	f000 b8a2 	b.w	80055ba <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	200007c7 	.word	0x200007c7

0800547c <__sinit>:
 800547c:	b510      	push	{r4, lr}
 800547e:	4604      	mov	r4, r0
 8005480:	f7ff fff0 	bl	8005464 <__sinit_lock_acquire>
 8005484:	69a3      	ldr	r3, [r4, #24]
 8005486:	b11b      	cbz	r3, 8005490 <__sinit+0x14>
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800548c:	f7ff bff0 	b.w	8005470 <__sinit_lock_release>
 8005490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005494:	6523      	str	r3, [r4, #80]	; 0x50
 8005496:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <__sinit+0x68>)
 8005498:	4a13      	ldr	r2, [pc, #76]	; (80054e8 <__sinit+0x6c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	62a2      	str	r2, [r4, #40]	; 0x28
 800549e:	42a3      	cmp	r3, r4
 80054a0:	bf04      	itt	eq
 80054a2:	2301      	moveq	r3, #1
 80054a4:	61a3      	streq	r3, [r4, #24]
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 f820 	bl	80054ec <__sfp>
 80054ac:	6060      	str	r0, [r4, #4]
 80054ae:	4620      	mov	r0, r4
 80054b0:	f000 f81c 	bl	80054ec <__sfp>
 80054b4:	60a0      	str	r0, [r4, #8]
 80054b6:	4620      	mov	r0, r4
 80054b8:	f000 f818 	bl	80054ec <__sfp>
 80054bc:	2200      	movs	r2, #0
 80054be:	60e0      	str	r0, [r4, #12]
 80054c0:	2104      	movs	r1, #4
 80054c2:	6860      	ldr	r0, [r4, #4]
 80054c4:	f7ff ff82 	bl	80053cc <std>
 80054c8:	68a0      	ldr	r0, [r4, #8]
 80054ca:	2201      	movs	r2, #1
 80054cc:	2109      	movs	r1, #9
 80054ce:	f7ff ff7d 	bl	80053cc <std>
 80054d2:	68e0      	ldr	r0, [r4, #12]
 80054d4:	2202      	movs	r2, #2
 80054d6:	2112      	movs	r1, #18
 80054d8:	f7ff ff78 	bl	80053cc <std>
 80054dc:	2301      	movs	r3, #1
 80054de:	61a3      	str	r3, [r4, #24]
 80054e0:	e7d2      	b.n	8005488 <__sinit+0xc>
 80054e2:	bf00      	nop
 80054e4:	08006358 	.word	0x08006358
 80054e8:	08005415 	.word	0x08005415

080054ec <__sfp>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	4607      	mov	r7, r0
 80054f0:	f7ff ffac 	bl	800544c <__sfp_lock_acquire>
 80054f4:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <__sfp+0x84>)
 80054f6:	681e      	ldr	r6, [r3, #0]
 80054f8:	69b3      	ldr	r3, [r6, #24]
 80054fa:	b913      	cbnz	r3, 8005502 <__sfp+0x16>
 80054fc:	4630      	mov	r0, r6
 80054fe:	f7ff ffbd 	bl	800547c <__sinit>
 8005502:	3648      	adds	r6, #72	; 0x48
 8005504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005508:	3b01      	subs	r3, #1
 800550a:	d503      	bpl.n	8005514 <__sfp+0x28>
 800550c:	6833      	ldr	r3, [r6, #0]
 800550e:	b30b      	cbz	r3, 8005554 <__sfp+0x68>
 8005510:	6836      	ldr	r6, [r6, #0]
 8005512:	e7f7      	b.n	8005504 <__sfp+0x18>
 8005514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005518:	b9d5      	cbnz	r5, 8005550 <__sfp+0x64>
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <__sfp+0x88>)
 800551c:	60e3      	str	r3, [r4, #12]
 800551e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005522:	6665      	str	r5, [r4, #100]	; 0x64
 8005524:	f000 f847 	bl	80055b6 <__retarget_lock_init_recursive>
 8005528:	f7ff ff96 	bl	8005458 <__sfp_lock_release>
 800552c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005534:	6025      	str	r5, [r4, #0]
 8005536:	61a5      	str	r5, [r4, #24]
 8005538:	2208      	movs	r2, #8
 800553a:	4629      	mov	r1, r5
 800553c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005540:	f7ff ff24 	bl	800538c <memset>
 8005544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800554c:	4620      	mov	r0, r4
 800554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005550:	3468      	adds	r4, #104	; 0x68
 8005552:	e7d9      	b.n	8005508 <__sfp+0x1c>
 8005554:	2104      	movs	r1, #4
 8005556:	4638      	mov	r0, r7
 8005558:	f7ff ff62 	bl	8005420 <__sfmoreglue>
 800555c:	4604      	mov	r4, r0
 800555e:	6030      	str	r0, [r6, #0]
 8005560:	2800      	cmp	r0, #0
 8005562:	d1d5      	bne.n	8005510 <__sfp+0x24>
 8005564:	f7ff ff78 	bl	8005458 <__sfp_lock_release>
 8005568:	230c      	movs	r3, #12
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	e7ee      	b.n	800554c <__sfp+0x60>
 800556e:	bf00      	nop
 8005570:	08006358 	.word	0x08006358
 8005574:	ffff0001 	.word	0xffff0001

08005578 <_fwalk_reent>:
 8005578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800557c:	4606      	mov	r6, r0
 800557e:	4688      	mov	r8, r1
 8005580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005584:	2700      	movs	r7, #0
 8005586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800558a:	f1b9 0901 	subs.w	r9, r9, #1
 800558e:	d505      	bpl.n	800559c <_fwalk_reent+0x24>
 8005590:	6824      	ldr	r4, [r4, #0]
 8005592:	2c00      	cmp	r4, #0
 8005594:	d1f7      	bne.n	8005586 <_fwalk_reent+0xe>
 8005596:	4638      	mov	r0, r7
 8005598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800559c:	89ab      	ldrh	r3, [r5, #12]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d907      	bls.n	80055b2 <_fwalk_reent+0x3a>
 80055a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055a6:	3301      	adds	r3, #1
 80055a8:	d003      	beq.n	80055b2 <_fwalk_reent+0x3a>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4630      	mov	r0, r6
 80055ae:	47c0      	blx	r8
 80055b0:	4307      	orrs	r7, r0
 80055b2:	3568      	adds	r5, #104	; 0x68
 80055b4:	e7e9      	b.n	800558a <_fwalk_reent+0x12>

080055b6 <__retarget_lock_init_recursive>:
 80055b6:	4770      	bx	lr

080055b8 <__retarget_lock_acquire_recursive>:
 80055b8:	4770      	bx	lr

080055ba <__retarget_lock_release_recursive>:
 80055ba:	4770      	bx	lr

080055bc <_malloc_r>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	1ccd      	adds	r5, r1, #3
 80055c0:	f025 0503 	bic.w	r5, r5, #3
 80055c4:	3508      	adds	r5, #8
 80055c6:	2d0c      	cmp	r5, #12
 80055c8:	bf38      	it	cc
 80055ca:	250c      	movcc	r5, #12
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	4606      	mov	r6, r0
 80055d0:	db01      	blt.n	80055d6 <_malloc_r+0x1a>
 80055d2:	42a9      	cmp	r1, r5
 80055d4:	d903      	bls.n	80055de <_malloc_r+0x22>
 80055d6:	230c      	movs	r3, #12
 80055d8:	6033      	str	r3, [r6, #0]
 80055da:	2000      	movs	r0, #0
 80055dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055de:	f000 fda3 	bl	8006128 <__malloc_lock>
 80055e2:	4921      	ldr	r1, [pc, #132]	; (8005668 <_malloc_r+0xac>)
 80055e4:	680a      	ldr	r2, [r1, #0]
 80055e6:	4614      	mov	r4, r2
 80055e8:	b99c      	cbnz	r4, 8005612 <_malloc_r+0x56>
 80055ea:	4f20      	ldr	r7, [pc, #128]	; (800566c <_malloc_r+0xb0>)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	b923      	cbnz	r3, 80055fa <_malloc_r+0x3e>
 80055f0:	4621      	mov	r1, r4
 80055f2:	4630      	mov	r0, r6
 80055f4:	f000 fb2a 	bl	8005c4c <_sbrk_r>
 80055f8:	6038      	str	r0, [r7, #0]
 80055fa:	4629      	mov	r1, r5
 80055fc:	4630      	mov	r0, r6
 80055fe:	f000 fb25 	bl	8005c4c <_sbrk_r>
 8005602:	1c43      	adds	r3, r0, #1
 8005604:	d123      	bne.n	800564e <_malloc_r+0x92>
 8005606:	230c      	movs	r3, #12
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	4630      	mov	r0, r6
 800560c:	f000 fd92 	bl	8006134 <__malloc_unlock>
 8005610:	e7e3      	b.n	80055da <_malloc_r+0x1e>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	1b5b      	subs	r3, r3, r5
 8005616:	d417      	bmi.n	8005648 <_malloc_r+0x8c>
 8005618:	2b0b      	cmp	r3, #11
 800561a:	d903      	bls.n	8005624 <_malloc_r+0x68>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	441c      	add	r4, r3
 8005620:	6025      	str	r5, [r4, #0]
 8005622:	e004      	b.n	800562e <_malloc_r+0x72>
 8005624:	6863      	ldr	r3, [r4, #4]
 8005626:	42a2      	cmp	r2, r4
 8005628:	bf0c      	ite	eq
 800562a:	600b      	streq	r3, [r1, #0]
 800562c:	6053      	strne	r3, [r2, #4]
 800562e:	4630      	mov	r0, r6
 8005630:	f000 fd80 	bl	8006134 <__malloc_unlock>
 8005634:	f104 000b 	add.w	r0, r4, #11
 8005638:	1d23      	adds	r3, r4, #4
 800563a:	f020 0007 	bic.w	r0, r0, #7
 800563e:	1ac2      	subs	r2, r0, r3
 8005640:	d0cc      	beq.n	80055dc <_malloc_r+0x20>
 8005642:	1a1b      	subs	r3, r3, r0
 8005644:	50a3      	str	r3, [r4, r2]
 8005646:	e7c9      	b.n	80055dc <_malloc_r+0x20>
 8005648:	4622      	mov	r2, r4
 800564a:	6864      	ldr	r4, [r4, #4]
 800564c:	e7cc      	b.n	80055e8 <_malloc_r+0x2c>
 800564e:	1cc4      	adds	r4, r0, #3
 8005650:	f024 0403 	bic.w	r4, r4, #3
 8005654:	42a0      	cmp	r0, r4
 8005656:	d0e3      	beq.n	8005620 <_malloc_r+0x64>
 8005658:	1a21      	subs	r1, r4, r0
 800565a:	4630      	mov	r0, r6
 800565c:	f000 faf6 	bl	8005c4c <_sbrk_r>
 8005660:	3001      	adds	r0, #1
 8005662:	d1dd      	bne.n	8005620 <_malloc_r+0x64>
 8005664:	e7cf      	b.n	8005606 <_malloc_r+0x4a>
 8005666:	bf00      	nop
 8005668:	20000684 	.word	0x20000684
 800566c:	20000688 	.word	0x20000688

08005670 <__sfputc_r>:
 8005670:	6893      	ldr	r3, [r2, #8]
 8005672:	3b01      	subs	r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	b410      	push	{r4}
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	da08      	bge.n	800568e <__sfputc_r+0x1e>
 800567c:	6994      	ldr	r4, [r2, #24]
 800567e:	42a3      	cmp	r3, r4
 8005680:	db01      	blt.n	8005686 <__sfputc_r+0x16>
 8005682:	290a      	cmp	r1, #10
 8005684:	d103      	bne.n	800568e <__sfputc_r+0x1e>
 8005686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800568a:	f000 bb33 	b.w	8005cf4 <__swbuf_r>
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	1c58      	adds	r0, r3, #1
 8005692:	6010      	str	r0, [r2, #0]
 8005694:	7019      	strb	r1, [r3, #0]
 8005696:	4608      	mov	r0, r1
 8005698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800569c:	4770      	bx	lr

0800569e <__sfputs_r>:
 800569e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a0:	4606      	mov	r6, r0
 80056a2:	460f      	mov	r7, r1
 80056a4:	4614      	mov	r4, r2
 80056a6:	18d5      	adds	r5, r2, r3
 80056a8:	42ac      	cmp	r4, r5
 80056aa:	d101      	bne.n	80056b0 <__sfputs_r+0x12>
 80056ac:	2000      	movs	r0, #0
 80056ae:	e007      	b.n	80056c0 <__sfputs_r+0x22>
 80056b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b4:	463a      	mov	r2, r7
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7ff ffda 	bl	8005670 <__sfputc_r>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d1f3      	bne.n	80056a8 <__sfputs_r+0xa>
 80056c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056c4 <_vfiprintf_r>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	460d      	mov	r5, r1
 80056ca:	b09d      	sub	sp, #116	; 0x74
 80056cc:	4614      	mov	r4, r2
 80056ce:	4698      	mov	r8, r3
 80056d0:	4606      	mov	r6, r0
 80056d2:	b118      	cbz	r0, 80056dc <_vfiprintf_r+0x18>
 80056d4:	6983      	ldr	r3, [r0, #24]
 80056d6:	b90b      	cbnz	r3, 80056dc <_vfiprintf_r+0x18>
 80056d8:	f7ff fed0 	bl	800547c <__sinit>
 80056dc:	4b89      	ldr	r3, [pc, #548]	; (8005904 <_vfiprintf_r+0x240>)
 80056de:	429d      	cmp	r5, r3
 80056e0:	d11b      	bne.n	800571a <_vfiprintf_r+0x56>
 80056e2:	6875      	ldr	r5, [r6, #4]
 80056e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e6:	07d9      	lsls	r1, r3, #31
 80056e8:	d405      	bmi.n	80056f6 <_vfiprintf_r+0x32>
 80056ea:	89ab      	ldrh	r3, [r5, #12]
 80056ec:	059a      	lsls	r2, r3, #22
 80056ee:	d402      	bmi.n	80056f6 <_vfiprintf_r+0x32>
 80056f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056f2:	f7ff ff61 	bl	80055b8 <__retarget_lock_acquire_recursive>
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	d501      	bpl.n	8005700 <_vfiprintf_r+0x3c>
 80056fc:	692b      	ldr	r3, [r5, #16]
 80056fe:	b9eb      	cbnz	r3, 800573c <_vfiprintf_r+0x78>
 8005700:	4629      	mov	r1, r5
 8005702:	4630      	mov	r0, r6
 8005704:	f000 fb5a 	bl	8005dbc <__swsetup_r>
 8005708:	b1c0      	cbz	r0, 800573c <_vfiprintf_r+0x78>
 800570a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800570c:	07dc      	lsls	r4, r3, #31
 800570e:	d50e      	bpl.n	800572e <_vfiprintf_r+0x6a>
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	b01d      	add	sp, #116	; 0x74
 8005716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571a:	4b7b      	ldr	r3, [pc, #492]	; (8005908 <_vfiprintf_r+0x244>)
 800571c:	429d      	cmp	r5, r3
 800571e:	d101      	bne.n	8005724 <_vfiprintf_r+0x60>
 8005720:	68b5      	ldr	r5, [r6, #8]
 8005722:	e7df      	b.n	80056e4 <_vfiprintf_r+0x20>
 8005724:	4b79      	ldr	r3, [pc, #484]	; (800590c <_vfiprintf_r+0x248>)
 8005726:	429d      	cmp	r5, r3
 8005728:	bf08      	it	eq
 800572a:	68f5      	ldreq	r5, [r6, #12]
 800572c:	e7da      	b.n	80056e4 <_vfiprintf_r+0x20>
 800572e:	89ab      	ldrh	r3, [r5, #12]
 8005730:	0598      	lsls	r0, r3, #22
 8005732:	d4ed      	bmi.n	8005710 <_vfiprintf_r+0x4c>
 8005734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005736:	f7ff ff40 	bl	80055ba <__retarget_lock_release_recursive>
 800573a:	e7e9      	b.n	8005710 <_vfiprintf_r+0x4c>
 800573c:	2300      	movs	r3, #0
 800573e:	9309      	str	r3, [sp, #36]	; 0x24
 8005740:	2320      	movs	r3, #32
 8005742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005746:	f8cd 800c 	str.w	r8, [sp, #12]
 800574a:	2330      	movs	r3, #48	; 0x30
 800574c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005910 <_vfiprintf_r+0x24c>
 8005750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005754:	f04f 0901 	mov.w	r9, #1
 8005758:	4623      	mov	r3, r4
 800575a:	469a      	mov	sl, r3
 800575c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005760:	b10a      	cbz	r2, 8005766 <_vfiprintf_r+0xa2>
 8005762:	2a25      	cmp	r2, #37	; 0x25
 8005764:	d1f9      	bne.n	800575a <_vfiprintf_r+0x96>
 8005766:	ebba 0b04 	subs.w	fp, sl, r4
 800576a:	d00b      	beq.n	8005784 <_vfiprintf_r+0xc0>
 800576c:	465b      	mov	r3, fp
 800576e:	4622      	mov	r2, r4
 8005770:	4629      	mov	r1, r5
 8005772:	4630      	mov	r0, r6
 8005774:	f7ff ff93 	bl	800569e <__sfputs_r>
 8005778:	3001      	adds	r0, #1
 800577a:	f000 80aa 	beq.w	80058d2 <_vfiprintf_r+0x20e>
 800577e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005780:	445a      	add	r2, fp
 8005782:	9209      	str	r2, [sp, #36]	; 0x24
 8005784:	f89a 3000 	ldrb.w	r3, [sl]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80a2 	beq.w	80058d2 <_vfiprintf_r+0x20e>
 800578e:	2300      	movs	r3, #0
 8005790:	f04f 32ff 	mov.w	r2, #4294967295
 8005794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005798:	f10a 0a01 	add.w	sl, sl, #1
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	9307      	str	r3, [sp, #28]
 80057a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057a4:	931a      	str	r3, [sp, #104]	; 0x68
 80057a6:	4654      	mov	r4, sl
 80057a8:	2205      	movs	r2, #5
 80057aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ae:	4858      	ldr	r0, [pc, #352]	; (8005910 <_vfiprintf_r+0x24c>)
 80057b0:	f7fa fd0e 	bl	80001d0 <memchr>
 80057b4:	9a04      	ldr	r2, [sp, #16]
 80057b6:	b9d8      	cbnz	r0, 80057f0 <_vfiprintf_r+0x12c>
 80057b8:	06d1      	lsls	r1, r2, #27
 80057ba:	bf44      	itt	mi
 80057bc:	2320      	movmi	r3, #32
 80057be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057c2:	0713      	lsls	r3, r2, #28
 80057c4:	bf44      	itt	mi
 80057c6:	232b      	movmi	r3, #43	; 0x2b
 80057c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057cc:	f89a 3000 	ldrb.w	r3, [sl]
 80057d0:	2b2a      	cmp	r3, #42	; 0x2a
 80057d2:	d015      	beq.n	8005800 <_vfiprintf_r+0x13c>
 80057d4:	9a07      	ldr	r2, [sp, #28]
 80057d6:	4654      	mov	r4, sl
 80057d8:	2000      	movs	r0, #0
 80057da:	f04f 0c0a 	mov.w	ip, #10
 80057de:	4621      	mov	r1, r4
 80057e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057e4:	3b30      	subs	r3, #48	; 0x30
 80057e6:	2b09      	cmp	r3, #9
 80057e8:	d94e      	bls.n	8005888 <_vfiprintf_r+0x1c4>
 80057ea:	b1b0      	cbz	r0, 800581a <_vfiprintf_r+0x156>
 80057ec:	9207      	str	r2, [sp, #28]
 80057ee:	e014      	b.n	800581a <_vfiprintf_r+0x156>
 80057f0:	eba0 0308 	sub.w	r3, r0, r8
 80057f4:	fa09 f303 	lsl.w	r3, r9, r3
 80057f8:	4313      	orrs	r3, r2
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	46a2      	mov	sl, r4
 80057fe:	e7d2      	b.n	80057a6 <_vfiprintf_r+0xe2>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	1d19      	adds	r1, r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	9103      	str	r1, [sp, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	bfbb      	ittet	lt
 800580c:	425b      	neglt	r3, r3
 800580e:	f042 0202 	orrlt.w	r2, r2, #2
 8005812:	9307      	strge	r3, [sp, #28]
 8005814:	9307      	strlt	r3, [sp, #28]
 8005816:	bfb8      	it	lt
 8005818:	9204      	strlt	r2, [sp, #16]
 800581a:	7823      	ldrb	r3, [r4, #0]
 800581c:	2b2e      	cmp	r3, #46	; 0x2e
 800581e:	d10c      	bne.n	800583a <_vfiprintf_r+0x176>
 8005820:	7863      	ldrb	r3, [r4, #1]
 8005822:	2b2a      	cmp	r3, #42	; 0x2a
 8005824:	d135      	bne.n	8005892 <_vfiprintf_r+0x1ce>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	9203      	str	r2, [sp, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfb8      	it	lt
 8005832:	f04f 33ff 	movlt.w	r3, #4294967295
 8005836:	3402      	adds	r4, #2
 8005838:	9305      	str	r3, [sp, #20]
 800583a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005920 <_vfiprintf_r+0x25c>
 800583e:	7821      	ldrb	r1, [r4, #0]
 8005840:	2203      	movs	r2, #3
 8005842:	4650      	mov	r0, sl
 8005844:	f7fa fcc4 	bl	80001d0 <memchr>
 8005848:	b140      	cbz	r0, 800585c <_vfiprintf_r+0x198>
 800584a:	2340      	movs	r3, #64	; 0x40
 800584c:	eba0 000a 	sub.w	r0, r0, sl
 8005850:	fa03 f000 	lsl.w	r0, r3, r0
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	4303      	orrs	r3, r0
 8005858:	3401      	adds	r4, #1
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005860:	482c      	ldr	r0, [pc, #176]	; (8005914 <_vfiprintf_r+0x250>)
 8005862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005866:	2206      	movs	r2, #6
 8005868:	f7fa fcb2 	bl	80001d0 <memchr>
 800586c:	2800      	cmp	r0, #0
 800586e:	d03f      	beq.n	80058f0 <_vfiprintf_r+0x22c>
 8005870:	4b29      	ldr	r3, [pc, #164]	; (8005918 <_vfiprintf_r+0x254>)
 8005872:	bb1b      	cbnz	r3, 80058bc <_vfiprintf_r+0x1f8>
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	3307      	adds	r3, #7
 8005878:	f023 0307 	bic.w	r3, r3, #7
 800587c:	3308      	adds	r3, #8
 800587e:	9303      	str	r3, [sp, #12]
 8005880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005882:	443b      	add	r3, r7
 8005884:	9309      	str	r3, [sp, #36]	; 0x24
 8005886:	e767      	b.n	8005758 <_vfiprintf_r+0x94>
 8005888:	fb0c 3202 	mla	r2, ip, r2, r3
 800588c:	460c      	mov	r4, r1
 800588e:	2001      	movs	r0, #1
 8005890:	e7a5      	b.n	80057de <_vfiprintf_r+0x11a>
 8005892:	2300      	movs	r3, #0
 8005894:	3401      	adds	r4, #1
 8005896:	9305      	str	r3, [sp, #20]
 8005898:	4619      	mov	r1, r3
 800589a:	f04f 0c0a 	mov.w	ip, #10
 800589e:	4620      	mov	r0, r4
 80058a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058a4:	3a30      	subs	r2, #48	; 0x30
 80058a6:	2a09      	cmp	r2, #9
 80058a8:	d903      	bls.n	80058b2 <_vfiprintf_r+0x1ee>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0c5      	beq.n	800583a <_vfiprintf_r+0x176>
 80058ae:	9105      	str	r1, [sp, #20]
 80058b0:	e7c3      	b.n	800583a <_vfiprintf_r+0x176>
 80058b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058b6:	4604      	mov	r4, r0
 80058b8:	2301      	movs	r3, #1
 80058ba:	e7f0      	b.n	800589e <_vfiprintf_r+0x1da>
 80058bc:	ab03      	add	r3, sp, #12
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4b16      	ldr	r3, [pc, #88]	; (800591c <_vfiprintf_r+0x258>)
 80058c4:	a904      	add	r1, sp, #16
 80058c6:	4630      	mov	r0, r6
 80058c8:	f3af 8000 	nop.w
 80058cc:	4607      	mov	r7, r0
 80058ce:	1c78      	adds	r0, r7, #1
 80058d0:	d1d6      	bne.n	8005880 <_vfiprintf_r+0x1bc>
 80058d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058d4:	07d9      	lsls	r1, r3, #31
 80058d6:	d405      	bmi.n	80058e4 <_vfiprintf_r+0x220>
 80058d8:	89ab      	ldrh	r3, [r5, #12]
 80058da:	059a      	lsls	r2, r3, #22
 80058dc:	d402      	bmi.n	80058e4 <_vfiprintf_r+0x220>
 80058de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058e0:	f7ff fe6b 	bl	80055ba <__retarget_lock_release_recursive>
 80058e4:	89ab      	ldrh	r3, [r5, #12]
 80058e6:	065b      	lsls	r3, r3, #25
 80058e8:	f53f af12 	bmi.w	8005710 <_vfiprintf_r+0x4c>
 80058ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ee:	e711      	b.n	8005714 <_vfiprintf_r+0x50>
 80058f0:	ab03      	add	r3, sp, #12
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	462a      	mov	r2, r5
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <_vfiprintf_r+0x258>)
 80058f8:	a904      	add	r1, sp, #16
 80058fa:	4630      	mov	r0, r6
 80058fc:	f000 f880 	bl	8005a00 <_printf_i>
 8005900:	e7e4      	b.n	80058cc <_vfiprintf_r+0x208>
 8005902:	bf00      	nop
 8005904:	0800637c 	.word	0x0800637c
 8005908:	0800639c 	.word	0x0800639c
 800590c:	0800635c 	.word	0x0800635c
 8005910:	080063bc 	.word	0x080063bc
 8005914:	080063c6 	.word	0x080063c6
 8005918:	00000000 	.word	0x00000000
 800591c:	0800569f 	.word	0x0800569f
 8005920:	080063c2 	.word	0x080063c2

08005924 <_printf_common>:
 8005924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	4616      	mov	r6, r2
 800592a:	4699      	mov	r9, r3
 800592c:	688a      	ldr	r2, [r1, #8]
 800592e:	690b      	ldr	r3, [r1, #16]
 8005930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005934:	4293      	cmp	r3, r2
 8005936:	bfb8      	it	lt
 8005938:	4613      	movlt	r3, r2
 800593a:	6033      	str	r3, [r6, #0]
 800593c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005940:	4607      	mov	r7, r0
 8005942:	460c      	mov	r4, r1
 8005944:	b10a      	cbz	r2, 800594a <_printf_common+0x26>
 8005946:	3301      	adds	r3, #1
 8005948:	6033      	str	r3, [r6, #0]
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	0699      	lsls	r1, r3, #26
 800594e:	bf42      	ittt	mi
 8005950:	6833      	ldrmi	r3, [r6, #0]
 8005952:	3302      	addmi	r3, #2
 8005954:	6033      	strmi	r3, [r6, #0]
 8005956:	6825      	ldr	r5, [r4, #0]
 8005958:	f015 0506 	ands.w	r5, r5, #6
 800595c:	d106      	bne.n	800596c <_printf_common+0x48>
 800595e:	f104 0a19 	add.w	sl, r4, #25
 8005962:	68e3      	ldr	r3, [r4, #12]
 8005964:	6832      	ldr	r2, [r6, #0]
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	42ab      	cmp	r3, r5
 800596a:	dc26      	bgt.n	80059ba <_printf_common+0x96>
 800596c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005970:	1e13      	subs	r3, r2, #0
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	bf18      	it	ne
 8005976:	2301      	movne	r3, #1
 8005978:	0692      	lsls	r2, r2, #26
 800597a:	d42b      	bmi.n	80059d4 <_printf_common+0xb0>
 800597c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005980:	4649      	mov	r1, r9
 8005982:	4638      	mov	r0, r7
 8005984:	47c0      	blx	r8
 8005986:	3001      	adds	r0, #1
 8005988:	d01e      	beq.n	80059c8 <_printf_common+0xa4>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	68e5      	ldr	r5, [r4, #12]
 800598e:	6832      	ldr	r2, [r6, #0]
 8005990:	f003 0306 	and.w	r3, r3, #6
 8005994:	2b04      	cmp	r3, #4
 8005996:	bf08      	it	eq
 8005998:	1aad      	subeq	r5, r5, r2
 800599a:	68a3      	ldr	r3, [r4, #8]
 800599c:	6922      	ldr	r2, [r4, #16]
 800599e:	bf0c      	ite	eq
 80059a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a4:	2500      	movne	r5, #0
 80059a6:	4293      	cmp	r3, r2
 80059a8:	bfc4      	itt	gt
 80059aa:	1a9b      	subgt	r3, r3, r2
 80059ac:	18ed      	addgt	r5, r5, r3
 80059ae:	2600      	movs	r6, #0
 80059b0:	341a      	adds	r4, #26
 80059b2:	42b5      	cmp	r5, r6
 80059b4:	d11a      	bne.n	80059ec <_printf_common+0xc8>
 80059b6:	2000      	movs	r0, #0
 80059b8:	e008      	b.n	80059cc <_printf_common+0xa8>
 80059ba:	2301      	movs	r3, #1
 80059bc:	4652      	mov	r2, sl
 80059be:	4649      	mov	r1, r9
 80059c0:	4638      	mov	r0, r7
 80059c2:	47c0      	blx	r8
 80059c4:	3001      	adds	r0, #1
 80059c6:	d103      	bne.n	80059d0 <_printf_common+0xac>
 80059c8:	f04f 30ff 	mov.w	r0, #4294967295
 80059cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d0:	3501      	adds	r5, #1
 80059d2:	e7c6      	b.n	8005962 <_printf_common+0x3e>
 80059d4:	18e1      	adds	r1, r4, r3
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	2030      	movs	r0, #48	; 0x30
 80059da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059de:	4422      	add	r2, r4
 80059e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059e8:	3302      	adds	r3, #2
 80059ea:	e7c7      	b.n	800597c <_printf_common+0x58>
 80059ec:	2301      	movs	r3, #1
 80059ee:	4622      	mov	r2, r4
 80059f0:	4649      	mov	r1, r9
 80059f2:	4638      	mov	r0, r7
 80059f4:	47c0      	blx	r8
 80059f6:	3001      	adds	r0, #1
 80059f8:	d0e6      	beq.n	80059c8 <_printf_common+0xa4>
 80059fa:	3601      	adds	r6, #1
 80059fc:	e7d9      	b.n	80059b2 <_printf_common+0x8e>
	...

08005a00 <_printf_i>:
 8005a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	460c      	mov	r4, r1
 8005a06:	4691      	mov	r9, r2
 8005a08:	7e27      	ldrb	r7, [r4, #24]
 8005a0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a0c:	2f78      	cmp	r7, #120	; 0x78
 8005a0e:	4680      	mov	r8, r0
 8005a10:	469a      	mov	sl, r3
 8005a12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a16:	d807      	bhi.n	8005a28 <_printf_i+0x28>
 8005a18:	2f62      	cmp	r7, #98	; 0x62
 8005a1a:	d80a      	bhi.n	8005a32 <_printf_i+0x32>
 8005a1c:	2f00      	cmp	r7, #0
 8005a1e:	f000 80d8 	beq.w	8005bd2 <_printf_i+0x1d2>
 8005a22:	2f58      	cmp	r7, #88	; 0x58
 8005a24:	f000 80a3 	beq.w	8005b6e <_printf_i+0x16e>
 8005a28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a30:	e03a      	b.n	8005aa8 <_printf_i+0xa8>
 8005a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a36:	2b15      	cmp	r3, #21
 8005a38:	d8f6      	bhi.n	8005a28 <_printf_i+0x28>
 8005a3a:	a001      	add	r0, pc, #4	; (adr r0, 8005a40 <_printf_i+0x40>)
 8005a3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a40:	08005a99 	.word	0x08005a99
 8005a44:	08005aad 	.word	0x08005aad
 8005a48:	08005a29 	.word	0x08005a29
 8005a4c:	08005a29 	.word	0x08005a29
 8005a50:	08005a29 	.word	0x08005a29
 8005a54:	08005a29 	.word	0x08005a29
 8005a58:	08005aad 	.word	0x08005aad
 8005a5c:	08005a29 	.word	0x08005a29
 8005a60:	08005a29 	.word	0x08005a29
 8005a64:	08005a29 	.word	0x08005a29
 8005a68:	08005a29 	.word	0x08005a29
 8005a6c:	08005bb9 	.word	0x08005bb9
 8005a70:	08005add 	.word	0x08005add
 8005a74:	08005b9b 	.word	0x08005b9b
 8005a78:	08005a29 	.word	0x08005a29
 8005a7c:	08005a29 	.word	0x08005a29
 8005a80:	08005bdb 	.word	0x08005bdb
 8005a84:	08005a29 	.word	0x08005a29
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005a29 	.word	0x08005a29
 8005a90:	08005a29 	.word	0x08005a29
 8005a94:	08005ba3 	.word	0x08005ba3
 8005a98:	680b      	ldr	r3, [r1, #0]
 8005a9a:	1d1a      	adds	r2, r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	600a      	str	r2, [r1, #0]
 8005aa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0a3      	b.n	8005bf4 <_printf_i+0x1f4>
 8005aac:	6825      	ldr	r5, [r4, #0]
 8005aae:	6808      	ldr	r0, [r1, #0]
 8005ab0:	062e      	lsls	r6, r5, #24
 8005ab2:	f100 0304 	add.w	r3, r0, #4
 8005ab6:	d50a      	bpl.n	8005ace <_printf_i+0xce>
 8005ab8:	6805      	ldr	r5, [r0, #0]
 8005aba:	600b      	str	r3, [r1, #0]
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	da03      	bge.n	8005ac8 <_printf_i+0xc8>
 8005ac0:	232d      	movs	r3, #45	; 0x2d
 8005ac2:	426d      	negs	r5, r5
 8005ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac8:	485e      	ldr	r0, [pc, #376]	; (8005c44 <_printf_i+0x244>)
 8005aca:	230a      	movs	r3, #10
 8005acc:	e019      	b.n	8005b02 <_printf_i+0x102>
 8005ace:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005ad2:	6805      	ldr	r5, [r0, #0]
 8005ad4:	600b      	str	r3, [r1, #0]
 8005ad6:	bf18      	it	ne
 8005ad8:	b22d      	sxthne	r5, r5
 8005ada:	e7ef      	b.n	8005abc <_printf_i+0xbc>
 8005adc:	680b      	ldr	r3, [r1, #0]
 8005ade:	6825      	ldr	r5, [r4, #0]
 8005ae0:	1d18      	adds	r0, r3, #4
 8005ae2:	6008      	str	r0, [r1, #0]
 8005ae4:	0628      	lsls	r0, r5, #24
 8005ae6:	d501      	bpl.n	8005aec <_printf_i+0xec>
 8005ae8:	681d      	ldr	r5, [r3, #0]
 8005aea:	e002      	b.n	8005af2 <_printf_i+0xf2>
 8005aec:	0669      	lsls	r1, r5, #25
 8005aee:	d5fb      	bpl.n	8005ae8 <_printf_i+0xe8>
 8005af0:	881d      	ldrh	r5, [r3, #0]
 8005af2:	4854      	ldr	r0, [pc, #336]	; (8005c44 <_printf_i+0x244>)
 8005af4:	2f6f      	cmp	r7, #111	; 0x6f
 8005af6:	bf0c      	ite	eq
 8005af8:	2308      	moveq	r3, #8
 8005afa:	230a      	movne	r3, #10
 8005afc:	2100      	movs	r1, #0
 8005afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b02:	6866      	ldr	r6, [r4, #4]
 8005b04:	60a6      	str	r6, [r4, #8]
 8005b06:	2e00      	cmp	r6, #0
 8005b08:	bfa2      	ittt	ge
 8005b0a:	6821      	ldrge	r1, [r4, #0]
 8005b0c:	f021 0104 	bicge.w	r1, r1, #4
 8005b10:	6021      	strge	r1, [r4, #0]
 8005b12:	b90d      	cbnz	r5, 8005b18 <_printf_i+0x118>
 8005b14:	2e00      	cmp	r6, #0
 8005b16:	d04d      	beq.n	8005bb4 <_printf_i+0x1b4>
 8005b18:	4616      	mov	r6, r2
 8005b1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b1e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b22:	5dc7      	ldrb	r7, [r0, r7]
 8005b24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b28:	462f      	mov	r7, r5
 8005b2a:	42bb      	cmp	r3, r7
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	d9f4      	bls.n	8005b1a <_printf_i+0x11a>
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d10b      	bne.n	8005b4c <_printf_i+0x14c>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	07df      	lsls	r7, r3, #31
 8005b38:	d508      	bpl.n	8005b4c <_printf_i+0x14c>
 8005b3a:	6923      	ldr	r3, [r4, #16]
 8005b3c:	6861      	ldr	r1, [r4, #4]
 8005b3e:	4299      	cmp	r1, r3
 8005b40:	bfde      	ittt	le
 8005b42:	2330      	movle	r3, #48	; 0x30
 8005b44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b4c:	1b92      	subs	r2, r2, r6
 8005b4e:	6122      	str	r2, [r4, #16]
 8005b50:	f8cd a000 	str.w	sl, [sp]
 8005b54:	464b      	mov	r3, r9
 8005b56:	aa03      	add	r2, sp, #12
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	f7ff fee2 	bl	8005924 <_printf_common>
 8005b60:	3001      	adds	r0, #1
 8005b62:	d14c      	bne.n	8005bfe <_printf_i+0x1fe>
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	b004      	add	sp, #16
 8005b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6e:	4835      	ldr	r0, [pc, #212]	; (8005c44 <_printf_i+0x244>)
 8005b70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	680e      	ldr	r6, [r1, #0]
 8005b78:	061f      	lsls	r7, r3, #24
 8005b7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b7e:	600e      	str	r6, [r1, #0]
 8005b80:	d514      	bpl.n	8005bac <_printf_i+0x1ac>
 8005b82:	07d9      	lsls	r1, r3, #31
 8005b84:	bf44      	itt	mi
 8005b86:	f043 0320 	orrmi.w	r3, r3, #32
 8005b8a:	6023      	strmi	r3, [r4, #0]
 8005b8c:	b91d      	cbnz	r5, 8005b96 <_printf_i+0x196>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	f023 0320 	bic.w	r3, r3, #32
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	2310      	movs	r3, #16
 8005b98:	e7b0      	b.n	8005afc <_printf_i+0xfc>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	f043 0320 	orr.w	r3, r3, #32
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	2378      	movs	r3, #120	; 0x78
 8005ba4:	4828      	ldr	r0, [pc, #160]	; (8005c48 <_printf_i+0x248>)
 8005ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005baa:	e7e3      	b.n	8005b74 <_printf_i+0x174>
 8005bac:	065e      	lsls	r6, r3, #25
 8005bae:	bf48      	it	mi
 8005bb0:	b2ad      	uxthmi	r5, r5
 8005bb2:	e7e6      	b.n	8005b82 <_printf_i+0x182>
 8005bb4:	4616      	mov	r6, r2
 8005bb6:	e7bb      	b.n	8005b30 <_printf_i+0x130>
 8005bb8:	680b      	ldr	r3, [r1, #0]
 8005bba:	6826      	ldr	r6, [r4, #0]
 8005bbc:	6960      	ldr	r0, [r4, #20]
 8005bbe:	1d1d      	adds	r5, r3, #4
 8005bc0:	600d      	str	r5, [r1, #0]
 8005bc2:	0635      	lsls	r5, r6, #24
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	d501      	bpl.n	8005bcc <_printf_i+0x1cc>
 8005bc8:	6018      	str	r0, [r3, #0]
 8005bca:	e002      	b.n	8005bd2 <_printf_i+0x1d2>
 8005bcc:	0671      	lsls	r1, r6, #25
 8005bce:	d5fb      	bpl.n	8005bc8 <_printf_i+0x1c8>
 8005bd0:	8018      	strh	r0, [r3, #0]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	4616      	mov	r6, r2
 8005bd8:	e7ba      	b.n	8005b50 <_printf_i+0x150>
 8005bda:	680b      	ldr	r3, [r1, #0]
 8005bdc:	1d1a      	adds	r2, r3, #4
 8005bde:	600a      	str	r2, [r1, #0]
 8005be0:	681e      	ldr	r6, [r3, #0]
 8005be2:	6862      	ldr	r2, [r4, #4]
 8005be4:	2100      	movs	r1, #0
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7fa faf2 	bl	80001d0 <memchr>
 8005bec:	b108      	cbz	r0, 8005bf2 <_printf_i+0x1f2>
 8005bee:	1b80      	subs	r0, r0, r6
 8005bf0:	6060      	str	r0, [r4, #4]
 8005bf2:	6863      	ldr	r3, [r4, #4]
 8005bf4:	6123      	str	r3, [r4, #16]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfc:	e7a8      	b.n	8005b50 <_printf_i+0x150>
 8005bfe:	6923      	ldr	r3, [r4, #16]
 8005c00:	4632      	mov	r2, r6
 8005c02:	4649      	mov	r1, r9
 8005c04:	4640      	mov	r0, r8
 8005c06:	47d0      	blx	sl
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d0ab      	beq.n	8005b64 <_printf_i+0x164>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	079b      	lsls	r3, r3, #30
 8005c10:	d413      	bmi.n	8005c3a <_printf_i+0x23a>
 8005c12:	68e0      	ldr	r0, [r4, #12]
 8005c14:	9b03      	ldr	r3, [sp, #12]
 8005c16:	4298      	cmp	r0, r3
 8005c18:	bfb8      	it	lt
 8005c1a:	4618      	movlt	r0, r3
 8005c1c:	e7a4      	b.n	8005b68 <_printf_i+0x168>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4632      	mov	r2, r6
 8005c22:	4649      	mov	r1, r9
 8005c24:	4640      	mov	r0, r8
 8005c26:	47d0      	blx	sl
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d09b      	beq.n	8005b64 <_printf_i+0x164>
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	9903      	ldr	r1, [sp, #12]
 8005c32:	1a5b      	subs	r3, r3, r1
 8005c34:	42ab      	cmp	r3, r5
 8005c36:	dcf2      	bgt.n	8005c1e <_printf_i+0x21e>
 8005c38:	e7eb      	b.n	8005c12 <_printf_i+0x212>
 8005c3a:	2500      	movs	r5, #0
 8005c3c:	f104 0619 	add.w	r6, r4, #25
 8005c40:	e7f5      	b.n	8005c2e <_printf_i+0x22e>
 8005c42:	bf00      	nop
 8005c44:	080063cd 	.word	0x080063cd
 8005c48:	080063de 	.word	0x080063de

08005c4c <_sbrk_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d06      	ldr	r5, [pc, #24]	; (8005c68 <_sbrk_r+0x1c>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fb fbda 	bl	8001410 <_sbrk>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_sbrk_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_sbrk_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	200007d0 	.word	0x200007d0

08005c6c <__sread>:
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	460c      	mov	r4, r1
 8005c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c74:	f000 fab4 	bl	80061e0 <_read_r>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	bfab      	itete	ge
 8005c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8005c80:	181b      	addge	r3, r3, r0
 8005c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c86:	bfac      	ite	ge
 8005c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c8a:	81a3      	strhlt	r3, [r4, #12]
 8005c8c:	bd10      	pop	{r4, pc}

08005c8e <__swrite>:
 8005c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c92:	461f      	mov	r7, r3
 8005c94:	898b      	ldrh	r3, [r1, #12]
 8005c96:	05db      	lsls	r3, r3, #23
 8005c98:	4605      	mov	r5, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	4616      	mov	r6, r2
 8005c9e:	d505      	bpl.n	8005cac <__swrite+0x1e>
 8005ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f000 f9c8 	bl	800603c <_lseek_r>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	4632      	mov	r2, r6
 8005cba:	463b      	mov	r3, r7
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc2:	f000 b869 	b.w	8005d98 <_write_r>

08005cc6 <__sseek>:
 8005cc6:	b510      	push	{r4, lr}
 8005cc8:	460c      	mov	r4, r1
 8005cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cce:	f000 f9b5 	bl	800603c <_lseek_r>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	bf15      	itete	ne
 8005cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ce2:	81a3      	strheq	r3, [r4, #12]
 8005ce4:	bf18      	it	ne
 8005ce6:	81a3      	strhne	r3, [r4, #12]
 8005ce8:	bd10      	pop	{r4, pc}

08005cea <__sclose>:
 8005cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cee:	f000 b8d3 	b.w	8005e98 <_close_r>
	...

08005cf4 <__swbuf_r>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	460e      	mov	r6, r1
 8005cf8:	4614      	mov	r4, r2
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	b118      	cbz	r0, 8005d06 <__swbuf_r+0x12>
 8005cfe:	6983      	ldr	r3, [r0, #24]
 8005d00:	b90b      	cbnz	r3, 8005d06 <__swbuf_r+0x12>
 8005d02:	f7ff fbbb 	bl	800547c <__sinit>
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <__swbuf_r+0x98>)
 8005d08:	429c      	cmp	r4, r3
 8005d0a:	d12b      	bne.n	8005d64 <__swbuf_r+0x70>
 8005d0c:	686c      	ldr	r4, [r5, #4]
 8005d0e:	69a3      	ldr	r3, [r4, #24]
 8005d10:	60a3      	str	r3, [r4, #8]
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	071a      	lsls	r2, r3, #28
 8005d16:	d52f      	bpl.n	8005d78 <__swbuf_r+0x84>
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	b36b      	cbz	r3, 8005d78 <__swbuf_r+0x84>
 8005d1c:	6923      	ldr	r3, [r4, #16]
 8005d1e:	6820      	ldr	r0, [r4, #0]
 8005d20:	1ac0      	subs	r0, r0, r3
 8005d22:	6963      	ldr	r3, [r4, #20]
 8005d24:	b2f6      	uxtb	r6, r6
 8005d26:	4283      	cmp	r3, r0
 8005d28:	4637      	mov	r7, r6
 8005d2a:	dc04      	bgt.n	8005d36 <__swbuf_r+0x42>
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f948 	bl	8005fc4 <_fflush_r>
 8005d34:	bb30      	cbnz	r0, 8005d84 <__swbuf_r+0x90>
 8005d36:	68a3      	ldr	r3, [r4, #8]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	60a3      	str	r3, [r4, #8]
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	6022      	str	r2, [r4, #0]
 8005d42:	701e      	strb	r6, [r3, #0]
 8005d44:	6963      	ldr	r3, [r4, #20]
 8005d46:	3001      	adds	r0, #1
 8005d48:	4283      	cmp	r3, r0
 8005d4a:	d004      	beq.n	8005d56 <__swbuf_r+0x62>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	07db      	lsls	r3, r3, #31
 8005d50:	d506      	bpl.n	8005d60 <__swbuf_r+0x6c>
 8005d52:	2e0a      	cmp	r6, #10
 8005d54:	d104      	bne.n	8005d60 <__swbuf_r+0x6c>
 8005d56:	4621      	mov	r1, r4
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f000 f933 	bl	8005fc4 <_fflush_r>
 8005d5e:	b988      	cbnz	r0, 8005d84 <__swbuf_r+0x90>
 8005d60:	4638      	mov	r0, r7
 8005d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d64:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <__swbuf_r+0x9c>)
 8005d66:	429c      	cmp	r4, r3
 8005d68:	d101      	bne.n	8005d6e <__swbuf_r+0x7a>
 8005d6a:	68ac      	ldr	r4, [r5, #8]
 8005d6c:	e7cf      	b.n	8005d0e <__swbuf_r+0x1a>
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <__swbuf_r+0xa0>)
 8005d70:	429c      	cmp	r4, r3
 8005d72:	bf08      	it	eq
 8005d74:	68ec      	ldreq	r4, [r5, #12]
 8005d76:	e7ca      	b.n	8005d0e <__swbuf_r+0x1a>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 f81e 	bl	8005dbc <__swsetup_r>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d0cb      	beq.n	8005d1c <__swbuf_r+0x28>
 8005d84:	f04f 37ff 	mov.w	r7, #4294967295
 8005d88:	e7ea      	b.n	8005d60 <__swbuf_r+0x6c>
 8005d8a:	bf00      	nop
 8005d8c:	0800637c 	.word	0x0800637c
 8005d90:	0800639c 	.word	0x0800639c
 8005d94:	0800635c 	.word	0x0800635c

08005d98 <_write_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4d07      	ldr	r5, [pc, #28]	; (8005db8 <_write_r+0x20>)
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	4608      	mov	r0, r1
 8005da0:	4611      	mov	r1, r2
 8005da2:	2200      	movs	r2, #0
 8005da4:	602a      	str	r2, [r5, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f7fb fae1 	bl	800136e <_write>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_write_r+0x1e>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_write_r+0x1e>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	200007d0 	.word	0x200007d0

08005dbc <__swsetup_r>:
 8005dbc:	4b32      	ldr	r3, [pc, #200]	; (8005e88 <__swsetup_r+0xcc>)
 8005dbe:	b570      	push	{r4, r5, r6, lr}
 8005dc0:	681d      	ldr	r5, [r3, #0]
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	b125      	cbz	r5, 8005dd2 <__swsetup_r+0x16>
 8005dc8:	69ab      	ldr	r3, [r5, #24]
 8005dca:	b913      	cbnz	r3, 8005dd2 <__swsetup_r+0x16>
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f7ff fb55 	bl	800547c <__sinit>
 8005dd2:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <__swsetup_r+0xd0>)
 8005dd4:	429c      	cmp	r4, r3
 8005dd6:	d10f      	bne.n	8005df8 <__swsetup_r+0x3c>
 8005dd8:	686c      	ldr	r4, [r5, #4]
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005de0:	0719      	lsls	r1, r3, #28
 8005de2:	d42c      	bmi.n	8005e3e <__swsetup_r+0x82>
 8005de4:	06dd      	lsls	r5, r3, #27
 8005de6:	d411      	bmi.n	8005e0c <__swsetup_r+0x50>
 8005de8:	2309      	movs	r3, #9
 8005dea:	6033      	str	r3, [r6, #0]
 8005dec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	f04f 30ff 	mov.w	r0, #4294967295
 8005df6:	e03e      	b.n	8005e76 <__swsetup_r+0xba>
 8005df8:	4b25      	ldr	r3, [pc, #148]	; (8005e90 <__swsetup_r+0xd4>)
 8005dfa:	429c      	cmp	r4, r3
 8005dfc:	d101      	bne.n	8005e02 <__swsetup_r+0x46>
 8005dfe:	68ac      	ldr	r4, [r5, #8]
 8005e00:	e7eb      	b.n	8005dda <__swsetup_r+0x1e>
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <__swsetup_r+0xd8>)
 8005e04:	429c      	cmp	r4, r3
 8005e06:	bf08      	it	eq
 8005e08:	68ec      	ldreq	r4, [r5, #12]
 8005e0a:	e7e6      	b.n	8005dda <__swsetup_r+0x1e>
 8005e0c:	0758      	lsls	r0, r3, #29
 8005e0e:	d512      	bpl.n	8005e36 <__swsetup_r+0x7a>
 8005e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e12:	b141      	cbz	r1, 8005e26 <__swsetup_r+0x6a>
 8005e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e18:	4299      	cmp	r1, r3
 8005e1a:	d002      	beq.n	8005e22 <__swsetup_r+0x66>
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f000 f98f 	bl	8006140 <_free_r>
 8005e22:	2300      	movs	r3, #0
 8005e24:	6363      	str	r3, [r4, #52]	; 0x34
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e2c:	81a3      	strh	r3, [r4, #12]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6063      	str	r3, [r4, #4]
 8005e32:	6923      	ldr	r3, [r4, #16]
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	f043 0308 	orr.w	r3, r3, #8
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	b94b      	cbnz	r3, 8005e56 <__swsetup_r+0x9a>
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e4c:	d003      	beq.n	8005e56 <__swsetup_r+0x9a>
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4630      	mov	r0, r6
 8005e52:	f000 f929 	bl	80060a8 <__smakebuf_r>
 8005e56:	89a0      	ldrh	r0, [r4, #12]
 8005e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e5c:	f010 0301 	ands.w	r3, r0, #1
 8005e60:	d00a      	beq.n	8005e78 <__swsetup_r+0xbc>
 8005e62:	2300      	movs	r3, #0
 8005e64:	60a3      	str	r3, [r4, #8]
 8005e66:	6963      	ldr	r3, [r4, #20]
 8005e68:	425b      	negs	r3, r3
 8005e6a:	61a3      	str	r3, [r4, #24]
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	b943      	cbnz	r3, 8005e82 <__swsetup_r+0xc6>
 8005e70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e74:	d1ba      	bne.n	8005dec <__swsetup_r+0x30>
 8005e76:	bd70      	pop	{r4, r5, r6, pc}
 8005e78:	0781      	lsls	r1, r0, #30
 8005e7a:	bf58      	it	pl
 8005e7c:	6963      	ldrpl	r3, [r4, #20]
 8005e7e:	60a3      	str	r3, [r4, #8]
 8005e80:	e7f4      	b.n	8005e6c <__swsetup_r+0xb0>
 8005e82:	2000      	movs	r0, #0
 8005e84:	e7f7      	b.n	8005e76 <__swsetup_r+0xba>
 8005e86:	bf00      	nop
 8005e88:	20000204 	.word	0x20000204
 8005e8c:	0800637c 	.word	0x0800637c
 8005e90:	0800639c 	.word	0x0800639c
 8005e94:	0800635c 	.word	0x0800635c

08005e98 <_close_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d06      	ldr	r5, [pc, #24]	; (8005eb4 <_close_r+0x1c>)
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	602b      	str	r3, [r5, #0]
 8005ea4:	f7fb fa7f 	bl	80013a6 <_close>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_close_r+0x1a>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_close_r+0x1a>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	200007d0 	.word	0x200007d0

08005eb8 <__sflush_r>:
 8005eb8:	898a      	ldrh	r2, [r1, #12]
 8005eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ebe:	4605      	mov	r5, r0
 8005ec0:	0710      	lsls	r0, r2, #28
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	d458      	bmi.n	8005f78 <__sflush_r+0xc0>
 8005ec6:	684b      	ldr	r3, [r1, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dc05      	bgt.n	8005ed8 <__sflush_r+0x20>
 8005ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dc02      	bgt.n	8005ed8 <__sflush_r+0x20>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	d0f9      	beq.n	8005ed2 <__sflush_r+0x1a>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ee4:	682f      	ldr	r7, [r5, #0]
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	d032      	beq.n	8005f50 <__sflush_r+0x98>
 8005eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	075a      	lsls	r2, r3, #29
 8005ef0:	d505      	bpl.n	8005efe <__sflush_r+0x46>
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	1ac0      	subs	r0, r0, r3
 8005ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ef8:	b10b      	cbz	r3, 8005efe <__sflush_r+0x46>
 8005efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005efc:	1ac0      	subs	r0, r0, r3
 8005efe:	2300      	movs	r3, #0
 8005f00:	4602      	mov	r2, r0
 8005f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f04:	6a21      	ldr	r1, [r4, #32]
 8005f06:	4628      	mov	r0, r5
 8005f08:	47b0      	blx	r6
 8005f0a:	1c43      	adds	r3, r0, #1
 8005f0c:	89a3      	ldrh	r3, [r4, #12]
 8005f0e:	d106      	bne.n	8005f1e <__sflush_r+0x66>
 8005f10:	6829      	ldr	r1, [r5, #0]
 8005f12:	291d      	cmp	r1, #29
 8005f14:	d82c      	bhi.n	8005f70 <__sflush_r+0xb8>
 8005f16:	4a2a      	ldr	r2, [pc, #168]	; (8005fc0 <__sflush_r+0x108>)
 8005f18:	40ca      	lsrs	r2, r1
 8005f1a:	07d6      	lsls	r6, r2, #31
 8005f1c:	d528      	bpl.n	8005f70 <__sflush_r+0xb8>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	6062      	str	r2, [r4, #4]
 8005f22:	04d9      	lsls	r1, r3, #19
 8005f24:	6922      	ldr	r2, [r4, #16]
 8005f26:	6022      	str	r2, [r4, #0]
 8005f28:	d504      	bpl.n	8005f34 <__sflush_r+0x7c>
 8005f2a:	1c42      	adds	r2, r0, #1
 8005f2c:	d101      	bne.n	8005f32 <__sflush_r+0x7a>
 8005f2e:	682b      	ldr	r3, [r5, #0]
 8005f30:	b903      	cbnz	r3, 8005f34 <__sflush_r+0x7c>
 8005f32:	6560      	str	r0, [r4, #84]	; 0x54
 8005f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f36:	602f      	str	r7, [r5, #0]
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	d0ca      	beq.n	8005ed2 <__sflush_r+0x1a>
 8005f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f40:	4299      	cmp	r1, r3
 8005f42:	d002      	beq.n	8005f4a <__sflush_r+0x92>
 8005f44:	4628      	mov	r0, r5
 8005f46:	f000 f8fb 	bl	8006140 <_free_r>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8005f4e:	e7c1      	b.n	8005ed4 <__sflush_r+0x1c>
 8005f50:	6a21      	ldr	r1, [r4, #32]
 8005f52:	2301      	movs	r3, #1
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b0      	blx	r6
 8005f58:	1c41      	adds	r1, r0, #1
 8005f5a:	d1c7      	bne.n	8005eec <__sflush_r+0x34>
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0c4      	beq.n	8005eec <__sflush_r+0x34>
 8005f62:	2b1d      	cmp	r3, #29
 8005f64:	d001      	beq.n	8005f6a <__sflush_r+0xb2>
 8005f66:	2b16      	cmp	r3, #22
 8005f68:	d101      	bne.n	8005f6e <__sflush_r+0xb6>
 8005f6a:	602f      	str	r7, [r5, #0]
 8005f6c:	e7b1      	b.n	8005ed2 <__sflush_r+0x1a>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	e7ad      	b.n	8005ed4 <__sflush_r+0x1c>
 8005f78:	690f      	ldr	r7, [r1, #16]
 8005f7a:	2f00      	cmp	r7, #0
 8005f7c:	d0a9      	beq.n	8005ed2 <__sflush_r+0x1a>
 8005f7e:	0793      	lsls	r3, r2, #30
 8005f80:	680e      	ldr	r6, [r1, #0]
 8005f82:	bf08      	it	eq
 8005f84:	694b      	ldreq	r3, [r1, #20]
 8005f86:	600f      	str	r7, [r1, #0]
 8005f88:	bf18      	it	ne
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	eba6 0807 	sub.w	r8, r6, r7
 8005f90:	608b      	str	r3, [r1, #8]
 8005f92:	f1b8 0f00 	cmp.w	r8, #0
 8005f96:	dd9c      	ble.n	8005ed2 <__sflush_r+0x1a>
 8005f98:	6a21      	ldr	r1, [r4, #32]
 8005f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f9c:	4643      	mov	r3, r8
 8005f9e:	463a      	mov	r2, r7
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	47b0      	blx	r6
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	dc06      	bgt.n	8005fb6 <__sflush_r+0xfe>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fae:	81a3      	strh	r3, [r4, #12]
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	e78e      	b.n	8005ed4 <__sflush_r+0x1c>
 8005fb6:	4407      	add	r7, r0
 8005fb8:	eba8 0800 	sub.w	r8, r8, r0
 8005fbc:	e7e9      	b.n	8005f92 <__sflush_r+0xda>
 8005fbe:	bf00      	nop
 8005fc0:	20400001 	.word	0x20400001

08005fc4 <_fflush_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	690b      	ldr	r3, [r1, #16]
 8005fc8:	4605      	mov	r5, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	b913      	cbnz	r3, 8005fd4 <_fflush_r+0x10>
 8005fce:	2500      	movs	r5, #0
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	b118      	cbz	r0, 8005fde <_fflush_r+0x1a>
 8005fd6:	6983      	ldr	r3, [r0, #24]
 8005fd8:	b90b      	cbnz	r3, 8005fde <_fflush_r+0x1a>
 8005fda:	f7ff fa4f 	bl	800547c <__sinit>
 8005fde:	4b14      	ldr	r3, [pc, #80]	; (8006030 <_fflush_r+0x6c>)
 8005fe0:	429c      	cmp	r4, r3
 8005fe2:	d11b      	bne.n	800601c <_fflush_r+0x58>
 8005fe4:	686c      	ldr	r4, [r5, #4]
 8005fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0ef      	beq.n	8005fce <_fflush_r+0xa>
 8005fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ff0:	07d0      	lsls	r0, r2, #31
 8005ff2:	d404      	bmi.n	8005ffe <_fflush_r+0x3a>
 8005ff4:	0599      	lsls	r1, r3, #22
 8005ff6:	d402      	bmi.n	8005ffe <_fflush_r+0x3a>
 8005ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ffa:	f7ff fadd 	bl	80055b8 <__retarget_lock_acquire_recursive>
 8005ffe:	4628      	mov	r0, r5
 8006000:	4621      	mov	r1, r4
 8006002:	f7ff ff59 	bl	8005eb8 <__sflush_r>
 8006006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006008:	07da      	lsls	r2, r3, #31
 800600a:	4605      	mov	r5, r0
 800600c:	d4e0      	bmi.n	8005fd0 <_fflush_r+0xc>
 800600e:	89a3      	ldrh	r3, [r4, #12]
 8006010:	059b      	lsls	r3, r3, #22
 8006012:	d4dd      	bmi.n	8005fd0 <_fflush_r+0xc>
 8006014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006016:	f7ff fad0 	bl	80055ba <__retarget_lock_release_recursive>
 800601a:	e7d9      	b.n	8005fd0 <_fflush_r+0xc>
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <_fflush_r+0x70>)
 800601e:	429c      	cmp	r4, r3
 8006020:	d101      	bne.n	8006026 <_fflush_r+0x62>
 8006022:	68ac      	ldr	r4, [r5, #8]
 8006024:	e7df      	b.n	8005fe6 <_fflush_r+0x22>
 8006026:	4b04      	ldr	r3, [pc, #16]	; (8006038 <_fflush_r+0x74>)
 8006028:	429c      	cmp	r4, r3
 800602a:	bf08      	it	eq
 800602c:	68ec      	ldreq	r4, [r5, #12]
 800602e:	e7da      	b.n	8005fe6 <_fflush_r+0x22>
 8006030:	0800637c 	.word	0x0800637c
 8006034:	0800639c 	.word	0x0800639c
 8006038:	0800635c 	.word	0x0800635c

0800603c <_lseek_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	4d07      	ldr	r5, [pc, #28]	; (800605c <_lseek_r+0x20>)
 8006040:	4604      	mov	r4, r0
 8006042:	4608      	mov	r0, r1
 8006044:	4611      	mov	r1, r2
 8006046:	2200      	movs	r2, #0
 8006048:	602a      	str	r2, [r5, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	f7fb f9d2 	bl	80013f4 <_lseek>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_lseek_r+0x1e>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_lseek_r+0x1e>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	200007d0 	.word	0x200007d0

08006060 <__swhatbuf_r>:
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	460e      	mov	r6, r1
 8006064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006068:	2900      	cmp	r1, #0
 800606a:	b096      	sub	sp, #88	; 0x58
 800606c:	4614      	mov	r4, r2
 800606e:	461d      	mov	r5, r3
 8006070:	da07      	bge.n	8006082 <__swhatbuf_r+0x22>
 8006072:	2300      	movs	r3, #0
 8006074:	602b      	str	r3, [r5, #0]
 8006076:	89b3      	ldrh	r3, [r6, #12]
 8006078:	061a      	lsls	r2, r3, #24
 800607a:	d410      	bmi.n	800609e <__swhatbuf_r+0x3e>
 800607c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006080:	e00e      	b.n	80060a0 <__swhatbuf_r+0x40>
 8006082:	466a      	mov	r2, sp
 8006084:	f000 f8be 	bl	8006204 <_fstat_r>
 8006088:	2800      	cmp	r0, #0
 800608a:	dbf2      	blt.n	8006072 <__swhatbuf_r+0x12>
 800608c:	9a01      	ldr	r2, [sp, #4]
 800608e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006092:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006096:	425a      	negs	r2, r3
 8006098:	415a      	adcs	r2, r3
 800609a:	602a      	str	r2, [r5, #0]
 800609c:	e7ee      	b.n	800607c <__swhatbuf_r+0x1c>
 800609e:	2340      	movs	r3, #64	; 0x40
 80060a0:	2000      	movs	r0, #0
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	b016      	add	sp, #88	; 0x58
 80060a6:	bd70      	pop	{r4, r5, r6, pc}

080060a8 <__smakebuf_r>:
 80060a8:	898b      	ldrh	r3, [r1, #12]
 80060aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060ac:	079d      	lsls	r5, r3, #30
 80060ae:	4606      	mov	r6, r0
 80060b0:	460c      	mov	r4, r1
 80060b2:	d507      	bpl.n	80060c4 <__smakebuf_r+0x1c>
 80060b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	2301      	movs	r3, #1
 80060be:	6163      	str	r3, [r4, #20]
 80060c0:	b002      	add	sp, #8
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	ab01      	add	r3, sp, #4
 80060c6:	466a      	mov	r2, sp
 80060c8:	f7ff ffca 	bl	8006060 <__swhatbuf_r>
 80060cc:	9900      	ldr	r1, [sp, #0]
 80060ce:	4605      	mov	r5, r0
 80060d0:	4630      	mov	r0, r6
 80060d2:	f7ff fa73 	bl	80055bc <_malloc_r>
 80060d6:	b948      	cbnz	r0, 80060ec <__smakebuf_r+0x44>
 80060d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060dc:	059a      	lsls	r2, r3, #22
 80060de:	d4ef      	bmi.n	80060c0 <__smakebuf_r+0x18>
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	81a3      	strh	r3, [r4, #12]
 80060ea:	e7e3      	b.n	80060b4 <__smakebuf_r+0xc>
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <__smakebuf_r+0x7c>)
 80060ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	6020      	str	r0, [r4, #0]
 80060f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	6163      	str	r3, [r4, #20]
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	6120      	str	r0, [r4, #16]
 8006102:	b15b      	cbz	r3, 800611c <__smakebuf_r+0x74>
 8006104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006108:	4630      	mov	r0, r6
 800610a:	f000 f88d 	bl	8006228 <_isatty_r>
 800610e:	b128      	cbz	r0, 800611c <__smakebuf_r+0x74>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	89a0      	ldrh	r0, [r4, #12]
 800611e:	4305      	orrs	r5, r0
 8006120:	81a5      	strh	r5, [r4, #12]
 8006122:	e7cd      	b.n	80060c0 <__smakebuf_r+0x18>
 8006124:	08005415 	.word	0x08005415

08006128 <__malloc_lock>:
 8006128:	4801      	ldr	r0, [pc, #4]	; (8006130 <__malloc_lock+0x8>)
 800612a:	f7ff ba45 	b.w	80055b8 <__retarget_lock_acquire_recursive>
 800612e:	bf00      	nop
 8006130:	200007c8 	.word	0x200007c8

08006134 <__malloc_unlock>:
 8006134:	4801      	ldr	r0, [pc, #4]	; (800613c <__malloc_unlock+0x8>)
 8006136:	f7ff ba40 	b.w	80055ba <__retarget_lock_release_recursive>
 800613a:	bf00      	nop
 800613c:	200007c8 	.word	0x200007c8

08006140 <_free_r>:
 8006140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006142:	2900      	cmp	r1, #0
 8006144:	d048      	beq.n	80061d8 <_free_r+0x98>
 8006146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800614a:	9001      	str	r0, [sp, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	f1a1 0404 	sub.w	r4, r1, #4
 8006152:	bfb8      	it	lt
 8006154:	18e4      	addlt	r4, r4, r3
 8006156:	f7ff ffe7 	bl	8006128 <__malloc_lock>
 800615a:	4a20      	ldr	r2, [pc, #128]	; (80061dc <_free_r+0x9c>)
 800615c:	9801      	ldr	r0, [sp, #4]
 800615e:	6813      	ldr	r3, [r2, #0]
 8006160:	4615      	mov	r5, r2
 8006162:	b933      	cbnz	r3, 8006172 <_free_r+0x32>
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6014      	str	r4, [r2, #0]
 8006168:	b003      	add	sp, #12
 800616a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800616e:	f7ff bfe1 	b.w	8006134 <__malloc_unlock>
 8006172:	42a3      	cmp	r3, r4
 8006174:	d90b      	bls.n	800618e <_free_r+0x4e>
 8006176:	6821      	ldr	r1, [r4, #0]
 8006178:	1862      	adds	r2, r4, r1
 800617a:	4293      	cmp	r3, r2
 800617c:	bf04      	itt	eq
 800617e:	681a      	ldreq	r2, [r3, #0]
 8006180:	685b      	ldreq	r3, [r3, #4]
 8006182:	6063      	str	r3, [r4, #4]
 8006184:	bf04      	itt	eq
 8006186:	1852      	addeq	r2, r2, r1
 8006188:	6022      	streq	r2, [r4, #0]
 800618a:	602c      	str	r4, [r5, #0]
 800618c:	e7ec      	b.n	8006168 <_free_r+0x28>
 800618e:	461a      	mov	r2, r3
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	b10b      	cbz	r3, 8006198 <_free_r+0x58>
 8006194:	42a3      	cmp	r3, r4
 8006196:	d9fa      	bls.n	800618e <_free_r+0x4e>
 8006198:	6811      	ldr	r1, [r2, #0]
 800619a:	1855      	adds	r5, r2, r1
 800619c:	42a5      	cmp	r5, r4
 800619e:	d10b      	bne.n	80061b8 <_free_r+0x78>
 80061a0:	6824      	ldr	r4, [r4, #0]
 80061a2:	4421      	add	r1, r4
 80061a4:	1854      	adds	r4, r2, r1
 80061a6:	42a3      	cmp	r3, r4
 80061a8:	6011      	str	r1, [r2, #0]
 80061aa:	d1dd      	bne.n	8006168 <_free_r+0x28>
 80061ac:	681c      	ldr	r4, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	6053      	str	r3, [r2, #4]
 80061b2:	4421      	add	r1, r4
 80061b4:	6011      	str	r1, [r2, #0]
 80061b6:	e7d7      	b.n	8006168 <_free_r+0x28>
 80061b8:	d902      	bls.n	80061c0 <_free_r+0x80>
 80061ba:	230c      	movs	r3, #12
 80061bc:	6003      	str	r3, [r0, #0]
 80061be:	e7d3      	b.n	8006168 <_free_r+0x28>
 80061c0:	6825      	ldr	r5, [r4, #0]
 80061c2:	1961      	adds	r1, r4, r5
 80061c4:	428b      	cmp	r3, r1
 80061c6:	bf04      	itt	eq
 80061c8:	6819      	ldreq	r1, [r3, #0]
 80061ca:	685b      	ldreq	r3, [r3, #4]
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	bf04      	itt	eq
 80061d0:	1949      	addeq	r1, r1, r5
 80061d2:	6021      	streq	r1, [r4, #0]
 80061d4:	6054      	str	r4, [r2, #4]
 80061d6:	e7c7      	b.n	8006168 <_free_r+0x28>
 80061d8:	b003      	add	sp, #12
 80061da:	bd30      	pop	{r4, r5, pc}
 80061dc:	20000684 	.word	0x20000684

080061e0 <_read_r>:
 80061e0:	b538      	push	{r3, r4, r5, lr}
 80061e2:	4d07      	ldr	r5, [pc, #28]	; (8006200 <_read_r+0x20>)
 80061e4:	4604      	mov	r4, r0
 80061e6:	4608      	mov	r0, r1
 80061e8:	4611      	mov	r1, r2
 80061ea:	2200      	movs	r2, #0
 80061ec:	602a      	str	r2, [r5, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	f7fb f8a0 	bl	8001334 <_read>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d102      	bne.n	80061fe <_read_r+0x1e>
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b103      	cbz	r3, 80061fe <_read_r+0x1e>
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	bd38      	pop	{r3, r4, r5, pc}
 8006200:	200007d0 	.word	0x200007d0

08006204 <_fstat_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d07      	ldr	r5, [pc, #28]	; (8006224 <_fstat_r+0x20>)
 8006208:	2300      	movs	r3, #0
 800620a:	4604      	mov	r4, r0
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	f7fb f8d4 	bl	80013be <_fstat>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	d102      	bne.n	8006220 <_fstat_r+0x1c>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	b103      	cbz	r3, 8006220 <_fstat_r+0x1c>
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop
 8006224:	200007d0 	.word	0x200007d0

08006228 <_isatty_r>:
 8006228:	b538      	push	{r3, r4, r5, lr}
 800622a:	4d06      	ldr	r5, [pc, #24]	; (8006244 <_isatty_r+0x1c>)
 800622c:	2300      	movs	r3, #0
 800622e:	4604      	mov	r4, r0
 8006230:	4608      	mov	r0, r1
 8006232:	602b      	str	r3, [r5, #0]
 8006234:	f7fb f8d3 	bl	80013de <_isatty>
 8006238:	1c43      	adds	r3, r0, #1
 800623a:	d102      	bne.n	8006242 <_isatty_r+0x1a>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	b103      	cbz	r3, 8006242 <_isatty_r+0x1a>
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	bd38      	pop	{r3, r4, r5, pc}
 8006244:	200007d0 	.word	0x200007d0

08006248 <_init>:
 8006248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624a:	bf00      	nop
 800624c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624e:	bc08      	pop	{r3}
 8006250:	469e      	mov	lr, r3
 8006252:	4770      	bx	lr

08006254 <_fini>:
 8006254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006256:	bf00      	nop
 8006258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625a:	bc08      	pop	{r3}
 800625c:	469e      	mov	lr, r3
 800625e:	4770      	bx	lr
