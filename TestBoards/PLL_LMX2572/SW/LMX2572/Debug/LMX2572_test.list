
LMX2572_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd8  08003fd8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08003fd8  08003fd8  00013fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe0  08003fe0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe4  08003fe4  00013fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08003fe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  20000204  080041ec  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  080041ec  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c63f  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcb  00000000  00000000  0002c873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0002e440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002577b  00000000  00000000  0002fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be81  00000000  00000000  000551c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7935  00000000  00000000  00061044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f08  00000000  00000000  001489cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f74 	.word	0x08003f74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	08003f74 	.word	0x08003f74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <LMX2572_write>:
#include "lmx2572.h"

// **** THIS WORKS! *******************************************

// Writes a register to the PLL
void LMX2572_write(SPI_HandleTypeDef *hspi, uint32_t value) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	uint8_t spi_buf[3] = {0,0,0};
 80004ca:	4a14      	ldr	r2, [pc, #80]	; (800051c <LMX2572_write+0x5c>)
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	6812      	ldr	r2, [r2, #0]
 80004d2:	4611      	mov	r1, r2
 80004d4:	8019      	strh	r1, [r3, #0]
 80004d6:	3302      	adds	r3, #2
 80004d8:	0c12      	lsrs	r2, r2, #16
 80004da:	701a      	strb	r2, [r3, #0]

	spi_buf[2] = value;
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	73bb      	strb	r3, [r7, #14]
	spi_buf[1] = value >> 8;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	0a1b      	lsrs	r3, r3, #8
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	737b      	strb	r3, [r7, #13]
	spi_buf[0] = value >> 16;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	0c1b      	lsrs	r3, r3, #16
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// CSB LOW
 80004f2:	2200      	movs	r2, #0
 80004f4:	2110      	movs	r1, #16
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <LMX2572_write+0x60>)
 80004f8:	f001 fa3a 	bl	8001970 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
 80004fc:	f107 010c 	add.w	r1, r7, #12
 8000500:	2364      	movs	r3, #100	; 0x64
 8000502:	2203      	movs	r2, #3
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f002 fdfa 	bl	80030fe <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
 800050a:	2201      	movs	r2, #1
 800050c:	2110      	movs	r1, #16
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <LMX2572_write+0x60>)
 8000510:	f001 fa2e 	bl	8001970 <HAL_GPIO_WritePin>
}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	08003f8c 	.word	0x08003f8c
 8000520:	48000400 	.word	0x48000400

08000524 <LMX2572_load_regs>:

// Loads the registers to the PLL
void LMX2572_load_regs(SPI_HandleTypeDef *hspi){
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
	while ((R[125-i] & 0x00FF0000) != 0) {
 8000530:	e00c      	b.n	800054c <LMX2572_load_regs+0x28>
		LMX2572_write(hspi, R[125-i]);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000538:	4a10      	ldr	r2, [pc, #64]	; (800057c <LMX2572_load_regs+0x58>)
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	4619      	mov	r1, r3
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff ffbd 	bl	80004c0 <LMX2572_write>
		i++;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
	while ((R[125-i] & 0x00FF0000) != 0) {
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LMX2572_load_regs+0x58>)
 8000554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1e8      	bne.n	8000532 <LMX2572_load_regs+0xe>
	}
	LMX2572_write(hspi, R[125-i]);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <LMX2572_load_regs+0x58>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	4619      	mov	r1, r3
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ffa6 	bl	80004c0 <LMX2572_write>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000220 	.word	0x20000220

08000580 <LMX2572_det_param>:
	if (pll.fosc * pll.doubler / pll.r_pre * pll.mult > 100) R[9] |= (0x01 << 14);
	else R[9] &= ~(0x01 << 14);
}

// Determine N, NUM and DEN values from target frequency and fpd
PLL LMX2572_det_param(struct PLL pll){
 8000580:	b084      	sub	sp, #16
 8000582:	b4b0      	push	{r4, r5, r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	f107 001c 	add.w	r0, r7, #28
 800058e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pll.fpd = pll.fosc*pll.doubler/pll.r_pre* pll.mult/pll.r;
 8000592:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000596:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005a6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80005aa:	ee07 3a90 	vmov	s15, r3
 80005ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80005b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80005ca:	ee07 3a90 	vmov	s15, r3
 80005ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005d6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	pll.n = pll.frequency/pll.fpd;
 80005da:	edd7 6a07 	vldr	s13, [r7, #28]
 80005de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80005e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ea:	ee17 3a90 	vmov	r3, s15
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	86bb      	strh	r3, [r7, #52]	; 0x34
	pll.den = 1000;
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	pll.num = (pll.frequency/pll.fpd-pll.n)*pll.den;
 80005f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80005fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000604:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000614:	ee07 3a90 	vmov	s15, r3
 8000618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800061c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000624:	ee17 3a90 	vmov	r3, s15
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
	pll.Fvco = pll.fpd * pll.n + (pll.num * pll.fpd / pll.den);
 800062a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800062e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800063c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000646:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800064a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000658:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	return pll;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	461d      	mov	r5, r3
 8000668:	f107 041c 	add.w	r4, r7, #28
 800066c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000678:	6823      	ldr	r3, [r4, #0]
 800067a:	602b      	str	r3, [r5, #0]
}
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bcb0      	pop	{r4, r5, r7}
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <LMX2572_defaultConfig>:

// Loads PLL default registers to the PLL register bank
PLL LMX2572_defaultConfig(struct PLL pll){
 8000688:	b084      	sub	sp, #16
 800068a:	b4b0      	push	{r4, r5, r7}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for(int i=0; i<126; i++) R[i] = R_default[125-i];
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e00c      	b.n	80006ba <LMX2572_defaultConfig+0x32>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80006a6:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <LMX2572_defaultConfig+0xcc>)
 80006a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ac:	492a      	ldr	r1, [pc, #168]	; (8000758 <LMX2572_defaultConfig+0xd0>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b7d      	cmp	r3, #125	; 0x7d
 80006be:	ddef      	ble.n	80006a0 <LMX2572_defaultConfig+0x18>

	pll.frequency = PLL_DEFAULT_frequency;
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <LMX2572_defaultConfig+0xd4>)
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
	pll.power = PLL_DEFAULT_power;
 80006c4:	f06f 0309 	mvn.w	r3, #9
 80006c8:	62bb      	str	r3, [r7, #40]	; 0x28
	pll.fosc = PLL_DEFAULT_fosc;
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <LMX2572_defaultConfig+0xd8>)
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
	pll.doubler = PLL_DEFAULT_doubler;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	pll.r_pre = PLL_DEFAULT_r_pre;
 80006d4:	2301      	movs	r3, #1
 80006d6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	pll.r = PLL_DEFAULT_r;
 80006da:	2301      	movs	r3, #1
 80006dc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	pll.mult = PLL_DEFAULT_mult;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	pll.CPG = PLL_DEFAULT_CPG;
 80006e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	pll.VCO = PLL_DEFAULT_VCO;
 80006ee:	2304      	movs	r3, #4
 80006f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	pll.VCO_force = PLL_DEFAULT_VCO_force;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	pll.MASH_order = PLL_DEFAULT_MASH_order;
 80006fa:	2303      	movs	r3, #3
 80006fc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	pll.PFD_DLY_SEL = PLL_DEFAULT_PFD_DLY_SEL;
 8000700:	2303      	movs	r3, #3
 8000702:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	pll.chdiv = PLL_DEFAULT_chdiv;
 8000706:	2302      	movs	r3, #2
 8000708:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	pll.out_mux_a = PLL_DEFAULT_out_mux_a;
 800070c:	2301      	movs	r3, #1
 800070e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	pll.out_mux_b = PLL_DEFAULT_out_mux_b;
 8000712:	2301      	movs	r3, #1
 8000714:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	pll.out_pd_a = PLL_DEFAULT_out_pd_a;
 8000718:	2301      	movs	r3, #1
 800071a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	pll.out_pd_b = PLL_DEFAULT_out_pd_b;
 800071e:	2301      	movs	r3, #1
 8000720:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	pll.out_pwr_a = PLL_DEFAULT_out_pwr_a;
 8000724:	2300      	movs	r3, #0
 8000726:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	pll.out_pwr_b = PLL_DEFAULT_out_pwr_b;
 800072a:	2300      	movs	r3, #0
 800072c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	return pll;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	461d      	mov	r5, r3
 8000734:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	602b      	str	r3, [r5, #0]
}
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bcb0      	pop	{r4, r5, r7}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	20000000 	.word	0x20000000
 8000758:	20000220 	.word	0x20000220
 800075c:	459c4000 	.word	0x459c4000
 8000760:	41c80000 	.word	0x41c80000

08000764 <LMX2572_set_frequency>:
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
}

// Sets PLL N, DEN and NUM registers
void LMX2572_set_frequency(struct PLL pll) {
 8000764:	b084      	sub	sp, #16
 8000766:	b490      	push	{r4, r7}
 8000768:	af00      	add	r7, sp, #0
 800076a:	f107 0408 	add.w	r4, r7, #8
 800076e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Sets N
	R[34] &= ~(0x07 << 0);
 8000772:	4b33      	ldr	r3, [pc, #204]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000778:	f023 0307 	bic.w	r3, r3, #7
 800077c:	4a30      	ldr	r2, [pc, #192]	; (8000840 <LMX2572_set_frequency+0xdc>)
 800077e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	R[34] |= (((pll.n >> 16) & 0x07) << 0);
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000788:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <LMX2572_set_frequency+0xdc>)
 800078a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	R[36] &= ~(0xFFFF << 0);
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000794:	0c1b      	lsrs	r3, r3, #16
 8000796:	041b      	lsls	r3, r3, #16
 8000798:	4a29      	ldr	r2, [pc, #164]	; (8000840 <LMX2572_set_frequency+0xdc>)
 800079a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	R[36] |= ((pll.n & 0xFFFF) << 0);
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007a4:	8c3a      	ldrh	r2, [r7, #32]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	4a25      	ldr	r2, [pc, #148]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	// Sets DEN
	R[38] &= ~(0xFFFF << 0);
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007b4:	0c1b      	lsrs	r3, r3, #16
 80007b6:	041b      	lsls	r3, r3, #16
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	R[38] |= ((pll.den >> 16) << 0);
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007c0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80007c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c6:	0c1b      	lsrs	r3, r3, #16
 80007c8:	4313      	orrs	r3, r2
 80007ca:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	R[39] &= ~(0xFFFF << 0);
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	041b      	lsls	r3, r3, #16
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	R[39] |= ((pll.den & 0x0000FFFF) << 0);
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007e2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80007e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	// Sets NUM
	R[42] &= ~(0xFFFF << 0);
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80007f8:	0c1b      	lsrs	r3, r3, #16
 80007fa:	041b      	lsls	r3, r3, #16
 80007fc:	4a10      	ldr	r2, [pc, #64]	; (8000840 <LMX2572_set_frequency+0xdc>)
 80007fe:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	R[42] |= ((pll.num >> 16) << 0);
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000804:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8000808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	4313      	orrs	r3, r2
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000810:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	R[43] &= ~(0xFFFF << 0);
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800081a:	0c1b      	lsrs	r3, r3, #16
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000820:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	R[43] |= ((pll.num & 0x0000FFFF) << 0);
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000826:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082c:	b29b      	uxth	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <LMX2572_set_frequency+0xdc>)
 8000832:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc90      	pop	{r4, r7}
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr
 8000840:	20000220 	.word	0x20000220

08000844 <LMX2752_vco_assist>:
	else if (pll.CPG == 6250) 	R[14] |= 0x0070;		// CPG = 14
	else if (pll.CPG == 6875) 	R[14] |= 0x0078;		// CPG = 15
}

// Sets VCO Partial Assist
void LMX2752_vco_assist(struct PLL pll){
 8000844:	b084      	sub	sp, #16
 8000846:	b480      	push	{r7}
 8000848:	b087      	sub	sp, #28
 800084a:	af00      	add	r7, sp, #0
 800084c:	f107 0c20 	add.w	ip, r7, #32
 8000850:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t CMax;
	uint16_t AMin;
	uint16_t AMax;

	// Select VCO
	if	((pll.Fvco > 3200) || (pll.Fvco < 3650)) {
 8000854:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000858:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8000b1c <LMX2752_vco_assist+0x2d8>
 800085c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	dc08      	bgt.n	8000878 <LMX2752_vco_assist+0x34>
 8000866:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800086a:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8000b20 <LMX2752_vco_assist+0x2dc>
 800086e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000876:	d511      	bpl.n	800089c <LMX2752_vco_assist+0x58>
		pll.VCO  = 1;				// VCO1
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		fMin = 3200;
 800087e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8000882:	82fb      	strh	r3, [r7, #22]
		fMax = 3650;
 8000884:	f640 6342 	movw	r3, #3650	; 0xe42
 8000888:	82bb      	strh	r3, [r7, #20]
		CMin = 131;
 800088a:	2383      	movs	r3, #131	; 0x83
 800088c:	827b      	strh	r3, [r7, #18]
		CMax = 19;
 800088e:	2313      	movs	r3, #19
 8000890:	823b      	strh	r3, [r7, #16]
		AMin = 138;
 8000892:	238a      	movs	r3, #138	; 0x8a
 8000894:	81fb      	strh	r3, [r7, #14]
		AMax = 137;
 8000896:	2389      	movs	r3, #137	; 0x89
 8000898:	81bb      	strh	r3, [r7, #12]
 800089a:	e0b3      	b.n	8000a04 <LMX2752_vco_assist+0x1c0>
	} else if ((pll.Fvco >= 3650) || (pll.Fvco < 4200)) {
 800089c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008a0:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8000b20 <LMX2752_vco_assist+0x2dc>
 80008a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ac:	da08      	bge.n	80008c0 <LMX2752_vco_assist+0x7c>
 80008ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008b2:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8000b24 <LMX2752_vco_assist+0x2e0>
 80008b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008be:	d511      	bpl.n	80008e4 <LMX2752_vco_assist+0xa0>
		pll.VCO  = 2;	// VCO2
 80008c0:	2302      	movs	r3, #2
 80008c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		fMin = 3650;
 80008c6:	f640 6342 	movw	r3, #3650	; 0xe42
 80008ca:	82fb      	strh	r3, [r7, #22]
		fMax = 4200;
 80008cc:	f241 0368 	movw	r3, #4200	; 0x1068
 80008d0:	82bb      	strh	r3, [r7, #20]
		CMin = 143;
 80008d2:	238f      	movs	r3, #143	; 0x8f
 80008d4:	827b      	strh	r3, [r7, #18]
		CMax = 25;
 80008d6:	2319      	movs	r3, #25
 80008d8:	823b      	strh	r3, [r7, #16]
		AMin = 162;
 80008da:	23a2      	movs	r3, #162	; 0xa2
 80008dc:	81fb      	strh	r3, [r7, #14]
		AMax = 142;
 80008de:	238e      	movs	r3, #142	; 0x8e
 80008e0:	81bb      	strh	r3, [r7, #12]
 80008e2:	e08f      	b.n	8000a04 <LMX2752_vco_assist+0x1c0>
	} else if ((pll.Fvco >= 4200) || (pll.Fvco < 4650)) {
 80008e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008e8:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8000b24 <LMX2752_vco_assist+0x2e0>
 80008ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f4:	da08      	bge.n	8000908 <LMX2752_vco_assist+0xc4>
 80008f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80008fa:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8000b28 <LMX2752_vco_assist+0x2e4>
 80008fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	d511      	bpl.n	800092c <LMX2752_vco_assist+0xe8>
		pll.VCO  = 3;	// VCO3
 8000908:	2303      	movs	r3, #3
 800090a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		fMin = 4200;
 800090e:	f241 0368 	movw	r3, #4200	; 0x1068
 8000912:	82fb      	strh	r3, [r7, #22]
		fMax = 4650;
 8000914:	f241 232a 	movw	r3, #4650	; 0x122a
 8000918:	82bb      	strh	r3, [r7, #20]
		CMin = 135;
 800091a:	2387      	movs	r3, #135	; 0x87
 800091c:	827b      	strh	r3, [r7, #18]
		CMax = 34;
 800091e:	2322      	movs	r3, #34	; 0x22
 8000920:	823b      	strh	r3, [r7, #16]
		AMin = 126;
 8000922:	237e      	movs	r3, #126	; 0x7e
 8000924:	81fb      	strh	r3, [r7, #14]
		AMax = 114;
 8000926:	2372      	movs	r3, #114	; 0x72
 8000928:	81bb      	strh	r3, [r7, #12]
 800092a:	e06b      	b.n	8000a04 <LMX2752_vco_assist+0x1c0>
	} else if ((pll.Fvco >= 4650) || (pll.Fvco < 5200)) {
 800092c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000930:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8000b28 <LMX2752_vco_assist+0x2e4>
 8000934:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800093c:	da08      	bge.n	8000950 <LMX2752_vco_assist+0x10c>
 800093e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000942:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8000b2c <LMX2752_vco_assist+0x2e8>
 8000946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094e:	d511      	bpl.n	8000974 <LMX2752_vco_assist+0x130>
		pll.VCO  = 4;	// VCO4
 8000950:	2304      	movs	r3, #4
 8000952:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		fMin = 4650;
 8000956:	f241 232a 	movw	r3, #4650	; 0x122a
 800095a:	82fb      	strh	r3, [r7, #22]
		fMax = 5200;
 800095c:	f241 4350 	movw	r3, #5200	; 0x1450
 8000960:	82bb      	strh	r3, [r7, #20]
		CMin = 136;
 8000962:	2388      	movs	r3, #136	; 0x88
 8000964:	827b      	strh	r3, [r7, #18]
		CMax = 25;
 8000966:	2319      	movs	r3, #25
 8000968:	823b      	strh	r3, [r7, #16]
		AMin = 195;
 800096a:	23c3      	movs	r3, #195	; 0xc3
 800096c:	81fb      	strh	r3, [r7, #14]
		AMax = 172;
 800096e:	23ac      	movs	r3, #172	; 0xac
 8000970:	81bb      	strh	r3, [r7, #12]
 8000972:	e047      	b.n	8000a04 <LMX2752_vco_assist+0x1c0>
	} else if ((pll.Fvco >= 5200) || (pll.Fvco < 5750)) {
 8000974:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000978:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000b2c <LMX2752_vco_assist+0x2e8>
 800097c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000984:	da08      	bge.n	8000998 <LMX2752_vco_assist+0x154>
 8000986:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800098a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8000b30 <LMX2752_vco_assist+0x2ec>
 800098e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000996:	d511      	bpl.n	80009bc <LMX2752_vco_assist+0x178>
		pll.VCO  = 5;	// VCO5
 8000998:	2305      	movs	r3, #5
 800099a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		fMin = 5200;
 800099e:	f241 4350 	movw	r3, #5200	; 0x1450
 80009a2:	82fb      	strh	r3, [r7, #22]
		fMax = 5750;
 80009a4:	f241 6376 	movw	r3, #5750	; 0x1676
 80009a8:	82bb      	strh	r3, [r7, #20]
		CMin = 133;
 80009aa:	2385      	movs	r3, #133	; 0x85
 80009ac:	827b      	strh	r3, [r7, #18]
		CMax = 20;
 80009ae:	2314      	movs	r3, #20
 80009b0:	823b      	strh	r3, [r7, #16]
		AMin = 190;
 80009b2:	23be      	movs	r3, #190	; 0xbe
 80009b4:	81fb      	strh	r3, [r7, #14]
		AMax = 163;
 80009b6:	23a3      	movs	r3, #163	; 0xa3
 80009b8:	81bb      	strh	r3, [r7, #12]
 80009ba:	e023      	b.n	8000a04 <LMX2752_vco_assist+0x1c0>
	} else if ((pll.Fvco >= 5750) || (pll.Fvco <= 6400)) {
 80009bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80009c0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000b30 <LMX2752_vco_assist+0x2ec>
 80009c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009cc:	da08      	bge.n	80009e0 <LMX2752_vco_assist+0x19c>
 80009ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80009d2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000b34 <LMX2752_vco_assist+0x2f0>
 80009d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009de:	d811      	bhi.n	8000a04 <LMX2752_vco_assist+0x1c0>
		pll.VCO  = 6;	// VCO6
 80009e0:	2306      	movs	r3, #6
 80009e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		fMin = 5750;
 80009e6:	f241 6376 	movw	r3, #5750	; 0x1676
 80009ea:	82fb      	strh	r3, [r7, #22]
		fMax = 6400;
 80009ec:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80009f0:	82bb      	strh	r3, [r7, #20]
		CMin = 151;
 80009f2:	2397      	movs	r3, #151	; 0x97
 80009f4:	827b      	strh	r3, [r7, #18]
		CMax = 27;
 80009f6:	231b      	movs	r3, #27
 80009f8:	823b      	strh	r3, [r7, #16]
		AMin = 256;
 80009fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fe:	81fb      	strh	r3, [r7, #14]
		AMax = 204;
 8000a00:	23cc      	movs	r3, #204	; 0xcc
 8000a02:	81bb      	strh	r3, [r7, #12]
	}

	R[20] &= ~(0xF << 10);
 8000a04:	4b4c      	ldr	r3, [pc, #304]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a08:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8000a0c:	4a4a      	ldr	r2, [pc, #296]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a0e:	6513      	str	r3, [r2, #80]	; 0x50
	R[20] |= (pll.VCO << 11);
 8000a10:	4b49      	ldr	r3, [pc, #292]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a14:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000a18:	02d2      	lsls	r2, r2, #11
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	4a46      	ldr	r2, [pc, #280]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a1e:	6513      	str	r3, [r2, #80]	; 0x50

	// Forces the VCO to use the core specified by VCO_SEL
	if (pll.VCO_force == 1)	R[20] |= (1 << 10);
 8000a20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d105      	bne.n	8000a34 <LMX2752_vco_assist+0x1f0>
 8000a28:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a30:	4a41      	ldr	r2, [pc, #260]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a32:	6513      	str	r3, [r2, #80]	; 0x50

	// VCO_CAPCTRL_STRT = Round[CMin – (fVCO – fMin) × (CMin – CMax) / (fMax – fMin)]
	VCO_CAPCTRL_STRT = CMin-(pll.Fvco-fMin)*(CMin-CMax)/(fMax-fMin);
 8000a34:	8a7b      	ldrh	r3, [r7, #18]
 8000a36:	ee07 3a90 	vmov	s15, r3
 8000a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a3e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000a42:	8afb      	ldrh	r3, [r7, #22]
 8000a44:	ee07 3a90 	vmov	s15, r3
 8000a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000a50:	8a7a      	ldrh	r2, [r7, #18]
 8000a52:	8a3b      	ldrh	r3, [r7, #16]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000a62:	8aba      	ldrh	r2, [r7, #20]
 8000a64:	8afb      	ldrh	r3, [r7, #22]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a70:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a80:	793b      	ldrb	r3, [r7, #4]
 8000a82:	72fb      	strb	r3, [r7, #11]
	R[78] &= ~(0xFF << 1);
 8000a84:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a86:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a8a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a90:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
	R[78] |= (VCO_CAPCTRL_STRT << 1);
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000a96:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000a9a:	7afa      	ldrb	r2, [r7, #11]
 8000a9c:	0052      	lsls	r2, r2, #1
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	4a25      	ldr	r2, [pc, #148]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000aa2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138

	// VCO_DACISET_STRT = Round[AMin – (fVCO – fMin) × (AMin – AMax) / (fMax – fMin)]
	VCO_DACISET_STRT = AMin-(pll.Fvco-fMin)*(AMin-AMax)/(fMax-fMin);
 8000aa6:	89fb      	ldrh	r3, [r7, #14]
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000ab4:	8afb      	ldrh	r3, [r7, #22]
 8000ab6:	ee07 3a90 	vmov	s15, r3
 8000aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000abe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ac2:	89fa      	ldrh	r2, [r7, #14]
 8000ac4:	89bb      	ldrh	r3, [r7, #12]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	ee07 3a90 	vmov	s15, r3
 8000acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8000ad4:	8aba      	ldrh	r2, [r7, #20]
 8000ad6:	8afb      	ldrh	r3, [r7, #22]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ae2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000aee:	edc7 7a01 	vstr	s15, [r7, #4]
 8000af2:	793b      	ldrb	r3, [r7, #4]
 8000af4:	72bb      	strb	r3, [r7, #10]
	R[17] &= ~(0xFF << 0);
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
	R[17] |= (VCO_DACISET_STRT << 0);
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b06:	7abb      	ldrb	r3, [r7, #10]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <LMX2752_vco_assist+0x2f4>)
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b0e:	bf00      	nop
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr
 8000b1c:	45480000 	.word	0x45480000
 8000b20:	45642000 	.word	0x45642000
 8000b24:	45834000 	.word	0x45834000
 8000b28:	45915000 	.word	0x45915000
 8000b2c:	45a28000 	.word	0x45a28000
 8000b30:	45b3b000 	.word	0x45b3b000
 8000b34:	45c80000 	.word	0x45c80000
 8000b38:	20000220 	.word	0x20000220

08000b3c <LMX2572_calibrate>:

// Calibrates VCO
void LMX2572_calibrate(struct PLL pll) {
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	b490      	push	{r4, r7}
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	f107 0408 	add.w	r4, r7, #8
 8000b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[0] |= (0x01 << 3);
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <LMX2572_calibrate+0x24>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <LMX2572_calibrate+0x24>)
 8000b54:	6013      	str	r3, [r2, #0]
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc90      	pop	{r4, r7}
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr
 8000b60:	20000220 	.word	0x20000220

08000b64 <LMX2572_switchOn_RFoutA>:

// Turns on RFout A output
void LMX2572_switchOn_RFoutA(struct PLL pll){
 8000b64:	b084      	sub	sp, #16
 8000b66:	b490      	push	{r4, r7}
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	f107 0408 	add.w	r4, r7, #8
 8000b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[44] &= ~(0x01 << 6);
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <LMX2572_switchOn_RFoutA+0x30>)
 8000b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b7c:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <LMX2572_switchOn_RFoutA+0x30>)
 8000b7e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	pll.out_pd_a = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc90      	pop	{r4, r7}
 8000b8e:	b004      	add	sp, #16
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000220 	.word	0x20000220

08000b98 <LMX2572_switchOff_RFoutA>:

// Turns off RFout A output
void LMX2572_switchOff_RFoutA(struct PLL pll){
 8000b98:	b084      	sub	sp, #16
 8000b9a:	b490      	push	{r4, r7}
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	f107 0408 	add.w	r4, r7, #8
 8000ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[44] |= (0x01 << 6);
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <LMX2572_switchOff_RFoutA+0x30>)
 8000ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <LMX2572_switchOff_RFoutA+0x30>)
 8000bb2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	pll.out_pd_a = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc90      	pop	{r4, r7}
 8000bc2:	b004      	add	sp, #16
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000220 	.word	0x20000220

08000bcc <LMX2572_frequency>:

	return pll;
}

// Tunes PLL to desired frequency in MHz
PLL LMX2572_frequency(struct PLL pll, SPI_HandleTypeDef *hspi, float frequency){
 8000bcc:	b084      	sub	sp, #16
 8000bce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd0:	b08d      	sub	sp, #52	; 0x34
 8000bd2:	af0a      	add	r7, sp, #40	; 0x28
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000bde:	ed87 0a00 	vstr	s0, [r7]
	pll.frequency = frequency;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
	pll = LMX2572_det_param(pll);
 8000be6:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8000bea:	466d      	mov	r5, sp
 8000bec:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c06:	4630      	mov	r0, r6
 8000c08:	f7ff fcba 	bl	8000580 <LMX2572_det_param>

	LMX2572_set_frequency(pll);
 8000c0c:	466d      	mov	r5, sp
 8000c0e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	602b      	str	r3, [r5, #0]
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c24:	f7ff fd9e 	bl	8000764 <LMX2572_set_frequency>
	LMX2752_vco_assist(pll);
 8000c28:	466d      	mov	r5, sp
 8000c2a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	602b      	str	r3, [r5, #0]
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c40:	f7ff fe00 	bl	8000844 <LMX2752_vco_assist>
	LMX2572_calibrate(pll);
 8000c44:	466d      	mov	r5, sp
 8000c46:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	602b      	str	r3, [r5, #0]
 8000c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c5c:	f7ff ff6e 	bl	8000b3c <LMX2572_calibrate>

	LMX2572_load_regs(hspi);
 8000c60:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000c62:	f7ff fc5f 	bl	8000524 <LMX2572_load_regs>

	return pll;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	461d      	mov	r5, r3
 8000c6a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	602b      	str	r3, [r5, #0]
}
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8e:	b0a9      	sub	sp, #164	; 0xa4
 8000c90:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c92:	f000 fb3d 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c96:	f000 f8a9 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9a:	f000 f967 	bl	8000f6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c9e:	f000 f935 	bl	8000f0c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ca2:	f000 f8f5 	bl	8000e90 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  PLL mypll;

  // Test upon connection (5200 MHz)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		// Tx_CE HIGH
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f000 fe5e 	bl	8001970 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);		// LO_EN HIGH
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	4847      	ldr	r0, [pc, #284]	; (8000dd8 <main+0x14c>)
 8000cba:	f000 fe59 	bl	8001970 <HAL_GPIO_WritePin>
  mypll = LMX2572_defaultConfig(mypll);
 8000cbe:	f107 0638 	add.w	r6, r7, #56	; 0x38
 8000cc2:	466d      	mov	r5, sp
 8000cc4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cde:	4630      	mov	r0, r6
 8000ce0:	f7ff fcd2 	bl	8000688 <LMX2572_defaultConfig>
  LMX2572_load_regs(&hspi1);
 8000ce4:	483d      	ldr	r0, [pc, #244]	; (8000ddc <main+0x150>)
 8000ce6:	f7ff fc1d 	bl	8000524 <LMX2572_load_regs>

  LMX2572_switchOff_RFoutA(mypll);
 8000cea:	466d      	mov	r5, sp
 8000cec:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	602b      	str	r3, [r5, #0]
 8000cfc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d02:	f7ff ff49 	bl	8000b98 <LMX2572_switchOff_RFoutA>

  mypll = LMX2572_frequency(mypll, &hspi1, 5800);
 8000d06:	463e      	mov	r6, r7
 8000d08:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <main+0x150>)
 8000d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8000d0c:	466d      	mov	r5, sp
 8000d0e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d28:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8000de0 <main+0x154>
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	f7ff ff4d 	bl	8000bcc <LMX2572_frequency>
 8000d32:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000d36:	463d      	mov	r5, r7
 8000d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d44:	682b      	ldr	r3, [r5, #0]
 8000d46:	6023      	str	r3, [r4, #0]

  LMX2572_switchOn_RFoutA(mypll);
 8000d48:	466d      	mov	r5, sp
 8000d4a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d56:	6823      	ldr	r3, [r4, #0]
 8000d58:	602b      	str	r3, [r5, #0]
 8000d5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d60:	f7ff ff00 	bl	8000b64 <LMX2572_switchOn_RFoutA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(float f=5600; f<6000; f++){
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <main+0x158>)
 8000d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000d68:	e02b      	b.n	8000dc2 <main+0x136>
		  HAL_Delay(100);
 8000d6a:	2064      	movs	r0, #100	; 0x64
 8000d6c:	f000 fb4c 	bl	8001408 <HAL_Delay>
//		  LMX2572_switchOff_RFoutA(mypll);
		  mypll = LMX2572_frequency(mypll, &hspi1, f);
 8000d70:	463e      	mov	r6, r7
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <main+0x150>)
 8000d74:	930a      	str	r3, [sp, #40]	; 0x28
 8000d76:	466d      	mov	r5, sp
 8000d78:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d88:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d92:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8000d96:	4630      	mov	r0, r6
 8000d98:	f7ff ff18 	bl	8000bcc <LMX2572_frequency>
 8000d9c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000da0:	463d      	mov	r5, r7
 8000da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dae:	682b      	ldr	r3, [r5, #0]
 8000db0:	6023      	str	r3, [r4, #0]
	  for(float f=5600; f<6000; f++){
 8000db2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000dba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000dbe:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 8000dc2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000dc6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000de8 <main+0x15c>
 8000dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	d4ca      	bmi.n	8000d6a <main+0xde>
 8000dd4:	e7c6      	b.n	8000d64 <main+0xd8>
 8000dd6:	bf00      	nop
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	20000418 	.word	0x20000418
 8000de0:	45b54000 	.word	0x45b54000
 8000de4:	45af0000 	.word	0x45af0000
 8000de8:	45bb8000 	.word	0x45bb8000

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b096      	sub	sp, #88	; 0x58
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2244      	movs	r2, #68	; 0x44
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f003 f8b2 	bl	8003f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e12:	f000 fdd3 	bl	80019bc <HAL_PWREx_ControlVoltageScaling>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e1c:	f000 f926 	bl	800106c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e20:	2302      	movs	r3, #2
 8000e22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2a:	2310      	movs	r3, #16
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e32:	2302      	movs	r3, #2
 8000e34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e36:	2301      	movs	r3, #1
 8000e38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e3a:	230a      	movs	r3, #10
 8000e3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e3e:	2307      	movs	r3, #7
 8000e40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fe0a 	bl	8001a68 <HAL_RCC_OscConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e5a:	f000 f907 	bl	800106c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e62:	2303      	movs	r3, #3
 8000e64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	2104      	movs	r1, #4
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f9dc 	bl	8002234 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e82:	f000 f8f3 	bl	800106c <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3758      	adds	r7, #88	; 0x58
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000e96:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <MX_SPI1_Init+0x78>)
 8000e98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000eaa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000eae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ec6:	2228      	movs	r2, #40	; 0x28
 8000ec8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ede:	2207      	movs	r2, #7
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_SPI1_Init+0x74>)
 8000ef0:	f002 f862 	bl	8002fb8 <HAL_SPI_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000efa:	f000 f8b7 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000418 	.word	0x20000418
 8000f08:	40013000 	.word	0x40013000

08000f0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <MX_USART2_UART_Init+0x5c>)
 8000f14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f32:	220c      	movs	r2, #12
 8000f34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_USART2_UART_Init+0x58>)
 8000f50:	f002 fba4 	bl	800369c <HAL_UART_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f5a:	f000 f887 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000047c 	.word	0x2000047c
 8000f68:	40004400 	.word	0x40004400

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <MX_GPIO_Init+0xf0>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	4a35      	ldr	r2, [pc, #212]	; (800105c <MX_GPIO_Init+0xf0>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8e:	4b33      	ldr	r3, [pc, #204]	; (800105c <MX_GPIO_Init+0xf0>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9a:	4b30      	ldr	r3, [pc, #192]	; (800105c <MX_GPIO_Init+0xf0>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	4a2f      	ldr	r2, [pc, #188]	; (800105c <MX_GPIO_Init+0xf0>)
 8000fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <MX_GPIO_Init+0xf0>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <MX_GPIO_Init+0xf0>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a29      	ldr	r2, [pc, #164]	; (800105c <MX_GPIO_Init+0xf0>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <MX_GPIO_Init+0xf0>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_GPIO_Init+0xf0>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fce:	4a23      	ldr	r2, [pc, #140]	; (800105c <MX_GPIO_Init+0xf0>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_GPIO_Init+0xf0>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CSB_Pin|PLL_CSB_Pin|LO_EN_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000fe8:	481d      	ldr	r0, [pc, #116]	; (8001060 <MX_GPIO_Init+0xf4>)
 8000fea:	f000 fcc1 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Tx_CE_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f000 fcba 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_GPIO_Init+0xf8>)
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	4815      	ldr	r0, [pc, #84]	; (8001068 <MX_GPIO_Init+0xfc>)
 8001012:	f000 fb03 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CSB_Pin PLL_CSB_Pin LO_EN_Pin */
  GPIO_InitStruct.Pin = T_CSB_Pin|PLL_CSB_Pin|LO_EN_Pin;
 8001016:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_GPIO_Init+0xf4>)
 8001030:	f000 faf4 	bl	800161c <HAL_GPIO_Init>

  /*Configure GPIO pins : Tx_CE_Pin PA9 */
  GPIO_InitStruct.Pin = Tx_CE_Pin|GPIO_PIN_9;
 8001034:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f000 fae4 	bl	800161c <HAL_GPIO_Init>

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	48000400 	.word	0x48000400
 8001064:	10210000 	.word	0x10210000
 8001068:	48000800 	.word	0x48000800

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_MspInit+0x44>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <HAL_MspInit+0x44>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6613      	str	r3, [r2, #96]	; 0x60
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_MspInit+0x44>)
 800108c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_MspInit+0x44>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_MspInit+0x44>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6593      	str	r3, [r2, #88]	; 0x58
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_MspInit+0x44>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a17      	ldr	r2, [pc, #92]	; (800113c <HAL_SPI_MspInit+0x7c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d128      	bne.n	8001134 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_SPI_MspInit+0x80>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <HAL_SPI_MspInit+0x80>)
 80010e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_SPI_MspInit+0x80>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_SPI_MspInit+0x80>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <HAL_SPI_MspInit+0x80>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_SPI_MspInit+0x80>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001112:	23e0      	movs	r3, #224	; 0xe0
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2303      	movs	r3, #3
 8001120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001122:	2305      	movs	r3, #5
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 fa74 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40013000 	.word	0x40013000
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0ac      	sub	sp, #176	; 0xb0
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2288      	movs	r2, #136	; 0x88
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fefd 	bl	8003f64 <memset>
  if(huart->Instance==USART2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <HAL_UART_MspInit+0xb0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d13b      	bne.n	80011ec <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001178:	2300      	movs	r3, #0
 800117a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fa5d 	bl	8002640 <HAL_RCCEx_PeriphCLKConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800118c:	f7ff ff6e 	bl	800106c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_UART_MspInit+0xb4>)
 8001192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_UART_MspInit+0xb4>)
 8001196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119a:	6593      	str	r3, [r2, #88]	; 0x58
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_UART_MspInit+0xb4>)
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_UART_MspInit+0xb4>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <HAL_UART_MspInit+0xb4>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_UART_MspInit+0xb4>)
 80011b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011c0:	230c      	movs	r3, #12
 80011c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d2:	2303      	movs	r3, #3
 80011d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d8:	2307      	movs	r3, #7
 80011da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f000 fa18 	bl	800161c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	37b0      	adds	r7, #176	; 0xb0
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40004400 	.word	0x40004400
 80011f8:	40021000 	.word	0x40021000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f8be 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <SystemInit+0x64>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <SystemInit+0x64>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <SystemInit+0x68>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <SystemInit+0x68>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <SystemInit+0x68>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <SystemInit+0x68>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <SystemInit+0x68>)
 800127c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001280:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001284:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <SystemInit+0x68>)
 8001288:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <SystemInit+0x68>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <SystemInit+0x68>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <SystemInit+0x68>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SystemInit+0x64>)
 80012a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a6:	609a      	str	r2, [r3, #8]
#endif
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	40021000 	.word	0x40021000

080012bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c0:	f7ff ffc6 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012c6:	e003      	b.n	80012d0 <LoopCopyDataInit>

080012c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ce:	3104      	adds	r1, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <LoopForever+0xe>)
	adds	r2, r0, r1
 80012d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012d8:	d3f6      	bcc.n	80012c8 <CopyDataInit>
	ldr	r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012dc:	e002      	b.n	80012e4 <LoopFillZerobss>

080012de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012e0:	f842 3b04 	str.w	r3, [r2], #4

080012e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <LoopForever+0x16>)
	cmp	r2, r3
 80012e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012e8:	d3f9      	bcc.n	80012de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f002 fe17 	bl	8003f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ee:	f7ff fccd 	bl	8000c8c <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80012f8:	08003fe8 	.word	0x08003fe8
	ldr	r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001300:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8001304:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 8001308:	20000504 	.word	0x20000504

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <HAL_Init+0x3c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <HAL_Init+0x3c>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001326:	2003      	movs	r0, #3
 8001328:	f000 f944 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132c:	2000      	movs	r0, #0
 800132e:	f000 f80f 	bl	8001350 <HAL_InitTick>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	e001      	b.n	8001342 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800133e:	f7ff fe9b 	bl	8001078 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001342:	79fb      	ldrb	r3, [r7, #7]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40022000 	.word	0x40022000

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800135c:	4b17      	ldr	r3, [pc, #92]	; (80013bc <HAL_InitTick+0x6c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d023      	beq.n	80013ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_InitTick+0x70>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_InitTick+0x6c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f941 	bl	8001602 <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10f      	bne.n	80013a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d809      	bhi.n	80013a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 f919 	bl	80015ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_InitTick+0x74>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e007      	b.n	80013b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e004      	b.n	80013b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	e001      	b.n	80013b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000200 	.word	0x20000200
 80013c0:	200001f8 	.word	0x200001f8
 80013c4:	200001fc 	.word	0x200001fc

080013c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x20>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x24>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_IncTick+0x24>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000200 	.word	0x20000200
 80013ec:	20000500 	.word	0x20000500

080013f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_GetTick+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000500 	.word	0x20000500

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff ffee 	bl	80013f0 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffde 	bl	80013f0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000200 	.word	0x20000200

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	db0a      	blt.n	80014de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	490c      	ldr	r1, [pc, #48]	; (8001500 <__NVIC_SetPriority+0x4c>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014dc:	e00a      	b.n	80014f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4908      	ldr	r1, [pc, #32]	; (8001504 <__NVIC_SetPriority+0x50>)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	f003 030f 	and.w	r3, r3, #15
 80014ea:	3b04      	subs	r3, #4
 80014ec:	0112      	lsls	r2, r2, #4
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	440b      	add	r3, r1
 80014f2:	761a      	strb	r2, [r3, #24]
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001508:	b480      	push	{r7}
 800150a:	b089      	sub	sp, #36	; 0x24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f1c3 0307 	rsb	r3, r3, #7
 8001522:	2b04      	cmp	r3, #4
 8001524:	bf28      	it	cs
 8001526:	2304      	movcs	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3304      	adds	r3, #4
 800152e:	2b06      	cmp	r3, #6
 8001530:	d902      	bls.n	8001538 <NVIC_EncodePriority+0x30>
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3b03      	subs	r3, #3
 8001536:	e000      	b.n	800153a <NVIC_EncodePriority+0x32>
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	f04f 32ff 	mov.w	r2, #4294967295
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43da      	mvns	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001550:	f04f 31ff 	mov.w	r1, #4294967295
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43d9      	mvns	r1, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	4313      	orrs	r3, r2
         );
}
 8001562:	4618      	mov	r0, r3
 8001564:	3724      	adds	r7, #36	; 0x24
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff8e 	bl	80014b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff47 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff5c 	bl	8001498 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff8e 	bl	8001508 <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5d 	bl	80014b4 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffb0 	bl	8001570 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800162a:	e17f      	b.n	800192c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	4013      	ands	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8171 	beq.w	8001926 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d00b      	beq.n	8001664 <HAL_GPIO_Init+0x48>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d007      	beq.n	8001664 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001658:	2b11      	cmp	r3, #17
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b12      	cmp	r3, #18
 8001662:	d130      	bne.n	80016c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169a:	2201      	movs	r2, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	f003 0201 	and.w	r2, r3, #1
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d118      	bne.n	8001704 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016d8:	2201      	movs	r2, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	08db      	lsrs	r3, r3, #3
 80016ee:	f003 0201 	and.w	r2, r3, #1
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x128>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	6939      	ldr	r1, [r7, #16]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80ac 	beq.w	8001926 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	4b5f      	ldr	r3, [pc, #380]	; (800194c <HAL_GPIO_Init+0x330>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d2:	4a5e      	ldr	r2, [pc, #376]	; (800194c <HAL_GPIO_Init+0x330>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6613      	str	r3, [r2, #96]	; 0x60
 80017da:	4b5c      	ldr	r3, [pc, #368]	; (800194c <HAL_GPIO_Init+0x330>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017e6:	4a5a      	ldr	r2, [pc, #360]	; (8001950 <HAL_GPIO_Init+0x334>)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3302      	adds	r3, #2
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001810:	d025      	beq.n	800185e <HAL_GPIO_Init+0x242>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4f      	ldr	r2, [pc, #316]	; (8001954 <HAL_GPIO_Init+0x338>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_Init+0x23e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4e      	ldr	r2, [pc, #312]	; (8001958 <HAL_GPIO_Init+0x33c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x23a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4d      	ldr	r2, [pc, #308]	; (800195c <HAL_GPIO_Init+0x340>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x236>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <HAL_GPIO_Init+0x344>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x232>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4b      	ldr	r2, [pc, #300]	; (8001964 <HAL_GPIO_Init+0x348>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x22e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4a      	ldr	r2, [pc, #296]	; (8001968 <HAL_GPIO_Init+0x34c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x22a>
 8001842:	2306      	movs	r3, #6
 8001844:	e00c      	b.n	8001860 <HAL_GPIO_Init+0x244>
 8001846:	2307      	movs	r3, #7
 8001848:	e00a      	b.n	8001860 <HAL_GPIO_Init+0x244>
 800184a:	2305      	movs	r3, #5
 800184c:	e008      	b.n	8001860 <HAL_GPIO_Init+0x244>
 800184e:	2304      	movs	r3, #4
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x244>
 8001852:	2303      	movs	r3, #3
 8001854:	e004      	b.n	8001860 <HAL_GPIO_Init+0x244>
 8001856:	2302      	movs	r3, #2
 8001858:	e002      	b.n	8001860 <HAL_GPIO_Init+0x244>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x244>
 800185e:	2300      	movs	r3, #0
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	f002 0203 	and.w	r2, r2, #3
 8001866:	0092      	lsls	r2, r2, #2
 8001868:	4093      	lsls	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001870:	4937      	ldr	r1, [pc, #220]	; (8001950 <HAL_GPIO_Init+0x334>)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_GPIO_Init+0x350>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a2:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_GPIO_Init+0x350>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_GPIO_Init+0x350>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_GPIO_Init+0x350>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_GPIO_Init+0x350>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_GPIO_Init+0x350>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_GPIO_Init+0x350>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_GPIO_Init+0x350>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	f47f ae78 	bne.w	800162c <HAL_GPIO_Init+0x10>
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000
 8001954:	48000400 	.word	0x48000400
 8001958:	48000800 	.word	0x48000800
 800195c:	48000c00 	.word	0x48000c00
 8001960:	48001000 	.word	0x48001000
 8001964:	48001400 	.word	0x48001400
 8001968:	48001800 	.word	0x48001800
 800196c:	40010400 	.word	0x40010400

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800198c:	e002      	b.n	8001994 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40007000 	.word	0x40007000

080019bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ca:	d130      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d8:	d038      	beq.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2232      	movs	r2, #50	; 0x32
 80019f0:	fb02 f303 	mul.w	r3, r2, r3
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0c9b      	lsrs	r3, r3, #18
 80019fc:	3301      	adds	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a00:	e002      	b.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a14:	d102      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f2      	bne.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a28:	d110      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e00f      	b.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3a:	d007      	beq.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	200001f8 	.word	0x200001f8
 8001a64:	431bde83 	.word	0x431bde83

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e3d4      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7a:	4ba1      	ldr	r3, [pc, #644]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a84:	4b9e      	ldr	r3, [pc, #632]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80e4 	beq.w	8001c64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4a>
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	f040 808b 	bne.w	8001bc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	f040 8087 	bne.w	8001bc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab2:	4b93      	ldr	r3, [pc, #588]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x62>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e3ac      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1a      	ldr	r2, [r3, #32]
 8001ace:	4b8c      	ldr	r3, [pc, #560]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x7c>
 8001ada:	4b89      	ldr	r3, [pc, #548]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ae2:	e005      	b.n	8001af0 <HAL_RCC_OscConfig+0x88>
 8001ae4:	4b86      	ldr	r3, [pc, #536]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d223      	bcs.n	8001b3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fd41 	bl	8002580 <RCC_SetFlashLatencyFromMSIRange>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e38d      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b08:	4b7d      	ldr	r3, [pc, #500]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a7c      	ldr	r2, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b7a      	ldr	r3, [pc, #488]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4977      	ldr	r1, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	4972      	ldr	r1, [pc, #456]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
 8001b3a:	e025      	b.n	8001b88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3c:	4b70      	ldr	r3, [pc, #448]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6f      	ldr	r2, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b42:	f043 0308 	orr.w	r3, r3, #8
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b6d      	ldr	r3, [pc, #436]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	496a      	ldr	r1, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5a:	4b69      	ldr	r3, [pc, #420]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	4965      	ldr	r1, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d109      	bne.n	8001b88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fd01 	bl	8002580 <RCC_SetFlashLatencyFromMSIRange>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e34d      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b88:	f000 fc36 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	495a      	ldr	r1, [pc, #360]	; (8001d04 <HAL_RCC_OscConfig+0x29c>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_RCC_OscConfig+0x2a0>)
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ba8:	4b58      	ldr	r3, [pc, #352]	; (8001d0c <HAL_RCC_OscConfig+0x2a4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fbcf 	bl	8001350 <HAL_InitTick>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d052      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	e331      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d032      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc8:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a4c      	ldr	r2, [pc, #304]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fc0c 	bl	80013f0 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fc08 	bl	80013f0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e31a      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bee:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a40      	ldr	r2, [pc, #256]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	493b      	ldr	r1, [pc, #236]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	4936      	ldr	r1, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	e01a      	b.n	8001c64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fbd9 	bl	80013f0 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c42:	f7ff fbd5 	bl	80013f0 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e2e7      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f0      	bne.n	8001c42 <HAL_RCC_OscConfig+0x1da>
 8001c60:	e000      	b.n	8001c64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d074      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d005      	beq.n	8001c82 <HAL_RCC_OscConfig+0x21a>
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	d10e      	bne.n	8001c9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d10b      	bne.n	8001c9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d064      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d160      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e2c4      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x24a>
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a15      	ldr	r2, [pc, #84]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e01d      	b.n	8001cee <HAL_RCC_OscConfig+0x286>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x26e>
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0c      	ldr	r2, [pc, #48]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0x286>
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a06      	ldr	r2, [pc, #24]	; (8001d00 <HAL_RCC_OscConfig+0x298>)
 8001ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01c      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fb7b 	bl	80013f0 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfc:	e011      	b.n	8001d22 <HAL_RCC_OscConfig+0x2ba>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	08003f90 	.word	0x08003f90
 8001d08:	200001f8 	.word	0x200001f8
 8001d0c:	200001fc 	.word	0x200001fc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fb6e 	bl	80013f0 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e280      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d22:	4baf      	ldr	r3, [pc, #700]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2a8>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fb5e 	bl	80013f0 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fb5a 	bl	80013f0 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e26c      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d4a:	4ba5      	ldr	r3, [pc, #660]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2d0>
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d060      	beq.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x310>
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b0c      	cmp	r3, #12
 8001d70:	d119      	bne.n	8001da6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d116      	bne.n	8001da6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d78:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_OscConfig+0x328>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e249      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b93      	ldr	r3, [pc, #588]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	4990      	ldr	r1, [pc, #576]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da4:	e040      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d023      	beq.n	8001df6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dae:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a8b      	ldr	r2, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fb19 	bl	80013f0 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fb15 	bl	80013f0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e227      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd4:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	497c      	ldr	r1, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
 8001df4:	e018      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7ff faf5 	bl	80013f0 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0a:	f7ff faf1 	bl	80013f0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e203      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d03c      	beq.n	8001eae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d01c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3c:	4b68      	ldr	r3, [pc, #416]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	4a67      	ldr	r2, [pc, #412]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fad0 	bl	80013f0 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff facc 	bl	80013f0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1de      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e66:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ef      	beq.n	8001e54 <HAL_RCC_OscConfig+0x3ec>
 8001e74:	e01b      	b.n	8001eae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e76:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7ff fab3 	bl	80013f0 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff faaf 	bl	80013f0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1c1      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea0:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ef      	bne.n	8001e8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80a6 	beq.w	8002008 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ec0:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a43      	ldr	r2, [pc, #268]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_OscConfig+0x57c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d118      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_RCC_OscConfig+0x57c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a3a      	ldr	r2, [pc, #232]	; (8001fe4 <HAL_RCC_OscConfig+0x57c>)
 8001efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f00:	f7ff fa76 	bl	80013f0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f08:	f7ff fa72 	bl	80013f0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e184      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_RCC_OscConfig+0x57c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_OscConfig+0x4d8>
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f34:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f3e:	e024      	b.n	8001f8a <HAL_RCC_OscConfig+0x522>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b05      	cmp	r3, #5
 8001f46:	d110      	bne.n	8001f6a <HAL_RCC_OscConfig+0x502>
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f50:	f043 0304 	orr.w	r3, r3, #4
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f68:	e00f      	b.n	8001f8a <HAL_RCC_OscConfig+0x522>
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f72:	f023 0301 	bic.w	r3, r3, #1
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f023 0304 	bic.w	r3, r3, #4
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d016      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7ff fa2d 	bl	80013f0 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7ff fa29 	bl	80013f0 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e139      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ed      	beq.n	8001f9a <HAL_RCC_OscConfig+0x532>
 8001fbe:	e01a      	b.n	8001ff6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff fa16 	bl	80013f0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc6:	e00f      	b.n	8001fe8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fa12 	bl	80013f0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d906      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e122      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe8:	4b90      	ldr	r3, [pc, #576]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1e8      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b8b      	ldr	r3, [pc, #556]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a8a      	ldr	r2, [pc, #552]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8108 	beq.w	8002222 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	2b02      	cmp	r3, #2
 8002018:	f040 80d0 	bne.w	80021bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800201c:	4b83      	ldr	r3, [pc, #524]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	429a      	cmp	r2, r3
 800202e:	d130      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	3b01      	subs	r3, #1
 800203c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d127      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d11f      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800205c:	2a07      	cmp	r2, #7
 800205e:	bf14      	ite	ne
 8002060:	2201      	movne	r2, #1
 8002062:	2200      	moveq	r2, #0
 8002064:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002066:	4293      	cmp	r3, r2
 8002068:	d113      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d109      	bne.n	8002092 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208e:	429a      	cmp	r2, r3
 8002090:	d06e      	beq.n	8002170 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d069      	beq.n	800216c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002098:	4b64      	ldr	r3, [pc, #400]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020a4:	4b61      	ldr	r3, [pc, #388]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b7      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020b4:	4b5d      	ldr	r3, [pc, #372]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a5c      	ldr	r2, [pc, #368]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80020ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020c0:	f7ff f996 	bl	80013f0 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c8:	f7ff f992 	bl	80013f0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0a4      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020da:	4b54      	ldr	r3, [pc, #336]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	4b51      	ldr	r3, [pc, #324]	; (8002230 <HAL_RCC_OscConfig+0x7c8>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020f6:	3a01      	subs	r2, #1
 80020f8:	0112      	lsls	r2, r2, #4
 80020fa:	4311      	orrs	r1, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002100:	0212      	lsls	r2, r2, #8
 8002102:	4311      	orrs	r1, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002108:	0852      	lsrs	r2, r2, #1
 800210a:	3a01      	subs	r2, #1
 800210c:	0552      	lsls	r2, r2, #21
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002114:	0852      	lsrs	r2, r2, #1
 8002116:	3a01      	subs	r2, #1
 8002118:	0652      	lsls	r2, r2, #25
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002120:	0912      	lsrs	r2, r2, #4
 8002122:	0452      	lsls	r2, r2, #17
 8002124:	430a      	orrs	r2, r1
 8002126:	4941      	ldr	r1, [pc, #260]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800212c:	4b3f      	ldr	r3, [pc, #252]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3e      	ldr	r2, [pc, #248]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a3b      	ldr	r2, [pc, #236]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002144:	f7ff f954 	bl	80013f0 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff f950 	bl	80013f0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e062      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800216a:	e05a      	b.n	8002222 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e059      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002170:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d152      	bne.n	8002222 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800217c:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2a      	ldr	r2, [pc, #168]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002194:	f7ff f92c 	bl	80013f0 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f928 	bl	80013f0 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e03a      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x734>
 80021ba:	e032      	b.n	8002222 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d02d      	beq.n	800221e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80021c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d105      	bne.n	80021e6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80021e0:	f023 0303 	bic.w	r3, r3, #3
 80021e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4a10      	ldr	r2, [pc, #64]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 80021ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff f8fb 	bl	80013f0 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fe:	f7ff f8f7 	bl	80013f0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e009      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_RCC_OscConfig+0x7c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f0      	bne.n	80021fe <HAL_RCC_OscConfig+0x796>
 800221c:	e001      	b.n	8002222 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	f99d808c 	.word	0xf99d808c

08002234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0c8      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002248:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	d910      	bls.n	8002278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 0207 	bic.w	r2, r3, #7
 800225e:	4961      	ldr	r1, [pc, #388]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b0      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d04c      	beq.n	800231e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228c:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d121      	bne.n	80022dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e09e      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a4:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e092      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022bc:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e086      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e07e      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 0203 	bic.w	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	493f      	ldr	r1, [pc, #252]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ee:	f7ff f87f 	bl	80013f0 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f4:	e00a      	b.n	800230c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7ff f87b 	bl	80013f0 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e066      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 020c 	and.w	r2, r3, #12
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	429a      	cmp	r2, r3
 800231c:	d1eb      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	492c      	ldr	r1, [pc, #176]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d210      	bcs.n	800236c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0207 	bic.w	r2, r3, #7
 8002352:	4924      	ldr	r1, [pc, #144]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235a:	4b22      	ldr	r3, [pc, #136]	; (80023e4 <HAL_RCC_ClockConfig+0x1b0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d001      	beq.n	800236c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e036      	b.n	80023da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4918      	ldr	r1, [pc, #96]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4910      	ldr	r1, [pc, #64]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023aa:	f000 f825 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_ClockConfig+0x1b4>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	490c      	ldr	r1, [pc, #48]	; (80023ec <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	5ccb      	ldrb	r3, [r1, r3]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_RCC_ClockConfig+0x1c0>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe ffbe 	bl	8001350 <HAL_InitTick>
 80023d4:	4603      	mov	r3, r0
 80023d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80023d8:	7afb      	ldrb	r3, [r7, #11]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08003f90 	.word	0x08003f90
 80023f0:	200001f8 	.word	0x200001f8
 80023f4:	200001fc 	.word	0x200001fc

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x34>
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d121      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d11e      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e005      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002454:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10d      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d102      	bne.n	8002476 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_RCC_GetSysClockFreq+0x110>)
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e004      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d101      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCC_GetSysClockFreq+0x114>)
 800247e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d134      	bne.n	80024f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d003      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0xa6>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d003      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0xac>
 800249c:	e005      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_RCC_GetSysClockFreq+0x110>)
 80024a0:	617b      	str	r3, [r7, #20]
      break;
 80024a2:	e005      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_GetSysClockFreq+0x114>)
 80024a6:	617b      	str	r3, [r7, #20]
      break;
 80024a8:	e002      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	617b      	str	r3, [r7, #20]
      break;
 80024ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	3301      	adds	r3, #1
 80024bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	fb02 f203 	mul.w	r2, r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	0e5b      	lsrs	r3, r3, #25
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	3301      	adds	r3, #1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024f0:	69bb      	ldr	r3, [r7, #24]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	08003fa8 	.word	0x08003fa8
 8002508:	00f42400 	.word	0x00f42400
 800250c:	007a1200 	.word	0x007a1200

08002510 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_RCC_GetHCLKFreq+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	200001f8 	.word	0x200001f8

08002528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800252c:	f7ff fff0 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	4904      	ldr	r1, [pc, #16]	; (8002550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40021000 	.word	0x40021000
 8002550:	08003fa0 	.word	0x08003fa0

08002554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002558:	f7ff ffda 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	0adb      	lsrs	r3, r3, #11
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4904      	ldr	r1, [pc, #16]	; (800257c <HAL_RCC_GetPCLK2Freq+0x28>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002574:	4618      	mov	r0, r3
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	08003fa0 	.word	0x08003fa0

08002580 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002598:	f7ff fa02 	bl	80019a0 <HAL_PWREx_GetVoltageRange>
 800259c:	6178      	str	r0, [r7, #20]
 800259e:	e014      	b.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	4a24      	ldr	r2, [pc, #144]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025aa:	6593      	str	r3, [r2, #88]	; 0x58
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025b8:	f7ff f9f2 	bl	80019a0 <HAL_PWREx_GetVoltageRange>
 80025bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	4a1d      	ldr	r2, [pc, #116]	; (8002638 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d0:	d10b      	bne.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d919      	bls.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2ba0      	cmp	r3, #160	; 0xa0
 80025dc:	d902      	bls.n	80025e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025de:	2302      	movs	r3, #2
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e013      	b.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025e4:	2301      	movs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	e010      	b.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b80      	cmp	r3, #128	; 0x80
 80025ee:	d902      	bls.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025f0:	2303      	movs	r3, #3
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e00a      	b.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b80      	cmp	r3, #128	; 0x80
 80025fa:	d102      	bne.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025fc:	2302      	movs	r3, #2
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	e004      	b.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b70      	cmp	r3, #112	; 0x70
 8002606:	d101      	bne.n	800260c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002608:	2301      	movs	r3, #1
 800260a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 0207 	bic.w	r2, r3, #7
 8002614:	4909      	ldr	r1, [pc, #36]	; (800263c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800261c:	4b07      	ldr	r3, [pc, #28]	; (800263c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	429a      	cmp	r2, r3
 8002628:	d001      	beq.n	800262e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	40022000 	.word	0x40022000

08002640 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002648:	2300      	movs	r3, #0
 800264a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800264c:	2300      	movs	r3, #0
 800264e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002658:	2b00      	cmp	r3, #0
 800265a:	d041      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002660:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002664:	d02a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002666:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800266a:	d824      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800266c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002670:	d008      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002676:	d81e      	bhi.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800267c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002680:	d010      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002682:	e018      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002684:	4b86      	ldr	r3, [pc, #536]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a85      	ldr	r2, [pc, #532]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002690:	e015      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fabb 	bl	8002c14 <RCCEx_PLLSAI1_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026a2:	e00c      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3320      	adds	r3, #32
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fba6 	bl	8002dfc <RCCEx_PLLSAI2_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026b4:	e003      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	74fb      	strb	r3, [r7, #19]
      break;
 80026ba:	e000      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10b      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c4:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d2:	4973      	ldr	r1, [pc, #460]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026da:	e001      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d041      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026f4:	d02a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026fa:	d824      	bhi.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002706:	d81e      	bhi.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d010      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002712:	e018      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002714:	4b62      	ldr	r3, [pc, #392]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a61      	ldr	r2, [pc, #388]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002720:	e015      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fa73 	bl	8002c14 <RCCEx_PLLSAI1_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002732:	e00c      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3320      	adds	r3, #32
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fb5e 	bl	8002dfc <RCCEx_PLLSAI2_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002744:	e003      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	74fb      	strb	r3, [r7, #19]
      break;
 800274a:	e000      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800274c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002754:	4b52      	ldr	r3, [pc, #328]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002762:	494f      	ldr	r1, [pc, #316]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800276a:	e001      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 80a0 	beq.w	80028be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a2:	6593      	str	r3, [r2, #88]	; 0x58
 80027a4:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b0:	2301      	movs	r3, #1
 80027b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b4:	4b3b      	ldr	r3, [pc, #236]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a3a      	ldr	r2, [pc, #232]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c0:	f7fe fe16 	bl	80013f0 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027c6:	e009      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe fe12 	bl	80013f0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	74fb      	strb	r3, [r7, #19]
        break;
 80027da:	e005      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027dc:	4b31      	ldr	r3, [pc, #196]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0ef      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d15c      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ee:	4b2c      	ldr	r3, [pc, #176]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01f      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	429a      	cmp	r2, r3
 800280a:	d019      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800280c:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002816:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	4a20      	ldr	r2, [pc, #128]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7fe fdd1 	bl	80013f0 <HAL_GetTick>
 800284e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002850:	e00b      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fdcd 	bl	80013f0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d902      	bls.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	74fb      	strb	r3, [r7, #19]
            break;
 8002868:	e006      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ec      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288e:	4904      	ldr	r1, [pc, #16]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002896:	e009      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	74bb      	strb	r3, [r7, #18]
 800289c:	e006      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ac:	7c7b      	ldrb	r3, [r7, #17]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d105      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b2:	4b9e      	ldr	r3, [pc, #632]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a9d      	ldr	r2, [pc, #628]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ca:	4b98      	ldr	r3, [pc, #608]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f023 0203 	bic.w	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	4994      	ldr	r1, [pc, #592]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ec:	4b8f      	ldr	r3, [pc, #572]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f023 020c 	bic.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	498c      	ldr	r1, [pc, #560]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800290e:	4b87      	ldr	r3, [pc, #540]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4983      	ldr	r1, [pc, #524]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002930:	4b7e      	ldr	r3, [pc, #504]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	497b      	ldr	r1, [pc, #492]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002952:	4b76      	ldr	r3, [pc, #472]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002960:	4972      	ldr	r1, [pc, #456]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002974:	4b6d      	ldr	r3, [pc, #436]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	496a      	ldr	r1, [pc, #424]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002996:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	4961      	ldr	r1, [pc, #388]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029b8:	4b5c      	ldr	r3, [pc, #368]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c6:	4959      	ldr	r1, [pc, #356]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029da:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	4950      	ldr	r1, [pc, #320]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	4948      	ldr	r1, [pc, #288]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a1e:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	493f      	ldr	r1, [pc, #252]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d028      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a4e:	4937      	ldr	r1, [pc, #220]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b32      	ldr	r3, [pc, #200]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]
 8002a6c:	e011      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a76:	d10c      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f8c8 	bl	8002c14 <RCCEx_PLLSAI1_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a88:	7cfb      	ldrb	r3, [r7, #19]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d028      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a9e:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	491f      	ldr	r1, [pc, #124]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002abc:	d106      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002abe:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac8:	60d3      	str	r3, [r2, #12]
 8002aca:	e011      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f899 	bl	8002c14 <RCCEx_PLLSAI1_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae6:	7cfb      	ldrb	r3, [r7, #19]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02b      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a02      	ldr	r2, [pc, #8]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b26:	60d3      	str	r3, [r2, #12]
 8002b28:	e014      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f867 	bl	8002c14 <RCCEx_PLLSAI1_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d02f      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6e:	4928      	ldr	r1, [pc, #160]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b7e:	d10d      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	2102      	movs	r1, #2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f844 	bl	8002c14 <RCCEx_PLLSAI1_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d014      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	74bb      	strb	r3, [r7, #18]
 8002b9a:	e011      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba4:	d10c      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3320      	adds	r3, #32
 8002baa:	2102      	movs	r1, #2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f925 	bl	8002dfc <RCCEx_PLLSAI2_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bda:	490d      	ldr	r1, [pc, #52]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bfe:	4904      	ldr	r1, [pc, #16]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c06:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000

08002c14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c22:	4b75      	ldr	r3, [pc, #468]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d018      	beq.n	8002c60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c2e:	4b72      	ldr	r3, [pc, #456]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f003 0203 	and.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d10d      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
       ||
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d009      	beq.n	8002c5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c46:	4b6c      	ldr	r3, [pc, #432]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
       ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d047      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e044      	b.n	8002cea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d018      	beq.n	8002c9a <RCCEx_PLLSAI1_Config+0x86>
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d825      	bhi.n	8002cb8 <RCCEx_PLLSAI1_Config+0xa4>
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d002      	beq.n	8002c76 <RCCEx_PLLSAI1_Config+0x62>
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d009      	beq.n	8002c88 <RCCEx_PLLSAI1_Config+0x74>
 8002c74:	e020      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c76:	4b60      	ldr	r3, [pc, #384]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d11d      	bne.n	8002cbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c86:	e01a      	b.n	8002cbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c88:	4b5b      	ldr	r3, [pc, #364]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d116      	bne.n	8002cc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e013      	b.n	8002cc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c9a:	4b57      	ldr	r3, [pc, #348]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10f      	bne.n	8002cc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ca6:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cb6:	e006      	b.n	8002cc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e004      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cce:	4b4a      	ldr	r3, [pc, #296]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6819      	ldr	r1, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	4944      	ldr	r1, [pc, #272]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d17d      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cf0:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a40      	ldr	r2, [pc, #256]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fb78 	bl	80013f0 <HAL_GetTick>
 8002d00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d02:	e009      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d04:	f7fe fb74 	bl	80013f0 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d902      	bls.n	8002d18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	73fb      	strb	r3, [r7, #15]
        break;
 8002d16:	e005      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d18:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ef      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d160      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d30:	4b31      	ldr	r3, [pc, #196]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6892      	ldr	r2, [r2, #8]
 8002d40:	0211      	lsls	r1, r2, #8
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68d2      	ldr	r2, [r2, #12]
 8002d46:	0912      	lsrs	r2, r2, #4
 8002d48:	0452      	lsls	r2, r2, #17
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	492a      	ldr	r1, [pc, #168]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	610b      	str	r3, [r1, #16]
 8002d52:	e027      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d112      	bne.n	8002d80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d5a:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6892      	ldr	r2, [r2, #8]
 8002d6a:	0211      	lsls	r1, r2, #8
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6912      	ldr	r2, [r2, #16]
 8002d70:	0852      	lsrs	r2, r2, #1
 8002d72:	3a01      	subs	r2, #1
 8002d74:	0552      	lsls	r2, r2, #21
 8002d76:	430a      	orrs	r2, r1
 8002d78:	491f      	ldr	r1, [pc, #124]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	610b      	str	r3, [r1, #16]
 8002d7e:	e011      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6892      	ldr	r2, [r2, #8]
 8002d90:	0211      	lsls	r1, r2, #8
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6952      	ldr	r2, [r2, #20]
 8002d96:	0852      	lsrs	r2, r2, #1
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0652      	lsls	r2, r2, #25
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	4916      	ldr	r1, [pc, #88]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002da4:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db0:	f7fe fb1e 	bl	80013f0 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db8:	f7fe fb1a 	bl	80013f0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dca:	e005      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ef      	beq.n	8002db8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	4904      	ldr	r1, [pc, #16]	; (8002df8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000

08002dfc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e0a:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d018      	beq.n	8002e48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e16:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d10d      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
       ||
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e2e:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d047      	beq.n	8002ed2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
 8002e46:	e044      	b.n	8002ed2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d018      	beq.n	8002e82 <RCCEx_PLLSAI2_Config+0x86>
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d825      	bhi.n	8002ea0 <RCCEx_PLLSAI2_Config+0xa4>
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d002      	beq.n	8002e5e <RCCEx_PLLSAI2_Config+0x62>
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d009      	beq.n	8002e70 <RCCEx_PLLSAI2_Config+0x74>
 8002e5c:	e020      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e5e:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11d      	bne.n	8002ea6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6e:	e01a      	b.n	8002ea6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d116      	bne.n	8002eaa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e80:	e013      	b.n	8002eaa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e82:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e8e:	4b49      	ldr	r3, [pc, #292]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e9e:	e006      	b.n	8002eae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea4:	e004      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10d      	bne.n	8002ed2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	4939      	ldr	r1, [pc, #228]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d167      	bne.n	8002fa8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a35      	ldr	r2, [pc, #212]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fa84 	bl	80013f0 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eea:	e009      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eec:	f7fe fa80 	bl	80013f0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d902      	bls.n	8002f00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	73fb      	strb	r3, [r7, #15]
        break;
 8002efe:	e005      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ef      	bne.n	8002eec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d14a      	bne.n	8002fa8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d111      	bne.n	8002f3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6892      	ldr	r2, [r2, #8]
 8002f28:	0211      	lsls	r1, r2, #8
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68d2      	ldr	r2, [r2, #12]
 8002f2e:	0912      	lsrs	r2, r2, #4
 8002f30:	0452      	lsls	r2, r2, #17
 8002f32:	430a      	orrs	r2, r1
 8002f34:	491f      	ldr	r1, [pc, #124]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	614b      	str	r3, [r1, #20]
 8002f3a:	e011      	b.n	8002f60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6892      	ldr	r2, [r2, #8]
 8002f4c:	0211      	lsls	r1, r2, #8
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6912      	ldr	r2, [r2, #16]
 8002f52:	0852      	lsrs	r2, r2, #1
 8002f54:	3a01      	subs	r2, #1
 8002f56:	0652      	lsls	r2, r2, #25
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a13      	ldr	r2, [pc, #76]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fa40 	bl	80013f0 <HAL_GetTick>
 8002f70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f72:	e009      	b.n	8002f88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f74:	f7fe fa3c 	bl	80013f0 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d902      	bls.n	8002f88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	73fb      	strb	r3, [r7, #15]
          break;
 8002f86:	e005      	b.n	8002f94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f88:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0ef      	beq.n	8002f74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4904      	ldr	r1, [pc, #16]	; (8002fb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e095      	b.n	80030f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d108      	bne.n	8002fe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fda:	d009      	beq.n	8002ff0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
 8002fe2:	e005      	b.n	8002ff0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe f858 	bl	80010c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003026:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003030:	d902      	bls.n	8003038 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e002      	b.n	800303e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800303c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003046:	d007      	beq.n	8003058 <HAL_SPI_Init+0xa0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003050:	d002      	beq.n	8003058 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309a:	ea42 0103 	orr.w	r1, r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	0c1b      	lsrs	r3, r3, #16
 80030b4:	f003 0204 	and.w	r2, r3, #4
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030d4:	ea42 0103 	orr.w	r1, r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b088      	sub	sp, #32
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_SPI_Transmit+0x22>
 800311c:	2302      	movs	r3, #2
 800311e:	e158      	b.n	80033d2 <HAL_SPI_Transmit+0x2d4>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003128:	f7fe f962 	bl	80013f0 <HAL_GetTick>
 800312c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800312e:	88fb      	ldrh	r3, [r7, #6]
 8003130:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d002      	beq.n	8003144 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800313e:	2302      	movs	r3, #2
 8003140:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003142:	e13d      	b.n	80033c0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_SPI_Transmit+0x52>
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003154:	e134      	b.n	80033c0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2203      	movs	r2, #3
 800315a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	88fa      	ldrh	r2, [r7, #6]
 800316e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	88fa      	ldrh	r2, [r7, #6]
 8003174:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a0:	d10f      	bne.n	80031c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b40      	cmp	r3, #64	; 0x40
 80031ce:	d007      	beq.n	80031e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031e8:	d94b      	bls.n	8003282 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_SPI_Transmit+0xfa>
 80031f2:	8afb      	ldrh	r3, [r7, #22]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d13e      	bne.n	8003276 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	881a      	ldrh	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	1c9a      	adds	r2, r3, #2
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	3b01      	subs	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800321c:	e02b      	b.n	8003276 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b02      	cmp	r3, #2
 800322a:	d112      	bne.n	8003252 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	881a      	ldrh	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	1c9a      	adds	r2, r3, #2
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003250:	e011      	b.n	8003276 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003252:	f7fe f8cd 	bl	80013f0 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d803      	bhi.n	800326a <HAL_SPI_Transmit+0x16c>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d102      	bne.n	8003270 <HAL_SPI_Transmit+0x172>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003274:	e0a4      	b.n	80033c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ce      	bne.n	800321e <HAL_SPI_Transmit+0x120>
 8003280:	e07c      	b.n	800337c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_SPI_Transmit+0x192>
 800328a:	8afb      	ldrh	r3, [r7, #22]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d170      	bne.n	8003372 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d912      	bls.n	80032c0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	881a      	ldrh	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032aa:	1c9a      	adds	r2, r3, #2
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b02      	subs	r3, #2
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032be:	e058      	b.n	8003372 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	330c      	adds	r3, #12
 80032ca:	7812      	ldrb	r2, [r2, #0]
 80032cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80032e6:	e044      	b.n	8003372 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d12b      	bne.n	800334e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d912      	bls.n	8003326 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	1c9a      	adds	r2, r3, #2
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b02      	subs	r3, #2
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003324:	e025      	b.n	8003372 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	330c      	adds	r3, #12
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800334c:	e011      	b.n	8003372 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800334e:	f7fe f84f 	bl	80013f0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d803      	bhi.n	8003366 <HAL_SPI_Transmit+0x268>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d102      	bne.n	800336c <HAL_SPI_Transmit+0x26e>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003370:	e026      	b.n	80033c0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1b5      	bne.n	80032e8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	6839      	ldr	r1, [r7, #0]
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f945 	bl	8003610 <SPI_EndRxTxTransaction>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	77fb      	strb	r3, [r7, #31]
 80033bc:	e000      	b.n	80033c0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80033be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80033d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033ec:	f7fe f800 	bl	80013f0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	4413      	add	r3, r2
 80033fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033fc:	f7fd fff8 	bl	80013f0 <HAL_GetTick>
 8003400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003402:	4b39      	ldr	r3, [pc, #228]	; (80034e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	0d1b      	lsrs	r3, r3, #20
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	fb02 f303 	mul.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003412:	e054      	b.n	80034be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d050      	beq.n	80034be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800341c:	f7fd ffe8 	bl	80013f0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	429a      	cmp	r2, r3
 800342a:	d902      	bls.n	8003432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d13d      	bne.n	80034ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800344a:	d111      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003454:	d004      	beq.n	8003460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d107      	bne.n	8003470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003478:	d10f      	bne.n	800349a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e017      	b.n	80034de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4013      	ands	r3, r2
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	bf0c      	ite	eq
 80034ce:	2301      	moveq	r3, #1
 80034d0:	2300      	movne	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d19b      	bne.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200001f8 	.word	0x200001f8

080034ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034fa:	f7fd ff79 	bl	80013f0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	4413      	add	r3, r2
 8003508:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800350a:	f7fd ff71 	bl	80013f0 <HAL_GetTick>
 800350e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003510:	4b3e      	ldr	r3, [pc, #248]	; (800360c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00da      	lsls	r2, r3, #3
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	0d1b      	lsrs	r3, r3, #20
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003528:	e062      	b.n	80035f0 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003530:	d109      	bne.n	8003546 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003544:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d050      	beq.n	80035f0 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800354e:	f7fd ff4f 	bl	80013f0 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	429a      	cmp	r2, r3
 800355c:	d902      	bls.n	8003564 <SPI_WaitFifoStateUntilTimeout+0x78>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d13d      	bne.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003572:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357c:	d111      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003586:	d004      	beq.n	8003592 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d107      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035aa:	d10f      	bne.n	80035cc <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e010      	b.n	8003602 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d194      	bne.n	800352a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3720      	adds	r7, #32
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200001f8 	.word	0x200001f8

08003610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ff5f 	bl	80034ec <SPI_WaitFifoStateUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e027      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff fec4 	bl	80033dc <SPI_WaitFlagStateUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e014      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff ff38 	bl	80034ec <SPI_WaitFifoStateUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e000      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e040      	b.n	8003730 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd fd40 	bl	8001144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	; 0x24
 80036c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f82c 	bl	8003738 <UART_SetConfig>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e022      	b.n	8003730 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 faaa 	bl	8003c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fb31 	bl	8003d90 <UART_CheckIdleState>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003738:	b5b0      	push	{r4, r5, r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4313      	orrs	r3, r2
 800375a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4bad      	ldr	r3, [pc, #692]	; (8003a18 <UART_SetConfig+0x2e0>)
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	69f9      	ldr	r1, [r7, #28]
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4aa2      	ldr	r2, [pc, #648]	; (8003a1c <UART_SetConfig+0x2e4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	4313      	orrs	r3, r2
 800379e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a99      	ldr	r2, [pc, #612]	; (8003a20 <UART_SetConfig+0x2e8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d121      	bne.n	8003802 <UART_SetConfig+0xca>
 80037be:	4b99      	ldr	r3, [pc, #612]	; (8003a24 <UART_SetConfig+0x2ec>)
 80037c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d817      	bhi.n	80037fc <UART_SetConfig+0xc4>
 80037cc:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x9c>)
 80037ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d2:	bf00      	nop
 80037d4:	080037e5 	.word	0x080037e5
 80037d8:	080037f1 	.word	0x080037f1
 80037dc:	080037eb 	.word	0x080037eb
 80037e0:	080037f7 	.word	0x080037f7
 80037e4:	2301      	movs	r3, #1
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	e0e7      	b.n	80039ba <UART_SetConfig+0x282>
 80037ea:	2302      	movs	r3, #2
 80037ec:	76fb      	strb	r3, [r7, #27]
 80037ee:	e0e4      	b.n	80039ba <UART_SetConfig+0x282>
 80037f0:	2304      	movs	r3, #4
 80037f2:	76fb      	strb	r3, [r7, #27]
 80037f4:	e0e1      	b.n	80039ba <UART_SetConfig+0x282>
 80037f6:	2308      	movs	r3, #8
 80037f8:	76fb      	strb	r3, [r7, #27]
 80037fa:	e0de      	b.n	80039ba <UART_SetConfig+0x282>
 80037fc:	2310      	movs	r3, #16
 80037fe:	76fb      	strb	r3, [r7, #27]
 8003800:	e0db      	b.n	80039ba <UART_SetConfig+0x282>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a88      	ldr	r2, [pc, #544]	; (8003a28 <UART_SetConfig+0x2f0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d132      	bne.n	8003872 <UART_SetConfig+0x13a>
 800380c:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <UART_SetConfig+0x2ec>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d828      	bhi.n	800386c <UART_SetConfig+0x134>
 800381a:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <UART_SetConfig+0xe8>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003855 	.word	0x08003855
 8003824:	0800386d 	.word	0x0800386d
 8003828:	0800386d 	.word	0x0800386d
 800382c:	0800386d 	.word	0x0800386d
 8003830:	08003861 	.word	0x08003861
 8003834:	0800386d 	.word	0x0800386d
 8003838:	0800386d 	.word	0x0800386d
 800383c:	0800386d 	.word	0x0800386d
 8003840:	0800385b 	.word	0x0800385b
 8003844:	0800386d 	.word	0x0800386d
 8003848:	0800386d 	.word	0x0800386d
 800384c:	0800386d 	.word	0x0800386d
 8003850:	08003867 	.word	0x08003867
 8003854:	2300      	movs	r3, #0
 8003856:	76fb      	strb	r3, [r7, #27]
 8003858:	e0af      	b.n	80039ba <UART_SetConfig+0x282>
 800385a:	2302      	movs	r3, #2
 800385c:	76fb      	strb	r3, [r7, #27]
 800385e:	e0ac      	b.n	80039ba <UART_SetConfig+0x282>
 8003860:	2304      	movs	r3, #4
 8003862:	76fb      	strb	r3, [r7, #27]
 8003864:	e0a9      	b.n	80039ba <UART_SetConfig+0x282>
 8003866:	2308      	movs	r3, #8
 8003868:	76fb      	strb	r3, [r7, #27]
 800386a:	e0a6      	b.n	80039ba <UART_SetConfig+0x282>
 800386c:	2310      	movs	r3, #16
 800386e:	76fb      	strb	r3, [r7, #27]
 8003870:	e0a3      	b.n	80039ba <UART_SetConfig+0x282>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6d      	ldr	r2, [pc, #436]	; (8003a2c <UART_SetConfig+0x2f4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d120      	bne.n	80038be <UART_SetConfig+0x186>
 800387c:	4b69      	ldr	r3, [pc, #420]	; (8003a24 <UART_SetConfig+0x2ec>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003886:	2b30      	cmp	r3, #48	; 0x30
 8003888:	d013      	beq.n	80038b2 <UART_SetConfig+0x17a>
 800388a:	2b30      	cmp	r3, #48	; 0x30
 800388c:	d814      	bhi.n	80038b8 <UART_SetConfig+0x180>
 800388e:	2b20      	cmp	r3, #32
 8003890:	d009      	beq.n	80038a6 <UART_SetConfig+0x16e>
 8003892:	2b20      	cmp	r3, #32
 8003894:	d810      	bhi.n	80038b8 <UART_SetConfig+0x180>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <UART_SetConfig+0x168>
 800389a:	2b10      	cmp	r3, #16
 800389c:	d006      	beq.n	80038ac <UART_SetConfig+0x174>
 800389e:	e00b      	b.n	80038b8 <UART_SetConfig+0x180>
 80038a0:	2300      	movs	r3, #0
 80038a2:	76fb      	strb	r3, [r7, #27]
 80038a4:	e089      	b.n	80039ba <UART_SetConfig+0x282>
 80038a6:	2302      	movs	r3, #2
 80038a8:	76fb      	strb	r3, [r7, #27]
 80038aa:	e086      	b.n	80039ba <UART_SetConfig+0x282>
 80038ac:	2304      	movs	r3, #4
 80038ae:	76fb      	strb	r3, [r7, #27]
 80038b0:	e083      	b.n	80039ba <UART_SetConfig+0x282>
 80038b2:	2308      	movs	r3, #8
 80038b4:	76fb      	strb	r3, [r7, #27]
 80038b6:	e080      	b.n	80039ba <UART_SetConfig+0x282>
 80038b8:	2310      	movs	r3, #16
 80038ba:	76fb      	strb	r3, [r7, #27]
 80038bc:	e07d      	b.n	80039ba <UART_SetConfig+0x282>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a5b      	ldr	r2, [pc, #364]	; (8003a30 <UART_SetConfig+0x2f8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d120      	bne.n	800390a <UART_SetConfig+0x1d2>
 80038c8:	4b56      	ldr	r3, [pc, #344]	; (8003a24 <UART_SetConfig+0x2ec>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038d2:	2bc0      	cmp	r3, #192	; 0xc0
 80038d4:	d013      	beq.n	80038fe <UART_SetConfig+0x1c6>
 80038d6:	2bc0      	cmp	r3, #192	; 0xc0
 80038d8:	d814      	bhi.n	8003904 <UART_SetConfig+0x1cc>
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d009      	beq.n	80038f2 <UART_SetConfig+0x1ba>
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d810      	bhi.n	8003904 <UART_SetConfig+0x1cc>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <UART_SetConfig+0x1b4>
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d006      	beq.n	80038f8 <UART_SetConfig+0x1c0>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x1cc>
 80038ec:	2300      	movs	r3, #0
 80038ee:	76fb      	strb	r3, [r7, #27]
 80038f0:	e063      	b.n	80039ba <UART_SetConfig+0x282>
 80038f2:	2302      	movs	r3, #2
 80038f4:	76fb      	strb	r3, [r7, #27]
 80038f6:	e060      	b.n	80039ba <UART_SetConfig+0x282>
 80038f8:	2304      	movs	r3, #4
 80038fa:	76fb      	strb	r3, [r7, #27]
 80038fc:	e05d      	b.n	80039ba <UART_SetConfig+0x282>
 80038fe:	2308      	movs	r3, #8
 8003900:	76fb      	strb	r3, [r7, #27]
 8003902:	e05a      	b.n	80039ba <UART_SetConfig+0x282>
 8003904:	2310      	movs	r3, #16
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e057      	b.n	80039ba <UART_SetConfig+0x282>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a49      	ldr	r2, [pc, #292]	; (8003a34 <UART_SetConfig+0x2fc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d125      	bne.n	8003960 <UART_SetConfig+0x228>
 8003914:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <UART_SetConfig+0x2ec>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003922:	d017      	beq.n	8003954 <UART_SetConfig+0x21c>
 8003924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003928:	d817      	bhi.n	800395a <UART_SetConfig+0x222>
 800392a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392e:	d00b      	beq.n	8003948 <UART_SetConfig+0x210>
 8003930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003934:	d811      	bhi.n	800395a <UART_SetConfig+0x222>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <UART_SetConfig+0x20a>
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d006      	beq.n	800394e <UART_SetConfig+0x216>
 8003940:	e00b      	b.n	800395a <UART_SetConfig+0x222>
 8003942:	2300      	movs	r3, #0
 8003944:	76fb      	strb	r3, [r7, #27]
 8003946:	e038      	b.n	80039ba <UART_SetConfig+0x282>
 8003948:	2302      	movs	r3, #2
 800394a:	76fb      	strb	r3, [r7, #27]
 800394c:	e035      	b.n	80039ba <UART_SetConfig+0x282>
 800394e:	2304      	movs	r3, #4
 8003950:	76fb      	strb	r3, [r7, #27]
 8003952:	e032      	b.n	80039ba <UART_SetConfig+0x282>
 8003954:	2308      	movs	r3, #8
 8003956:	76fb      	strb	r3, [r7, #27]
 8003958:	e02f      	b.n	80039ba <UART_SetConfig+0x282>
 800395a:	2310      	movs	r3, #16
 800395c:	76fb      	strb	r3, [r7, #27]
 800395e:	e02c      	b.n	80039ba <UART_SetConfig+0x282>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a2d      	ldr	r2, [pc, #180]	; (8003a1c <UART_SetConfig+0x2e4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d125      	bne.n	80039b6 <UART_SetConfig+0x27e>
 800396a:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <UART_SetConfig+0x2ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003978:	d017      	beq.n	80039aa <UART_SetConfig+0x272>
 800397a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397e:	d817      	bhi.n	80039b0 <UART_SetConfig+0x278>
 8003980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003984:	d00b      	beq.n	800399e <UART_SetConfig+0x266>
 8003986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398a:	d811      	bhi.n	80039b0 <UART_SetConfig+0x278>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <UART_SetConfig+0x260>
 8003990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003994:	d006      	beq.n	80039a4 <UART_SetConfig+0x26c>
 8003996:	e00b      	b.n	80039b0 <UART_SetConfig+0x278>
 8003998:	2300      	movs	r3, #0
 800399a:	76fb      	strb	r3, [r7, #27]
 800399c:	e00d      	b.n	80039ba <UART_SetConfig+0x282>
 800399e:	2302      	movs	r3, #2
 80039a0:	76fb      	strb	r3, [r7, #27]
 80039a2:	e00a      	b.n	80039ba <UART_SetConfig+0x282>
 80039a4:	2304      	movs	r3, #4
 80039a6:	76fb      	strb	r3, [r7, #27]
 80039a8:	e007      	b.n	80039ba <UART_SetConfig+0x282>
 80039aa:	2308      	movs	r3, #8
 80039ac:	76fb      	strb	r3, [r7, #27]
 80039ae:	e004      	b.n	80039ba <UART_SetConfig+0x282>
 80039b0:	2310      	movs	r3, #16
 80039b2:	76fb      	strb	r3, [r7, #27]
 80039b4:	e001      	b.n	80039ba <UART_SetConfig+0x282>
 80039b6:	2310      	movs	r3, #16
 80039b8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <UART_SetConfig+0x2e4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	f040 8087 	bne.w	8003ad4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039c6:	7efb      	ldrb	r3, [r7, #27]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d837      	bhi.n	8003a3c <UART_SetConfig+0x304>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0x29c>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a3d 	.word	0x08003a3d
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a3d 	.word	0x08003a3d
 80039e4:	08003a07 	.word	0x08003a07
 80039e8:	08003a3d 	.word	0x08003a3d
 80039ec:	08003a3d 	.word	0x08003a3d
 80039f0:	08003a3d 	.word	0x08003a3d
 80039f4:	08003a0f 	.word	0x08003a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f8:	f7fe fd96 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 80039fc:	6178      	str	r0, [r7, #20]
        break;
 80039fe:	e022      	b.n	8003a46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <UART_SetConfig+0x300>)
 8003a02:	617b      	str	r3, [r7, #20]
        break;
 8003a04:	e01f      	b.n	8003a46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a06:	f7fe fcf7 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003a0a:	6178      	str	r0, [r7, #20]
        break;
 8003a0c:	e01b      	b.n	8003a46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a12:	617b      	str	r3, [r7, #20]
        break;
 8003a14:	e017      	b.n	8003a46 <UART_SetConfig+0x30e>
 8003a16:	bf00      	nop
 8003a18:	efff69f3 	.word	0xefff69f3
 8003a1c:	40008000 	.word	0x40008000
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40004400 	.word	0x40004400
 8003a2c:	40004800 	.word	0x40004800
 8003a30:	40004c00 	.word	0x40004c00
 8003a34:	40005000 	.word	0x40005000
 8003a38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	76bb      	strb	r3, [r7, #26]
        break;
 8003a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80f1 	beq.w	8003c30 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d305      	bcc.n	8003a6a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d902      	bls.n	8003a70 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	76bb      	strb	r3, [r7, #26]
 8003a6e:	e0df      	b.n	8003c30 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f04f 0100 	mov.w	r1, #0
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	020b      	lsls	r3, r1, #8
 8003a82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a86:	0202      	lsls	r2, r0, #8
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	6849      	ldr	r1, [r1, #4]
 8003a8c:	0849      	lsrs	r1, r1, #1
 8003a8e:	4608      	mov	r0, r1
 8003a90:	f04f 0100 	mov.w	r1, #0
 8003a94:	1814      	adds	r4, r2, r0
 8003a96:	eb43 0501 	adc.w	r5, r3, r1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fc fb8e 	bl	80001c8 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aba:	d308      	bcc.n	8003ace <UART_SetConfig+0x396>
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac2:	d204      	bcs.n	8003ace <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	60da      	str	r2, [r3, #12]
 8003acc:	e0b0      	b.n	8003c30 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	76bb      	strb	r3, [r7, #26]
 8003ad2:	e0ad      	b.n	8003c30 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003adc:	d15c      	bne.n	8003b98 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003ade:	7efb      	ldrb	r3, [r7, #27]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d828      	bhi.n	8003b36 <UART_SetConfig+0x3fe>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x3b4>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b37 	.word	0x08003b37
 8003afc:	08003b27 	.word	0x08003b27
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b37 	.word	0x08003b37
 8003b0c:	08003b2f 	.word	0x08003b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7fe fd0a 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8003b14:	6178      	str	r0, [r7, #20]
        break;
 8003b16:	e013      	b.n	8003b40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b18:	f7fe fd1c 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 8003b1c:	6178      	str	r0, [r7, #20]
        break;
 8003b1e:	e00f      	b.n	8003b40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b20:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <UART_SetConfig+0x510>)
 8003b22:	617b      	str	r3, [r7, #20]
        break;
 8003b24:	e00c      	b.n	8003b40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b26:	f7fe fc67 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003b2a:	6178      	str	r0, [r7, #20]
        break;
 8003b2c:	e008      	b.n	8003b40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b32:	617b      	str	r3, [r7, #20]
        break;
 8003b34:	e004      	b.n	8003b40 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	76bb      	strb	r3, [r7, #26]
        break;
 8003b3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d074      	beq.n	8003c30 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005a      	lsls	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d916      	bls.n	8003b92 <UART_SetConfig+0x45a>
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6a:	d212      	bcs.n	8003b92 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f023 030f 	bic.w	r3, r3, #15
 8003b74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	89fa      	ldrh	r2, [r7, #14]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	e04e      	b.n	8003c30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	76bb      	strb	r3, [r7, #26]
 8003b96:	e04b      	b.n	8003c30 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b98:	7efb      	ldrb	r3, [r7, #27]
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d827      	bhi.n	8003bee <UART_SetConfig+0x4b6>
 8003b9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <UART_SetConfig+0x46c>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003bdf 	.word	0x08003bdf
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7fe fcae 	bl	8002528 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	6178      	str	r0, [r7, #20]
        break;
 8003bce:	e013      	b.n	8003bf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7fe fcc0 	bl	8002554 <HAL_RCC_GetPCLK2Freq>
 8003bd4:	6178      	str	r0, [r7, #20]
        break;
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <UART_SetConfig+0x510>)
 8003bda:	617b      	str	r3, [r7, #20]
        break;
 8003bdc:	e00c      	b.n	8003bf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7fe fc0b 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8003be2:	6178      	str	r0, [r7, #20]
        break;
 8003be4:	e008      	b.n	8003bf8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bea:	617b      	str	r3, [r7, #20]
        break;
 8003bec:	e004      	b.n	8003bf8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	76bb      	strb	r3, [r7, #26]
        break;
 8003bf6:	bf00      	nop
    }

    if (pclk != 0U)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d018      	beq.n	8003c30 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085a      	lsrs	r2, r3, #1
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	d908      	bls.n	8003c2c <UART_SetConfig+0x4f4>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d204      	bcs.n	8003c2c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e001      	b.n	8003c30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bdb0      	pop	{r4, r5, r7, pc}
 8003c46:	bf00      	nop
 8003c48:	00f42400 	.word	0x00f42400

08003c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01a      	beq.n	8003d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d4a:	d10a      	bne.n	8003d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
  }
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003da0:	f7fd fb26 	bl	80013f0 <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d10e      	bne.n	8003dd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f82d 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e023      	b.n	8003e1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d10e      	bne.n	8003dfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f817 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e00d      	b.n	8003e1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e32:	e05e      	b.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d05a      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	f7fd fad8 	bl	80013f0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d302      	bcc.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11b      	bne.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e043      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02c      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	d124      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eb0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ec0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689a      	ldr	r2, [r3, #8]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e00f      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4013      	ands	r3, r2
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	bf0c      	ite	eq
 8003f02:	2301      	moveq	r3, #1
 8003f04:	2300      	movne	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d091      	beq.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <__libc_init_array>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	4d0d      	ldr	r5, [pc, #52]	; (8003f54 <__libc_init_array+0x38>)
 8003f20:	4c0d      	ldr	r4, [pc, #52]	; (8003f58 <__libc_init_array+0x3c>)
 8003f22:	1b64      	subs	r4, r4, r5
 8003f24:	10a4      	asrs	r4, r4, #2
 8003f26:	2600      	movs	r6, #0
 8003f28:	42a6      	cmp	r6, r4
 8003f2a:	d109      	bne.n	8003f40 <__libc_init_array+0x24>
 8003f2c:	4d0b      	ldr	r5, [pc, #44]	; (8003f5c <__libc_init_array+0x40>)
 8003f2e:	4c0c      	ldr	r4, [pc, #48]	; (8003f60 <__libc_init_array+0x44>)
 8003f30:	f000 f820 	bl	8003f74 <_init>
 8003f34:	1b64      	subs	r4, r4, r5
 8003f36:	10a4      	asrs	r4, r4, #2
 8003f38:	2600      	movs	r6, #0
 8003f3a:	42a6      	cmp	r6, r4
 8003f3c:	d105      	bne.n	8003f4a <__libc_init_array+0x2e>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f44:	4798      	blx	r3
 8003f46:	3601      	adds	r6, #1
 8003f48:	e7ee      	b.n	8003f28 <__libc_init_array+0xc>
 8003f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4e:	4798      	blx	r3
 8003f50:	3601      	adds	r6, #1
 8003f52:	e7f2      	b.n	8003f3a <__libc_init_array+0x1e>
 8003f54:	08003fe0 	.word	0x08003fe0
 8003f58:	08003fe0 	.word	0x08003fe0
 8003f5c:	08003fe0 	.word	0x08003fe0
 8003f60:	08003fe4 	.word	0x08003fe4

08003f64 <memset>:
 8003f64:	4402      	add	r2, r0
 8003f66:	4603      	mov	r3, r0
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <memset+0xa>
 8003f6c:	4770      	bx	lr
 8003f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f72:	e7f9      	b.n	8003f68 <memset+0x4>

08003f74 <_init>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	bf00      	nop
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr

08003f80 <_fini>:
 8003f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f82:	bf00      	nop
 8003f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f86:	bc08      	pop	{r3}
 8003f88:	469e      	mov	lr, r3
 8003f8a:	4770      	bx	lr
