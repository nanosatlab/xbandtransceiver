
LMX2572_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004230  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004404  08004404  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08004404  08004404  00014404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800440c  0800440c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004410  08004410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08004414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000204  08004618  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08004618  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3e7  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be2  00000000  00000000  0002c61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025722  00000000  00000000  0002f788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcab  00000000  00000000  00054eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e76d5  00000000  00000000  00060b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014822a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e20  00000000  00000000  00148280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000204 	.word	0x20000204
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043a0 	.word	0x080043a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000208 	.word	0x20000208
 80001c4:	080043a0 	.word	0x080043a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <LMX2572_write>:
#include "lmx2572.h"

// **** THIS WORKS! *******************************************

// Writes a register to the PLL
void LMX2572_write(SPI_HandleTypeDef *hspi, uint32_t value) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	uint8_t spi_buf[3] = {0,0,0};
 80004ca:	4a14      	ldr	r2, [pc, #80]	; (800051c <LMX2572_write+0x5c>)
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	6812      	ldr	r2, [r2, #0]
 80004d2:	4611      	mov	r1, r2
 80004d4:	8019      	strh	r1, [r3, #0]
 80004d6:	3302      	adds	r3, #2
 80004d8:	0c12      	lsrs	r2, r2, #16
 80004da:	701a      	strb	r2, [r3, #0]

	spi_buf[2] = value;
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	73bb      	strb	r3, [r7, #14]
	spi_buf[1] = value >> 8;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	0a1b      	lsrs	r3, r3, #8
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	737b      	strb	r3, [r7, #13]
	spi_buf[0] = value >> 16;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	0c1b      	lsrs	r3, r3, #16
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// CSB LOW
 80004f2:	2200      	movs	r2, #0
 80004f4:	2110      	movs	r1, #16
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <LMX2572_write+0x60>)
 80004f8:	f001 f8c0 	bl	800167c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
 80004fc:	f107 010c 	add.w	r1, r7, #12
 8000500:	2364      	movs	r3, #100	; 0x64
 8000502:	2203      	movs	r2, #3
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f002 fc80 	bl	8002e0a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
 800050a:	2201      	movs	r2, #1
 800050c:	2110      	movs	r1, #16
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <LMX2572_write+0x60>)
 8000510:	f001 f8b4 	bl	800167c <HAL_GPIO_WritePin>
}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	080043b8 	.word	0x080043b8
 8000520:	48000400 	.word	0x48000400

08000524 <LMX2572_load_regs>:

// Loads the registers to the PLL
void LMX2572_load_regs(SPI_HandleTypeDef *hspi){
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
	while ((R[125-i] & 0x00FF0000) != 0) {
 8000530:	e00c      	b.n	800054c <LMX2572_load_regs+0x28>
		LMX2572_write(hspi, R[125-i]);
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000538:	4a10      	ldr	r2, [pc, #64]	; (800057c <LMX2572_load_regs+0x58>)
 800053a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053e:	4619      	mov	r1, r3
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f7ff ffbd 	bl	80004c0 <LMX2572_write>
		i++;
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	3301      	adds	r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
	while ((R[125-i] & 0x00FF0000) != 0) {
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000552:	4a0a      	ldr	r2, [pc, #40]	; (800057c <LMX2572_load_regs+0x58>)
 8000554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1e8      	bne.n	8000532 <LMX2572_load_regs+0xe>
	}
	LMX2572_write(hspi, R[125-i]);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <LMX2572_load_regs+0x58>)
 8000568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056c:	4619      	mov	r1, r3
 800056e:	6878      	ldr	r0, [r7, #4]
 8000570:	f7ff ffa6 	bl	80004c0 <LMX2572_write>
}
 8000574:	bf00      	nop
 8000576:	3710      	adds	r7, #16
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000220 	.word	0x20000220

08000580 <LMX2572_det_param>:
	if (pll.fosc * pll.doubler / pll.r_pre * pll.mult > 100) R[9] |= (0x01 << 14);
	else R[9] &= ~(0x01 << 14);
}

// Determine N, NUM and DEN values from target frequency and fpd
PLL LMX2572_det_param(struct PLL pll){
 8000580:	b084      	sub	sp, #16
 8000582:	b4b0      	push	{r4, r5, r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	f107 001c 	add.w	r0, r7, #28
 800058e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pll.fpd = pll.fosc*pll.doubler/pll.r_pre* pll.mult/pll.r;
 8000592:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000596:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80005aa:	ee07 3a90 	vmov	s15, r3
 80005ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80005b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80005c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005ca:	ee07 3a90 	vmov	s15, r3
 80005ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pll.n = pll.frequency/pll.fpd;
 80005da:	edd7 6a07 	vldr	s13, [r7, #28]
 80005de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80005e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ea:	ee17 3a90 	vmov	r3, s15
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	863b      	strh	r3, [r7, #48]	; 0x30
	pll.den = 1000;
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
	pll.num = (pll.frequency/pll.fpd-pll.n)*pll.den;
 80005f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80005fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000604:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000606:	ee07 3a90 	vmov	s15, r3
 800060a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000614:	ee07 3a90 	vmov	s15, r3
 8000618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800061c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000624:	ee17 3a90 	vmov	r3, s15
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
	pll.Fvco = pll.fpd * pll.n + (pll.num * pll.fpd / pll.den);
 800062a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800062e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000630:	ee07 3a90 	vmov	s15, r3
 8000634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000638:	ee27 7a27 	vmul.f32	s14, s14, s15
 800063c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000646:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800064a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800064e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000658:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a08 	vstr	s15, [r7, #32]

	return pll;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	461d      	mov	r5, r3
 8000668:	f107 041c 	add.w	r4, r7, #28
 800066c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000674:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000678:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bcb0      	pop	{r4, r5, r7}
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <LMX2572_defaultConfig>:

// Loads PLL default registers to the PLL register bank
PLL LMX2572_defaultConfig(struct PLL pll){
 8000688:	b084      	sub	sp, #16
 800068a:	b4b0      	push	{r4, r5, r7}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	for(int i=0; i<126; i++) R[i] = R_default[125-i];
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	e00c      	b.n	80006ba <LMX2572_defaultConfig+0x32>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f1c3 037d 	rsb	r3, r3, #125	; 0x7d
 80006a6:	4a2a      	ldr	r2, [pc, #168]	; (8000750 <LMX2572_defaultConfig+0xc8>)
 80006a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ac:	4929      	ldr	r1, [pc, #164]	; (8000754 <LMX2572_defaultConfig+0xcc>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2b7d      	cmp	r3, #125	; 0x7d
 80006be:	ddef      	ble.n	80006a0 <LMX2572_defaultConfig+0x18>

	pll.frequency = PLL_DEFAULT_frequency;
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <LMX2572_defaultConfig+0xd0>)
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
	pll.fosc = PLL_DEFAULT_fosc;
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <LMX2572_defaultConfig+0xd4>)
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
	pll.doubler = PLL_DEFAULT_doubler;
 80006c8:	2301      	movs	r3, #1
 80006ca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pll.r_pre = PLL_DEFAULT_r_pre;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pll.r = PLL_DEFAULT_r;
 80006d4:	2301      	movs	r3, #1
 80006d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	pll.mult = PLL_DEFAULT_mult;
 80006da:	2302      	movs	r3, #2
 80006dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	pll.CPG = PLL_DEFAULT_CPG;
 80006e0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	pll.VCO = PLL_DEFAULT_VCO;
 80006e8:	2304      	movs	r3, #4
 80006ea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	pll.VCO_force = PLL_DEFAULT_VCO_force;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	pll.MASH_order = PLL_DEFAULT_MASH_order;
 80006f4:	2303      	movs	r3, #3
 80006f6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	pll.PFD_DLY_SEL = PLL_DEFAULT_PFD_DLY_SEL;
 80006fa:	2303      	movs	r3, #3
 80006fc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	pll.chdiv = PLL_DEFAULT_chdiv;
 8000700:	2302      	movs	r3, #2
 8000702:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	pll.out_mux_a = PLL_DEFAULT_out_mux_a;
 8000706:	2301      	movs	r3, #1
 8000708:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	pll.out_mux_b = PLL_DEFAULT_out_mux_b;
 800070c:	2301      	movs	r3, #1
 800070e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	pll.out_pd_a = PLL_DEFAULT_out_pd_a;
 8000712:	2301      	movs	r3, #1
 8000714:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	pll.out_pd_b = PLL_DEFAULT_out_pd_b;
 8000718:	2301      	movs	r3, #1
 800071a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	pll.out_pwr_a = PLL_DEFAULT_out_pwr_a;
 800071e:	2314      	movs	r3, #20
 8000720:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	pll.out_pwr_b = PLL_DEFAULT_out_pwr_b;
 8000724:	2300      	movs	r3, #0
 8000726:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	return pll;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	461d      	mov	r5, r3
 800072e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800073e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bcb0      	pop	{r4, r5, r7}
 800074a:	b004      	add	sp, #16
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000000 	.word	0x20000000
 8000754:	20000220 	.word	0x20000220
 8000758:	459c4000 	.word	0x459c4000
 800075c:	41c80000 	.word	0x41c80000

08000760 <LMX2572_set_frequency>:
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
}

// Sets PLL N, DEN and NUM registers
void LMX2572_set_frequency(struct PLL pll) {
 8000760:	b084      	sub	sp, #16
 8000762:	b490      	push	{r4, r7}
 8000764:	af00      	add	r7, sp, #0
 8000766:	f107 0408 	add.w	r4, r7, #8
 800076a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Sets N
	R[34] &= ~(0x07 << 0);
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000774:	f023 0307 	bic.w	r3, r3, #7
 8000778:	4a30      	ldr	r2, [pc, #192]	; (800083c <LMX2572_set_frequency+0xdc>)
 800077a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	R[34] |= (((pll.n >> 16) & 0x07) << 0);
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000784:	4a2d      	ldr	r2, [pc, #180]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000786:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	R[36] &= ~(0xFFFF << 0);
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <LMX2572_set_frequency+0xdc>)
 800078c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	041b      	lsls	r3, r3, #16
 8000794:	4a29      	ldr	r2, [pc, #164]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	R[36] |= ((pll.n & 0xFFFF) << 0);
 800079a:	4b28      	ldr	r3, [pc, #160]	; (800083c <LMX2572_set_frequency+0xdc>)
 800079c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007a0:	8bba      	ldrh	r2, [r7, #28]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	4a25      	ldr	r2, [pc, #148]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	// Sets DEN
	R[38] &= ~(0xFFFF << 0);
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	041b      	lsls	r3, r3, #16
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	R[38] |= ((pll.den >> 16) << 0);
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80007c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c2:	0c1b      	lsrs	r3, r3, #16
 80007c4:	4313      	orrs	r3, r2
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	R[39] &= ~(0xFFFF << 0);
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	041b      	lsls	r3, r3, #16
 80007d6:	4a19      	ldr	r2, [pc, #100]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	R[39] |= ((pll.den & 0x0000FFFF) << 0);
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	4a14      	ldr	r2, [pc, #80]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	// Sets NUM
	R[42] &= ~(0xFFFF << 0);
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80007f4:	0c1b      	lsrs	r3, r3, #16
 80007f6:	041b      	lsls	r3, r3, #16
 80007f8:	4a10      	ldr	r2, [pc, #64]	; (800083c <LMX2572_set_frequency+0xdc>)
 80007fa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	R[42] |= ((pll.num >> 16) << 0);
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000800:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	0c1b      	lsrs	r3, r3, #16
 8000808:	4313      	orrs	r3, r2
 800080a:	4a0c      	ldr	r2, [pc, #48]	; (800083c <LMX2572_set_frequency+0xdc>)
 800080c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	R[43] &= ~(0xFFFF << 0);
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000816:	0c1b      	lsrs	r3, r3, #16
 8000818:	041b      	lsls	r3, r3, #16
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <LMX2572_set_frequency+0xdc>)
 800081c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	R[43] |= ((pll.num & 0x0000FFFF) << 0);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <LMX2572_set_frequency+0xdc>)
 8000822:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	b29b      	uxth	r3, r3
 800082a:	4313      	orrs	r3, r2
 800082c:	4a03      	ldr	r2, [pc, #12]	; (800083c <LMX2572_set_frequency+0xdc>)
 800082e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc90      	pop	{r4, r7}
 8000838:	b004      	add	sp, #16
 800083a:	4770      	bx	lr
 800083c:	20000220 	.word	0x20000220

08000840 <LMX2572_switchOff_RFoutA>:
	R[44] &= ~(0x01 << 6);
	pll.out_pd_a = 0;
}

// Turns off RFout A output
void LMX2572_switchOff_RFoutA(struct PLL pll){
 8000840:	b084      	sub	sp, #16
 8000842:	b490      	push	{r4, r7}
 8000844:	af00      	add	r7, sp, #0
 8000846:	f107 0408 	add.w	r4, r7, #8
 800084a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[44] |= (0x01 << 6);
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <LMX2572_switchOff_RFoutA+0x30>)
 8000850:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	4a05      	ldr	r2, [pc, #20]	; (8000870 <LMX2572_switchOff_RFoutA+0x30>)
 800085a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	pll.out_pd_a = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc90      	pop	{r4, r7}
 800086a:	b004      	add	sp, #16
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000220 	.word	0x20000220

08000874 <LMX2572_switchOff_RFoutB>:
	R[44] &= ~(0x01 << 7);
	pll.out_pd_b = 0;
}

// Turns off RFout B output
void LMX2572_switchOff_RFoutB(struct PLL pll){
 8000874:	b084      	sub	sp, #16
 8000876:	b490      	push	{r4, r7}
 8000878:	af00      	add	r7, sp, #0
 800087a:	f107 0408 	add.w	r4, r7, #8
 800087e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[44] |= (0x01 << 7);
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <LMX2572_switchOff_RFoutB+0x30>)
 8000884:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <LMX2572_switchOff_RFoutB+0x30>)
 800088e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	pll.out_pd_b = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc90      	pop	{r4, r7}
 800089e:	b004      	add	sp, #16
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000220 	.word	0x20000220

080008a8 <LMX2572_pwr_RFoutA>:

// Sets RFoutA output power
void LMX2572_pwr_RFoutA(struct PLL pll){
 80008a8:	b084      	sub	sp, #16
 80008aa:	b490      	push	{r4, r7}
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	f107 0408 	add.w	r4, r7, #8
 80008b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	R[44] &= ~(0x3F << 8);
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <LMX2572_pwr_RFoutA+0x3c>)
 80008b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80008bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80008c0:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <LMX2572_pwr_RFoutA+0x3c>)
 80008c2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	R[44] |= (pll.out_pwr_a << 8);
 80008c6:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <LMX2572_pwr_RFoutA+0x3c>)
 80008c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80008cc:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80008d0:	0212      	lsls	r2, r2, #8
 80008d2:	4313      	orrs	r3, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <LMX2572_pwr_RFoutA+0x3c>)
 80008d6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc90      	pop	{r4, r7}
 80008e0:	b004      	add	sp, #16
 80008e2:	4770      	bx	lr
 80008e4:	20000220 	.word	0x20000220

080008e8 <LMX2572_read>:
}

// **** TO BE TESTED ******************************************

// Reads a register value from the PLL
uint32_t LMX2572_read(SPI_HandleTypeDef *hspi, uint32_t value) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
	uint32_t read = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
	uint8_t read_value[2] = {0x00, 0x00};
 80008f6:	2300      	movs	r3, #0
 80008f8:	823b      	strh	r3, [r7, #16]
	uint8_t spi_buf[3] = {0,0,0};
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <LMX2572_read+0x90>)
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	4611      	mov	r1, r2
 8000904:	8019      	strh	r1, [r3, #0]
 8000906:	3302      	adds	r3, #2
 8000908:	0c12      	lsrs	r2, r2, #16
 800090a:	701a      	strb	r2, [r3, #0]
	spi_buf[2] = value | (1<<7);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000914:	b2db      	uxtb	r3, r3
 8000916:	73bb      	strb	r3, [r7, #14]
	spi_buf[1] = value >> 8;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	b2db      	uxtb	r3, r3
 800091e:	737b      	strb	r3, [r7, #13]
	spi_buf[0] = value >> 16;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	0c1b      	lsrs	r3, r3, #16
 8000924:	b2db      	uxtb	r3, r3
 8000926:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// CSB LOW
 8000928:	2200      	movs	r2, #0
 800092a:	2110      	movs	r1, #16
 800092c:	4813      	ldr	r0, [pc, #76]	; (800097c <LMX2572_read+0x94>)
 800092e:	f000 fea5 	bl	800167c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, spi_buf, 3, 100);
 8000932:	f107 010c 	add.w	r1, r7, #12
 8000936:	2364      	movs	r3, #100	; 0x64
 8000938:	2203      	movs	r2, #3
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f002 fa65 	bl	8002e0a <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi, read_value, 2, 10);
 8000940:	f107 0110 	add.w	r1, r7, #16
 8000944:	230a      	movs	r3, #10
 8000946:	2202      	movs	r2, #2
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f002 fbcc 	bl	80030e6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// CSB HIGH
 800094e:	2201      	movs	r2, #1
 8000950:	2110      	movs	r1, #16
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <LMX2572_read+0x94>)
 8000954:	f000 fe92 	bl	800167c <HAL_GPIO_WritePin>

	read += read_value[0];
 8000958:	7c3b      	ldrb	r3, [r7, #16]
 800095a:	461a      	mov	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	4413      	add	r3, r2
 8000960:	617b      	str	r3, [r7, #20]
	read += read_value[1] >> 8;
 8000962:	7c7b      	ldrb	r3, [r7, #17]
 8000964:	121b      	asrs	r3, r3, #8
 8000966:	461a      	mov	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	4413      	add	r3, r2
 800096c:	617b      	str	r3, [r7, #20]
	return read;
 800096e:	697b      	ldr	r3, [r7, #20]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	080043b8 	.word	0x080043b8
 800097c:	48000400 	.word	0x48000400

08000980 <LMX2572_init>:
	R[37] &= ~(0x3F << 8);
	R[37] |= (pll.PFD_DLY_SEL << 8);
}

// Initializes LMX2572 with default values
PLL LMX2572_init(struct PLL pll, SPI_HandleTypeDef *hspi) {
 8000980:	b084      	sub	sp, #16
 8000982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000984:	b099      	sub	sp, #100	; 0x64
 8000986:	af0a      	add	r7, sp, #40	; 0x28
 8000988:	6378      	str	r0, [r7, #52]	; 0x34
 800098a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800098e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	pll = LMX2572_defaultConfig(pll);
 8000992:	f107 0654 	add.w	r6, r7, #84	; 0x54
 8000996:	466d      	mov	r5, sp
 8000998:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	602b      	str	r3, [r5, #0]
 80009a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ae:	4630      	mov	r0, r6
 80009b0:	f7ff fe6a 	bl	8000688 <LMX2572_defaultConfig>
	pll = LMX2572_det_param(pll);
 80009b4:	463e      	mov	r6, r7
 80009b6:	466d      	mov	r5, sp
 80009b8:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80009bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	602b      	str	r3, [r5, #0]
 80009c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80009ce:	4630      	mov	r0, r6
 80009d0:	f7ff fdd6 	bl	8000580 <LMX2572_det_param>
 80009d4:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80009d8:	463d      	mov	r5, r7
 80009da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	LMX2572_set_frequency(pll);
 80009ea:	466d      	mov	r5, sp
 80009ec:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80009f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a02:	f7ff fead 	bl	8000760 <LMX2572_set_frequency>
	LMX2572_pwr_RFoutA(pll);
 8000a06:	466d      	mov	r5, sp
 8000a08:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a10:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a14:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1e:	f7ff ff43 	bl	80008a8 <LMX2572_pwr_RFoutA>
	LMX2572_switchOff_RFoutA(pll);
 8000a22:	466d      	mov	r5, sp
 8000a24:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3a:	f7ff ff01 	bl	8000840 <LMX2572_switchOff_RFoutA>
	LMX2572_switchOff_RFoutB(pll);
 8000a3e:	466d      	mov	r5, sp
 8000a40:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8000a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a56:	f7ff ff0d 	bl	8000874 <LMX2572_switchOff_RFoutB>
	LMX2572_load_regs(hspi);
 8000a5a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000a5e:	f7ff fd61 	bl	8000524 <LMX2572_load_regs>

	return pll;
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	461d      	mov	r5, r3
 8000a66:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000a7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a7c:	373c      	adds	r7, #60	; 0x3c
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000a84:	b004      	add	sp, #16
 8000a86:	4770      	bx	lr

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	b099      	sub	sp, #100	; 0x64
 8000a8c:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f000 fae9 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f84d 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 f92f 	bl	8000cf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a9a:	f000 f8fd 	bl	8000c98 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a9e:	f000 f8bd 	bl	8000c1c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  PLL mypll;
  mypll = LMX2572_init(mypll, &hspi1);
 8000aa2:	1d3e      	adds	r6, r7, #4
 8000aa4:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <main+0xa0>)
 8000aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8000aa8:	466d      	mov	r5, sp
 8000aaa:	f107 0410 	add.w	r4, r7, #16
 8000aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab6:	6823      	ldr	r3, [r4, #0]
 8000ab8:	602b      	str	r3, [r5, #0]
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000abe:	4630      	mov	r0, r6
 8000ac0:	f7ff ff5e 	bl	8000980 <LMX2572_init>
  printf("");

  uint32_t read;
  read= LMX2572_read(&hspi1, R[0]);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <main+0xa4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4817      	ldr	r0, [pc, #92]	; (8000b28 <main+0xa0>)
 8000acc:	f7ff ff0c 	bl	80008e8 <LMX2572_read>
 8000ad0:	6378      	str	r0, [r7, #52]	; 0x34
  read = LMX2572_read(&hspi1, R[1]);
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <main+0xa4>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4813      	ldr	r0, [pc, #76]	; (8000b28 <main+0xa0>)
 8000ada:	f7ff ff05 	bl	80008e8 <LMX2572_read>
 8000ade:	6378      	str	r0, [r7, #52]	; 0x34
  read = LMX2572_read(&hspi1, R[2]);
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <main+0xa4>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <main+0xa0>)
 8000ae8:	f7ff fefe 	bl	80008e8 <LMX2572_read>
 8000aec:	6378      	str	r0, [r7, #52]	; 0x34
  read = LMX2572_read(&hspi1, R[3]);
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <main+0xa4>)
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <main+0xa0>)
 8000af6:	f7ff fef7 	bl	80008e8 <LMX2572_read>
 8000afa:	6378      	str	r0, [r7, #52]	; 0x34
  read = LMX2572_read(&hspi1, R[4]);
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <main+0xa4>)
 8000afe:	691b      	ldr	r3, [r3, #16]
 8000b00:	4619      	mov	r1, r3
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <main+0xa0>)
 8000b04:	f7ff fef0 	bl	80008e8 <LMX2572_read>
 8000b08:	6378      	str	r0, [r7, #52]	; 0x34
  read = LMX2572_read(&hspi1, R[5]);
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <main+0xa4>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <main+0xa0>)
 8000b12:	f7ff fee9 	bl	80008e8 <LMX2572_read>
 8000b16:	6378      	str	r0, [r7, #52]	; 0x34
  read = LMX2572_read(&hspi1, R[6]);
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <main+0xa4>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4802      	ldr	r0, [pc, #8]	; (8000b28 <main+0xa0>)
 8000b20:	f7ff fee2 	bl	80008e8 <LMX2572_read>
 8000b24:	6378      	str	r0, [r7, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <main+0x9e>
 8000b28:	20000610 	.word	0x20000610
 8000b2c:	20000418 	.word	0x20000418

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0b8      	sub	sp, #224	; 0xe0
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b3a:	2244      	movs	r2, #68	; 0x44
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fc26 	bl	8004390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2288      	movs	r2, #136	; 0x88
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 fc18 	bl	8004390 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b86:	230a      	movs	r3, #10
 8000b88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fde6 	bl	8001774 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bae:	f000 f921 	bl	8000df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bd0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 f9b2 	bl	8001f40 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000be2:	f000 f907 	bl	8000df4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fbab 	bl	800234c <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bfc:	f000 f8fa 	bl	8000df4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c00:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c04:	f000 fd60 	bl	80016c8 <HAL_PWREx_ControlVoltageScaling>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000c0e:	f000 f8f1 	bl	8000df4 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	37e0      	adds	r7, #224	; 0xe0
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_SPI1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c52:	2228      	movs	r2, #40	; 0x28
 8000c54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c6a:	2207      	movs	r2, #7
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_SPI1_Init+0x74>)
 8000c7c:	f002 f822 	bl	8002cc4 <HAL_SPI_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c86:	f000 f8b5 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000610 	.word	0x20000610
 8000c94:	40013000 	.word	0x40013000

08000c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <MX_USART2_UART_Init+0x5c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cdc:	f002 fefa 	bl	8003ad4 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ce6:	f000 f885 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000674 	.word	0x20000674
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_GPIO_Init+0xec>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f000 fc80 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4819      	ldr	r0, [pc, #100]	; (8000de8 <MX_GPIO_Init+0xf0>)
 8000d82:	f000 fc7b 	bl	800167c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <MX_GPIO_Init+0xf4>)
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <MX_GPIO_Init+0xf8>)
 8000d9c:	f000 fac4 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbc:	f000 fab4 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_GPIO_Init+0xf0>)
 8000dd8:	f000 faa6 	bl	8001328 <HAL_GPIO_Init>

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	; 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400
 8000dec:	10210000 	.word	0x10210000
 8000df0:	48000800 	.word	0x48000800

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_MspInit+0x44>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <HAL_MspInit+0x44>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6613      	str	r3, [r2, #96]	; 0x60
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <HAL_MspInit+0x44>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_MspInit+0x44>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_MspInit+0x44>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_MspInit+0x44>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_SPI_MspInit+0x7c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d128      	bne.n	8000ebc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_SPI_MspInit+0x80>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <HAL_SPI_MspInit+0x80>)
 8000e70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e74:	6613      	str	r3, [r2, #96]	; 0x60
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_SPI_MspInit+0x80>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_SPI_MspInit+0x80>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_SPI_MspInit+0x80>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_SPI_MspInit+0x80>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e9a:	23e0      	movs	r3, #224	; 0xe0
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 fa36 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ebc:	bf00      	nop
 8000ebe:	3728      	adds	r7, #40	; 0x28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40013000 	.word	0x40013000
 8000ec8:	40021000 	.word	0x40021000

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a17      	ldr	r2, [pc, #92]	; (8000f48 <HAL_UART_MspInit+0x7c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d128      	bne.n	8000f40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3c:	f000 f9f4 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3728      	adds	r7, #40	; 0x28
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40021000 	.word	0x40021000

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f8be 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <SystemInit+0x64>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a16      	ldr	r2, [pc, #88]	; (8001008 <SystemInit+0x64>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <SystemInit+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a13      	ldr	r2, [pc, #76]	; (800100c <SystemInit+0x68>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <SystemInit+0x68>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <SystemInit+0x68>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a0f      	ldr	r2, [pc, #60]	; (800100c <SystemInit+0x68>)
 8000fd0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fd4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <SystemInit+0x68>)
 8000fdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <SystemInit+0x68>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <SystemInit+0x68>)
 8000fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <SystemInit+0x68>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SystemInit+0x64>)
 8000ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffa:	609a      	str	r2, [r3, #8]
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	40021000 	.word	0x40021000

08001010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001048 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001014:	f7ff ffc6 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001018:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800101a:	e003      	b.n	8001024 <LoopCopyDataInit>

0800101c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800101e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001020:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001022:	3104      	adds	r1, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001028:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800102a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800102c:	d3f6      	bcc.n	800101c <CopyDataInit>
	ldr	r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001030:	e002      	b.n	8001038 <LoopFillZerobss>

08001032 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001032:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001034:	f842 3b04 	str.w	r3, [r2], #4

08001038 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <LoopForever+0x16>)
	cmp	r2, r3
 800103a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800103c:	d3f9      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103e:	f003 f983 	bl	8004348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001042:	f7ff fd21 	bl	8000a88 <main>

08001046 <LoopForever>:

LoopForever:
    b LoopForever
 8001046:	e7fe      	b.n	8001046 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001048:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800104c:	08004414 	.word	0x08004414
	ldr	r0, =_sdata
 8001050:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001054:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8001058:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 800105c:	200006f8 	.word	0x200006f8

08001060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC1_2_IRQHandler>
	...

08001064 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_Init+0x3c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <HAL_Init+0x3c>)
 8001074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001078:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107a:	2003      	movs	r0, #3
 800107c:	f000 f920 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f80f 	bl	80010a4 <HAL_InitTick>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	e001      	b.n	8001096 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001092:	f7ff feb5 	bl	8000e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001096:	79fb      	ldrb	r3, [r7, #7]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40022000 	.word	0x40022000

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <HAL_InitTick+0x6c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d023      	beq.n	8001100 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_InitTick+0x70>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_InitTick+0x6c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f91d 	bl	800130e <HAL_SYSTICK_Config>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10f      	bne.n	80010fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d809      	bhi.n	80010f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f8f5 	bl	80012d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_InitTick+0x74>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e007      	b.n	8001104 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e004      	b.n	8001104 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e001      	b.n	8001104 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000200 	.word	0x20000200
 8001114:	200001f8 	.word	0x200001f8
 8001118:	200001fc 	.word	0x200001fc

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000200 	.word	0x20000200
 8001140:	200006f4 	.word	0x200006f4

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	200006f4 	.word	0x200006f4

0800115c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	; (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	; (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	; 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff47 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff5c 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffb0 	bl	800127c <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	e17f      	b.n	8001638 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8171 	beq.w	8001632 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d00b      	beq.n	8001370 <HAL_GPIO_Init+0x48>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d007      	beq.n	8001370 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001364:	2b11      	cmp	r3, #17
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b12      	cmp	r3, #18
 800136e:	d130      	bne.n	80013d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	2203      	movs	r2, #3
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013a6:	2201      	movs	r2, #1
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	f003 0201 	and.w	r2, r3, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d118      	bne.n	8001410 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x128>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b12      	cmp	r3, #18
 800144e:	d123      	bne.n	8001498 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	08da      	lsrs	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3208      	adds	r2, #8
 8001458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	08da      	lsrs	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3208      	adds	r2, #8
 8001492:	6939      	ldr	r1, [r7, #16]
 8001494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 80ac 	beq.w	8001632 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b5f      	ldr	r3, [pc, #380]	; (8001658 <HAL_GPIO_Init+0x330>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014de:	4a5e      	ldr	r2, [pc, #376]	; (8001658 <HAL_GPIO_Init+0x330>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6613      	str	r3, [r2, #96]	; 0x60
 80014e6:	4b5c      	ldr	r3, [pc, #368]	; (8001658 <HAL_GPIO_Init+0x330>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f2:	4a5a      	ldr	r2, [pc, #360]	; (800165c <HAL_GPIO_Init+0x334>)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151c:	d025      	beq.n	800156a <HAL_GPIO_Init+0x242>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4f      	ldr	r2, [pc, #316]	; (8001660 <HAL_GPIO_Init+0x338>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d01f      	beq.n	8001566 <HAL_GPIO_Init+0x23e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4e      	ldr	r2, [pc, #312]	; (8001664 <HAL_GPIO_Init+0x33c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d019      	beq.n	8001562 <HAL_GPIO_Init+0x23a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4d      	ldr	r2, [pc, #308]	; (8001668 <HAL_GPIO_Init+0x340>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x236>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4c      	ldr	r2, [pc, #304]	; (800166c <HAL_GPIO_Init+0x344>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x232>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4b      	ldr	r2, [pc, #300]	; (8001670 <HAL_GPIO_Init+0x348>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x22e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4a      	ldr	r2, [pc, #296]	; (8001674 <HAL_GPIO_Init+0x34c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x22a>
 800154e:	2306      	movs	r3, #6
 8001550:	e00c      	b.n	800156c <HAL_GPIO_Init+0x244>
 8001552:	2307      	movs	r3, #7
 8001554:	e00a      	b.n	800156c <HAL_GPIO_Init+0x244>
 8001556:	2305      	movs	r3, #5
 8001558:	e008      	b.n	800156c <HAL_GPIO_Init+0x244>
 800155a:	2304      	movs	r3, #4
 800155c:	e006      	b.n	800156c <HAL_GPIO_Init+0x244>
 800155e:	2303      	movs	r3, #3
 8001560:	e004      	b.n	800156c <HAL_GPIO_Init+0x244>
 8001562:	2302      	movs	r3, #2
 8001564:	e002      	b.n	800156c <HAL_GPIO_Init+0x244>
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x244>
 800156a:	2300      	movs	r3, #0
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	f002 0203 	and.w	r2, r2, #3
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	4093      	lsls	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800157c:	4937      	ldr	r1, [pc, #220]	; (800165c <HAL_GPIO_Init+0x334>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_GPIO_Init+0x350>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015ae:	4a32      	ldr	r2, [pc, #200]	; (8001678 <HAL_GPIO_Init+0x350>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_GPIO_Init+0x350>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d8:	4a27      	ldr	r2, [pc, #156]	; (8001678 <HAL_GPIO_Init+0x350>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_GPIO_Init+0x350>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001602:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_GPIO_Init+0x350>)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_GPIO_Init+0x350>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <HAL_GPIO_Init+0x350>)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	f47f ae78 	bne.w	8001338 <HAL_GPIO_Init+0x10>
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000
 8001660:	48000400 	.word	0x48000400
 8001664:	48000800 	.word	0x48000800
 8001668:	48000c00 	.word	0x48000c00
 800166c:	48001000 	.word	0x48001000
 8001670:	48001400 	.word	0x48001400
 8001674:	48001800 	.word	0x48001800
 8001678:	40010400 	.word	0x40010400

0800167c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	807b      	strh	r3, [r7, #2]
 8001688:	4613      	mov	r3, r2
 800168a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800168c:	787b      	ldrb	r3, [r7, #1]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169a:	887a      	ldrh	r2, [r7, #2]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40007000 	.word	0x40007000

080016c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d6:	d130      	bne.n	800173a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d8:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e4:	d038      	beq.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2232      	movs	r2, #50	; 0x32
 80016fc:	fb02 f303 	mul.w	r3, r2, r3
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	0c9b      	lsrs	r3, r3, #18
 8001708:	3301      	adds	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800170c:	e002      	b.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3b01      	subs	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001720:	d102      	bne.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f2      	bne.n	800170e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001734:	d110      	bne.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e00f      	b.n	800175a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001746:	d007      	beq.n	8001758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001756:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40007000 	.word	0x40007000
 800176c:	200001f8 	.word	0x200001f8
 8001770:	431bde83 	.word	0x431bde83

08001774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e3d4      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001786:	4ba1      	ldr	r3, [pc, #644]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001790:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80e4 	beq.w	8001970 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_RCC_OscConfig+0x4a>
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	f040 808b 	bne.w	80018cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	f040 8087 	bne.w	80018cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017be:	4b93      	ldr	r3, [pc, #588]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x62>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e3ac      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1a      	ldr	r2, [r3, #32]
 80017da:	4b8c      	ldr	r3, [pc, #560]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d004      	beq.n	80017f0 <HAL_RCC_OscConfig+0x7c>
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017ee:	e005      	b.n	80017fc <HAL_RCC_OscConfig+0x88>
 80017f0:	4b86      	ldr	r3, [pc, #536]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d223      	bcs.n	8001848 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fd41 	bl	800228c <RCC_SetFlashLatencyFromMSIRange>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e38d      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001814:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a7c      	ldr	r2, [pc, #496]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4977      	ldr	r1, [pc, #476]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001832:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	4972      	ldr	r1, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001842:	4313      	orrs	r3, r2
 8001844:	604b      	str	r3, [r1, #4]
 8001846:	e025      	b.n	8001894 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001848:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a6f      	ldr	r2, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b6d      	ldr	r3, [pc, #436]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	496a      	ldr	r1, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001866:	4b69      	ldr	r3, [pc, #420]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	4965      	ldr	r1, [pc, #404]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d109      	bne.n	8001894 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 fd01 	bl	800228c <RCC_SetFlashLatencyFromMSIRange>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e34d      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001894:	f000 fc36 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	495a      	ldr	r1, [pc, #360]	; (8001a10 <HAL_RCC_OscConfig+0x29c>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_OscConfig+0x2a0>)
 80018b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018b4:	4b58      	ldr	r3, [pc, #352]	; (8001a18 <HAL_RCC_OscConfig+0x2a4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fbf3 	bl	80010a4 <HAL_InitTick>
 80018be:	4603      	mov	r3, r0
 80018c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d052      	beq.n	800196e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	e331      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d032      	beq.n	800193a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018d4:	4b4d      	ldr	r3, [pc, #308]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc30 	bl	8001144 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e8:	f7ff fc2c 	bl	8001144 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e31a      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018fa:	4b44      	ldr	r3, [pc, #272]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a40      	ldr	r2, [pc, #256]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b3e      	ldr	r3, [pc, #248]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	493b      	ldr	r1, [pc, #236]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	4936      	ldr	r1, [pc, #216]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e01a      	b.n	8001970 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800193a:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a33      	ldr	r2, [pc, #204]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001946:	f7ff fbfd 	bl	8001144 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194e:	f7ff fbf9 	bl	8001144 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e2e7      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001960:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x1da>
 800196c:	e000      	b.n	8001970 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	d074      	beq.n	8001a66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	2b08      	cmp	r3, #8
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x21a>
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d10e      	bne.n	80019a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d10b      	bne.n	80019a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198e:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d064      	beq.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d160      	bne.n	8001a64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e2c4      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x24a>
 80019b0:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	e01d      	b.n	80019fa <HAL_RCC_OscConfig+0x286>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x26e>
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e00b      	b.n	80019fa <HAL_RCC_OscConfig+0x286>
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_RCC_OscConfig+0x298>)
 80019f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7ff fb9f 	bl	8001144 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a08:	e011      	b.n	8001a2e <HAL_RCC_OscConfig+0x2ba>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	080043bc 	.word	0x080043bc
 8001a14:	200001f8 	.word	0x200001f8
 8001a18:	200001fc 	.word	0x200001fc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff fb92 	bl	8001144 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e280      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2e:	4baf      	ldr	r3, [pc, #700]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x2a8>
 8001a3a:	e014      	b.n	8001a66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fb82 	bl	8001144 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fb7e 	bl	8001144 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e26c      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a56:	4ba5      	ldr	r3, [pc, #660]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2d0>
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d060      	beq.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x310>
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d119      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d116      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a84:	4b99      	ldr	r3, [pc, #612]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_OscConfig+0x328>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e249      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b93      	ldr	r3, [pc, #588]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	061b      	lsls	r3, r3, #24
 8001aaa:	4990      	ldr	r1, [pc, #576]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ab0:	e040      	b.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d023      	beq.n	8001b02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aba:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a8b      	ldr	r2, [pc, #556]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fb3d 	bl	8001144 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fb39 	bl	8001144 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e227      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae0:	4b82      	ldr	r3, [pc, #520]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	061b      	lsls	r3, r3, #24
 8001afa:	497c      	ldr	r1, [pc, #496]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
 8001b00:	e018      	b.n	8001b34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b02:	4b7a      	ldr	r3, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a79      	ldr	r2, [pc, #484]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fb19 	bl	8001144 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b16:	f7ff fb15 	bl	8001144 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e203      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d03c      	beq.n	8001bba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4e:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff faf4 	bl	8001144 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b60:	f7ff faf0 	bl	8001144 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1de      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b72:	4b5e      	ldr	r3, [pc, #376]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0ef      	beq.n	8001b60 <HAL_RCC_OscConfig+0x3ec>
 8001b80:	e01b      	b.n	8001bba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b82:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b88:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7ff fad7 	bl	8001144 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fad3 	bl	8001144 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e1c1      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bac:	4b4f      	ldr	r3, [pc, #316]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ef      	bne.n	8001b9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80a6 	beq.w	8001d14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10d      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd8:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	4a43      	ldr	r2, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be2:	6593      	str	r3, [r2, #88]	; 0x58
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <HAL_RCC_OscConfig+0x57c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d118      	bne.n	8001c32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x57c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <HAL_RCC_OscConfig+0x57c>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff fa9a 	bl	8001144 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c14:	f7ff fa96 	bl	8001144 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e184      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c26:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <HAL_RCC_OscConfig+0x57c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d108      	bne.n	8001c4c <HAL_RCC_OscConfig+0x4d8>
 8001c3a:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	4a2a      	ldr	r2, [pc, #168]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c4a:	e024      	b.n	8001c96 <HAL_RCC_OscConfig+0x522>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b05      	cmp	r3, #5
 8001c52:	d110      	bne.n	8001c76 <HAL_RCC_OscConfig+0x502>
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	4a24      	ldr	r2, [pc, #144]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6a:	4a20      	ldr	r2, [pc, #128]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c74:	e00f      	b.n	8001c96 <HAL_RCC_OscConfig+0x522>
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001c8e:	f023 0304 	bic.w	r3, r3, #4
 8001c92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fa51 	bl	8001144 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7ff fa4d 	bl	8001144 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e139      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_RCC_OscConfig+0x578>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ed      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x532>
 8001cca:	e01a      	b.n	8001d02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fa3a 	bl	8001144 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd2:	e00f      	b.n	8001cf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fa36 	bl	8001144 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d906      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e122      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cf4:	4b90      	ldr	r3, [pc, #576]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1e8      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b8b      	ldr	r3, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	4a8a      	ldr	r2, [pc, #552]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8108 	beq.w	8001f2e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	f040 80d0 	bne.w	8001ec8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d28:	4b83      	ldr	r3, [pc, #524]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0203 	and.w	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d130      	bne.n	8001d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	3b01      	subs	r3, #1
 8001d48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d127      	bne.n	8001d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d11f      	bne.n	8001d9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d68:	2a07      	cmp	r2, #7
 8001d6a:	bf14      	ite	ne
 8001d6c:	2201      	movne	r2, #1
 8001d6e:	2200      	moveq	r2, #0
 8001d70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d113      	bne.n	8001d9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	085b      	lsrs	r3, r3, #1
 8001d82:	3b01      	subs	r3, #1
 8001d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d109      	bne.n	8001d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d06e      	beq.n	8001e7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b0c      	cmp	r3, #12
 8001da2:	d069      	beq.n	8001e78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d105      	bne.n	8001dbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001db0:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b7      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dc0:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a5c      	ldr	r2, [pc, #368]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dcc:	f7ff f9ba 	bl	8001144 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7ff f9b6 	bl	8001144 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0a4      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de6:	4b54      	ldr	r3, [pc, #336]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df2:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_RCC_OscConfig+0x7c8>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e02:	3a01      	subs	r2, #1
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e0c:	0212      	lsls	r2, r2, #8
 8001e0e:	4311      	orrs	r1, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e14:	0852      	lsrs	r2, r2, #1
 8001e16:	3a01      	subs	r2, #1
 8001e18:	0552      	lsls	r2, r2, #21
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e20:	0852      	lsrs	r2, r2, #1
 8001e22:	3a01      	subs	r2, #1
 8001e24:	0652      	lsls	r2, r2, #25
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e2c:	0912      	lsrs	r2, r2, #4
 8001e2e:	0452      	lsls	r2, r2, #17
 8001e30:	430a      	orrs	r2, r1
 8001e32:	4941      	ldr	r1, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e38:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a3e      	ldr	r2, [pc, #248]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e44:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4a3b      	ldr	r2, [pc, #236]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e50:	f7ff f978 	bl	8001144 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff f974 	bl	8001144 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e062      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e6a:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e76:	e05a      	b.n	8001f2e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e059      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d152      	bne.n	8001f2e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ea0:	f7ff f950 	bl	8001144 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff f94c 	bl	8001144 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e03a      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x734>
 8001ec6:	e032      	b.n	8001f2e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d02d      	beq.n	8001f2a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001ed4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d105      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001eec:	f023 0303 	bic.w	r3, r3, #3
 8001ef0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001ef8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff f91f 	bl	8001144 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff f91b 	bl	8001144 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e009      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_OscConfig+0x7c4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x796>
 8001f28:	e001      	b.n	8001f2e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	f99d808c 	.word	0xf99d808c

08001f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0c8      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d910      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b63      	ldr	r3, [pc, #396]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 0207 	bic.w	r2, r3, #7
 8001f6a:	4961      	ldr	r1, [pc, #388]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0b0      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d04c      	beq.n	800202a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f98:	4b56      	ldr	r3, [pc, #344]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d121      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e09e      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb0:	4b50      	ldr	r3, [pc, #320]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d115      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e092      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e086      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd8:	4b46      	ldr	r3, [pc, #280]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e07e      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe8:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 0203 	bic.w	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	493f      	ldr	r1, [pc, #252]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ffa:	f7ff f8a3 	bl	8001144 <HAL_GetTick>
 8001ffe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002000:	e00a      	b.n	8002018 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002002:	f7ff f89f 	bl	8001144 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e066      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 020c 	and.w	r2, r3, #12
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	429a      	cmp	r2, r3
 8002028:	d1eb      	bne.n	8002002 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	492c      	ldr	r1, [pc, #176]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d210      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4924      	ldr	r1, [pc, #144]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b22      	ldr	r3, [pc, #136]	; (80020f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e036      	b.n	80020e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4918      	ldr	r1, [pc, #96]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4910      	ldr	r1, [pc, #64]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020b6:	f000 f825 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_RCC_ClockConfig+0x1b4>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	490c      	ldr	r1, [pc, #48]	; (80020f8 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	5ccb      	ldrb	r3, [r1, r3]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	fa22 f303 	lsr.w	r3, r2, r3
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020d6:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <HAL_RCC_ClockConfig+0x1c0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe ffe2 	bl	80010a4 <HAL_InitTick>
 80020e0:	4603      	mov	r3, r0
 80020e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80020e4:	7afb      	ldrb	r3, [r7, #11]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000
 80020f4:	40021000 	.word	0x40021000
 80020f8:	080043bc 	.word	0x080043bc
 80020fc:	200001f8 	.word	0x200001f8
 8002100:	200001fc 	.word	0x200001fc

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002112:	4b3e      	ldr	r3, [pc, #248]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x34>
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d121      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d11e      	bne.n	8002176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002138:	4b34      	ldr	r3, [pc, #208]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002144:	4b31      	ldr	r3, [pc, #196]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e005      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002160:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10d      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002174:	e00a      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b04      	cmp	r3, #4
 800217a:	d102      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800217c:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_RCC_GetSysClockFreq+0x110>)
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e004      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d101      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002188:	4b23      	ldr	r3, [pc, #140]	; (8002218 <HAL_RCC_GetSysClockFreq+0x114>)
 800218a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d134      	bne.n	80021fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0xa6>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d003      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0xac>
 80021a8:	e005      	b.n	80021b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ac:	617b      	str	r3, [r7, #20]
      break;
 80021ae:	e005      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_GetSysClockFreq+0x114>)
 80021b2:	617b      	str	r3, [r7, #20]
      break;
 80021b4:	e002      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	617b      	str	r3, [r7, #20]
      break;
 80021ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	3301      	adds	r3, #1
 80021c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	0a1b      	lsrs	r3, r3, #8
 80021d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	fb02 f203 	mul.w	r2, r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_GetSysClockFreq+0x108>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	0e5b      	lsrs	r3, r3, #25
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	3301      	adds	r3, #1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021fc:	69bb      	ldr	r3, [r7, #24]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	; 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	080043d4 	.word	0x080043d4
 8002214:	00f42400 	.word	0x00f42400
 8002218:	007a1200 	.word	0x007a1200

0800221c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_RCC_GetHCLKFreq+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	200001f8 	.word	0x200001f8

08002234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002238:	f7ff fff0 	bl	800221c <HAL_RCC_GetHCLKFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4904      	ldr	r1, [pc, #16]	; (800225c <HAL_RCC_GetPCLK1Freq+0x28>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	f003 031f 	and.w	r3, r3, #31
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	080043cc 	.word	0x080043cc

08002260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002264:	f7ff ffda 	bl	800221c <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0adb      	lsrs	r3, r3, #11
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4904      	ldr	r1, [pc, #16]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40021000 	.word	0x40021000
 8002288:	080043cc 	.word	0x080043cc

0800228c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022a4:	f7ff fa02 	bl	80016ac <HAL_PWREx_GetVoltageRange>
 80022a8:	6178      	str	r0, [r7, #20]
 80022aa:	e014      	b.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	4a24      	ldr	r2, [pc, #144]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b6:	6593      	str	r3, [r2, #88]	; 0x58
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022c4:	f7ff f9f2 	bl	80016ac <HAL_PWREx_GetVoltageRange>
 80022c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022dc:	d10b      	bne.n	80022f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d919      	bls.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2ba0      	cmp	r3, #160	; 0xa0
 80022e8:	d902      	bls.n	80022f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ea:	2302      	movs	r3, #2
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	e013      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f0:	2301      	movs	r3, #1
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e010      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b80      	cmp	r3, #128	; 0x80
 80022fa:	d902      	bls.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022fc:	2303      	movs	r3, #3
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	e00a      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b80      	cmp	r3, #128	; 0x80
 8002306:	d102      	bne.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002308:	2302      	movs	r3, #2
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	e004      	b.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b70      	cmp	r3, #112	; 0x70
 8002312:	d101      	bne.n	8002318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002314:	2301      	movs	r3, #1
 8002316:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f023 0207 	bic.w	r2, r3, #7
 8002320:	4909      	ldr	r1, [pc, #36]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	40022000 	.word	0x40022000

0800234c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002354:	2300      	movs	r3, #0
 8002356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002358:	2300      	movs	r3, #0
 800235a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002364:	2b00      	cmp	r3, #0
 8002366:	d041      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800236c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002370:	d02a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002372:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002376:	d824      	bhi.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800237c:	d008      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800237e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002382:	d81e      	bhi.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800238c:	d010      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800238e:	e018      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002390:	4b86      	ldr	r3, [pc, #536]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4a85      	ldr	r2, [pc, #532]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800239c:	e015      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fabb 	bl	8002920 <RCCEx_PLLSAI1_Config>
 80023aa:	4603      	mov	r3, r0
 80023ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ae:	e00c      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3320      	adds	r3, #32
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fba6 	bl	8002b08 <RCCEx_PLLSAI2_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c0:	e003      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	74fb      	strb	r3, [r7, #19]
      break;
 80023c6:	e000      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ca:	7cfb      	ldrb	r3, [r7, #19]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d0:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023de:	4973      	ldr	r1, [pc, #460]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023e6:	e001      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d041      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002400:	d02a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002402:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002406:	d824      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002408:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800240c:	d008      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800240e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002412:	d81e      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800241c:	d010      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800241e:	e018      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002420:	4b62      	ldr	r3, [pc, #392]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a61      	ldr	r2, [pc, #388]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800242c:	e015      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3304      	adds	r3, #4
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fa73 	bl	8002920 <RCCEx_PLLSAI1_Config>
 800243a:	4603      	mov	r3, r0
 800243c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800243e:	e00c      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3320      	adds	r3, #32
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fb5e 	bl	8002b08 <RCCEx_PLLSAI2_Config>
 800244c:	4603      	mov	r3, r0
 800244e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002450:	e003      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	74fb      	strb	r3, [r7, #19]
      break;
 8002456:	e000      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002460:	4b52      	ldr	r3, [pc, #328]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002466:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800246e:	494f      	ldr	r1, [pc, #316]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002476:	e001      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a0 	beq.w	80025ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a40      	ldr	r2, [pc, #256]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
 80024b0:	4b3e      	ldr	r3, [pc, #248]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a3a      	ldr	r2, [pc, #232]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fe3a 	bl	8001144 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024d2:	e009      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7fe fe36 	bl	8001144 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d902      	bls.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	74fb      	strb	r3, [r7, #19]
        break;
 80024e6:	e005      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ef      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d15c      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002504:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01f      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	429a      	cmp	r2, r3
 8002516:	d019      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002522:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	4a20      	ldr	r2, [pc, #128]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fdf5 	bl	8001144 <HAL_GetTick>
 800255a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255c:	e00b      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7fe fdf1 	bl	8001144 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d902      	bls.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	74fb      	strb	r3, [r7, #19]
            break;
 8002574:	e006      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ec      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259a:	4904      	ldr	r1, [pc, #16]	; (80025ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025a2:	e009      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
 80025a8:	e006      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b8:	7c7b      	ldrb	r3, [r7, #17]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d105      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025be:	4b9e      	ldr	r3, [pc, #632]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	4a9d      	ldr	r2, [pc, #628]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d6:	4b98      	ldr	r3, [pc, #608]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025dc:	f023 0203 	bic.w	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	4994      	ldr	r1, [pc, #592]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00a      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f8:	4b8f      	ldr	r3, [pc, #572]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f023 020c 	bic.w	r2, r3, #12
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	498c      	ldr	r1, [pc, #560]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800261a:	4b87      	ldr	r3, [pc, #540]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002620:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	4983      	ldr	r1, [pc, #524]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800263c:	4b7e      	ldr	r3, [pc, #504]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	497b      	ldr	r1, [pc, #492]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	4313      	orrs	r3, r2
 800264e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266c:	4972      	ldr	r1, [pc, #456]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00a      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002680:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	496a      	ldr	r1, [pc, #424]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026a2:	4b65      	ldr	r3, [pc, #404]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	4961      	ldr	r1, [pc, #388]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026c4:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	4959      	ldr	r1, [pc, #356]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e6:	4b54      	ldr	r3, [pc, #336]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	4950      	ldr	r1, [pc, #320]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002708:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	4948      	ldr	r1, [pc, #288]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800272a:	4b43      	ldr	r3, [pc, #268]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	493f      	ldr	r1, [pc, #252]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d028      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800274c:	4b3a      	ldr	r3, [pc, #232]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275a:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800276a:	d106      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276c:	4b32      	ldr	r3, [pc, #200]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a31      	ldr	r2, [pc, #196]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002776:	60d3      	str	r3, [r2, #12]
 8002778:	e011      	b.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002782:	d10c      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	2101      	movs	r1, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f8c8 	bl	8002920 <RCCEx_PLLSAI1_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d028      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	491f      	ldr	r1, [pc, #124]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027c8:	d106      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4a1a      	ldr	r2, [pc, #104]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d4:	60d3      	str	r3, [r2, #12]
 80027d6:	e011      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2101      	movs	r1, #1
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f899 	bl	8002920 <RCCEx_PLLSAI1_Config>
 80027ee:	4603      	mov	r3, r0
 80027f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d02b      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002808:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002816:	4908      	ldr	r1, [pc, #32]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002826:	d109      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a02      	ldr	r2, [pc, #8]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002832:	60d3      	str	r3, [r2, #12]
 8002834:	e014      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002844:	d10c      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f000 f867 	bl	8002920 <RCCEx_PLLSAI1_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d02f      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287a:	4928      	ldr	r1, [pc, #160]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800288a:	d10d      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	2102      	movs	r1, #2
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f844 	bl	8002920 <RCCEx_PLLSAI1_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d014      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	74bb      	strb	r3, [r7, #18]
 80028a6:	e011      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3320      	adds	r3, #32
 80028b6:	2102      	movs	r1, #2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 f925 	bl	8002b08 <RCCEx_PLLSAI2_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290a:	4904      	ldr	r1, [pc, #16]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002912:	7cbb      	ldrb	r3, [r7, #18]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000

08002920 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800292e:	4b75      	ldr	r3, [pc, #468]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d018      	beq.n	800296c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800293a:	4b72      	ldr	r3, [pc, #456]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d10d      	bne.n	8002966 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
       ||
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002952:	4b6c      	ldr	r3, [pc, #432]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
       ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d047      	beq.n	80029f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	e044      	b.n	80029f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d018      	beq.n	80029a6 <RCCEx_PLLSAI1_Config+0x86>
 8002974:	2b03      	cmp	r3, #3
 8002976:	d825      	bhi.n	80029c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002978:	2b01      	cmp	r3, #1
 800297a:	d002      	beq.n	8002982 <RCCEx_PLLSAI1_Config+0x62>
 800297c:	2b02      	cmp	r3, #2
 800297e:	d009      	beq.n	8002994 <RCCEx_PLLSAI1_Config+0x74>
 8002980:	e020      	b.n	80029c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002982:	4b60      	ldr	r3, [pc, #384]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d11d      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002992:	e01a      	b.n	80029ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002994:	4b5b      	ldr	r3, [pc, #364]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d116      	bne.n	80029ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a4:	e013      	b.n	80029ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029a6:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10f      	bne.n	80029d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029b2:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029c2:	e006      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      break;
 80029c8:	e004      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ca:	bf00      	nop
 80029cc:	e002      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ce:	bf00      	nop
 80029d0:	e000      	b.n	80029d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10d      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029da:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	430b      	orrs	r3, r1
 80029f0:	4944      	ldr	r1, [pc, #272]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d17d      	bne.n	8002af8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029fc:	4b41      	ldr	r3, [pc, #260]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a40      	ldr	r2, [pc, #256]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a08:	f7fe fb9c 	bl	8001144 <HAL_GetTick>
 8002a0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a0e:	e009      	b.n	8002a24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a10:	f7fe fb98 	bl	8001144 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d902      	bls.n	8002a24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	73fb      	strb	r3, [r7, #15]
        break;
 8002a22:	e005      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a24:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ef      	bne.n	8002a10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d160      	bne.n	8002af8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d111      	bne.n	8002a60 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a3c:	4b31      	ldr	r3, [pc, #196]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6892      	ldr	r2, [r2, #8]
 8002a4c:	0211      	lsls	r1, r2, #8
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68d2      	ldr	r2, [r2, #12]
 8002a52:	0912      	lsrs	r2, r2, #4
 8002a54:	0452      	lsls	r2, r2, #17
 8002a56:	430a      	orrs	r2, r1
 8002a58:	492a      	ldr	r1, [pc, #168]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	610b      	str	r3, [r1, #16]
 8002a5e:	e027      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d112      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a66:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6892      	ldr	r2, [r2, #8]
 8002a76:	0211      	lsls	r1, r2, #8
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6912      	ldr	r2, [r2, #16]
 8002a7c:	0852      	lsrs	r2, r2, #1
 8002a7e:	3a01      	subs	r2, #1
 8002a80:	0552      	lsls	r2, r2, #21
 8002a82:	430a      	orrs	r2, r1
 8002a84:	491f      	ldr	r1, [pc, #124]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	610b      	str	r3, [r1, #16]
 8002a8a:	e011      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6892      	ldr	r2, [r2, #8]
 8002a9c:	0211      	lsls	r1, r2, #8
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6952      	ldr	r2, [r2, #20]
 8002aa2:	0852      	lsrs	r2, r2, #1
 8002aa4:	3a01      	subs	r2, #1
 8002aa6:	0652      	lsls	r2, r2, #25
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	4916      	ldr	r1, [pc, #88]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fb42 	bl	8001144 <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ac2:	e009      	b.n	8002ad8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ac4:	f7fe fb3e 	bl	8001144 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ad6:	e005      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	4904      	ldr	r1, [pc, #16]	; (8002b04 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000

08002b08 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b16:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d018      	beq.n	8002b54 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b22:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0203 	and.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d10d      	bne.n	8002b4e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
       ||
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b3a:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	091b      	lsrs	r3, r3, #4
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
       ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d047      	beq.n	8002bde <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
 8002b52:	e044      	b.n	8002bde <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d018      	beq.n	8002b8e <RCCEx_PLLSAI2_Config+0x86>
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d825      	bhi.n	8002bac <RCCEx_PLLSAI2_Config+0xa4>
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d002      	beq.n	8002b6a <RCCEx_PLLSAI2_Config+0x62>
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d009      	beq.n	8002b7c <RCCEx_PLLSAI2_Config+0x74>
 8002b68:	e020      	b.n	8002bac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b6a:	4b55      	ldr	r3, [pc, #340]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d11d      	bne.n	8002bb2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7a:	e01a      	b.n	8002bb2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b7c:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d116      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8c:	e013      	b.n	8002bb6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b8e:	4b4c      	ldr	r3, [pc, #304]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b9a:	4b49      	ldr	r3, [pc, #292]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002baa:	e006      	b.n	8002bba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb0:	e004      	b.n	8002bbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10d      	bne.n	8002bde <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bc2:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	4939      	ldr	r1, [pc, #228]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d167      	bne.n	8002cb4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a35      	ldr	r2, [pc, #212]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf0:	f7fe faa8 	bl	8001144 <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bf6:	e009      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bf8:	f7fe faa4 	bl	8001144 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d902      	bls.n	8002c0c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	73fb      	strb	r3, [r7, #15]
        break;
 8002c0a:	e005      	b.n	8002c18 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c0c:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ef      	bne.n	8002bf8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d14a      	bne.n	8002cb4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6892      	ldr	r2, [r2, #8]
 8002c34:	0211      	lsls	r1, r2, #8
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68d2      	ldr	r2, [r2, #12]
 8002c3a:	0912      	lsrs	r2, r2, #4
 8002c3c:	0452      	lsls	r2, r2, #17
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	491f      	ldr	r1, [pc, #124]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	614b      	str	r3, [r1, #20]
 8002c46:	e011      	b.n	8002c6c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	0211      	lsls	r1, r2, #8
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6912      	ldr	r2, [r2, #16]
 8002c5e:	0852      	lsrs	r2, r2, #1
 8002c60:	3a01      	subs	r2, #1
 8002c62:	0652      	lsls	r2, r2, #25
 8002c64:	430a      	orrs	r2, r1
 8002c66:	4916      	ldr	r1, [pc, #88]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c6c:	4b14      	ldr	r3, [pc, #80]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe fa64 	bl	8001144 <HAL_GetTick>
 8002c7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c7e:	e009      	b.n	8002c94 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c80:	f7fe fa60 	bl	8001144 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d902      	bls.n	8002c94 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	73fb      	strb	r3, [r7, #15]
          break;
 8002c92:	e005      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c94:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ef      	beq.n	8002c80 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000

08002cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e095      	b.n	8002e02 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce6:	d009      	beq.n	8002cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
 8002cee:	e005      	b.n	8002cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe f896 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d3c:	d902      	bls.n	8002d44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e002      	b.n	8002d4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d52:	d007      	beq.n	8002d64 <HAL_SPI_Init+0xa0>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d5c:	d002      	beq.n	8002d64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da6:	ea42 0103 	orr.w	r1, r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	f003 0204 	and.w	r2, r3, #4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002de0:	ea42 0103 	orr.w	r1, r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b088      	sub	sp, #32
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_SPI_Transmit+0x22>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e158      	b.n	80030de <HAL_SPI_Transmit+0x2d4>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e34:	f7fe f986 	bl	8001144 <HAL_GetTick>
 8002e38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d002      	beq.n	8002e50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e4e:	e13d      	b.n	80030cc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Transmit+0x52>
 8002e56:	88fb      	ldrh	r3, [r7, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e60:	e134      	b.n	80030cc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2203      	movs	r2, #3
 8002e66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	88fa      	ldrh	r2, [r7, #6]
 8002e80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eac:	d10f      	bne.n	8002ece <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ebc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ecc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d007      	beq.n	8002eec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ef4:	d94b      	bls.n	8002f8e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_SPI_Transmit+0xfa>
 8002efe:	8afb      	ldrh	r3, [r7, #22]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d13e      	bne.n	8002f82 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f28:	e02b      	b.n	8002f82 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d112      	bne.n	8002f5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	1c9a      	adds	r2, r3, #2
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f5c:	e011      	b.n	8002f82 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5e:	f7fe f8f1 	bl	8001144 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d803      	bhi.n	8002f76 <HAL_SPI_Transmit+0x16c>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d102      	bne.n	8002f7c <HAL_SPI_Transmit+0x172>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d102      	bne.n	8002f82 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f80:	e0a4      	b.n	80030cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ce      	bne.n	8002f2a <HAL_SPI_Transmit+0x120>
 8002f8c:	e07c      	b.n	8003088 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <HAL_SPI_Transmit+0x192>
 8002f96:	8afb      	ldrh	r3, [r7, #22]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d170      	bne.n	800307e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d912      	bls.n	8002fcc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	881a      	ldrh	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	1c9a      	adds	r2, r3, #2
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b02      	subs	r3, #2
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fca:	e058      	b.n	800307e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ff2:	e044      	b.n	800307e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d12b      	bne.n	800305a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d912      	bls.n	8003032 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	881a      	ldrh	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	1c9a      	adds	r2, r3, #2
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b02      	subs	r3, #2
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003030:	e025      	b.n	800307e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	7812      	ldrb	r2, [r2, #0]
 800303e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003058:	e011      	b.n	800307e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800305a:	f7fe f873 	bl	8001144 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d803      	bhi.n	8003072 <HAL_SPI_Transmit+0x268>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d102      	bne.n	8003078 <HAL_SPI_Transmit+0x26e>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800307c:	e026      	b.n	80030cc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1b5      	bne.n	8002ff4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	6839      	ldr	r1, [r7, #0]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fcdb 	bl	8003a48 <SPI_EndRxTxTransaction>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	77fb      	strb	r3, [r7, #31]
 80030c8:	e000      	b.n	80030cc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80030ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b088      	sub	sp, #32
 80030ea:	af02      	add	r7, sp, #8
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	4613      	mov	r3, r2
 80030f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003102:	d112      	bne.n	800312a <HAL_SPI_Receive+0x44>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10e      	bne.n	800312a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2204      	movs	r2, #4
 8003110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003114:	88fa      	ldrh	r2, [r7, #6]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f910 	bl	8003346 <HAL_SPI_TransmitReceive>
 8003126:	4603      	mov	r3, r0
 8003128:	e109      	b.n	800333e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_SPI_Receive+0x52>
 8003134:	2302      	movs	r3, #2
 8003136:	e102      	b.n	800333e <HAL_SPI_Receive+0x258>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003140:	f7fe f800 	bl	8001144 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003152:	2302      	movs	r3, #2
 8003154:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003156:	e0e9      	b.n	800332c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_SPI_Receive+0x7e>
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d102      	bne.n	800316a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003168:	e0e0      	b.n	800332c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2204      	movs	r2, #4
 800316e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	88fa      	ldrh	r2, [r7, #6]
 800318a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031b4:	d908      	bls.n	80031c8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e007      	b.n	80031d8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031d6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e0:	d10f      	bne.n	8003202 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320c:	2b40      	cmp	r3, #64	; 0x40
 800320e:	d007      	beq.n	8003220 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003228:	d867      	bhi.n	80032fa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800322a:	e030      	b.n	800328e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b01      	cmp	r3, #1
 8003238:	d117      	bne.n	800326a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f103 020c 	add.w	r2, r3, #12
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	7812      	ldrb	r2, [r2, #0]
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003268:	e011      	b.n	800328e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800326a:	f7fd ff6b 	bl	8001144 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d803      	bhi.n	8003282 <HAL_SPI_Receive+0x19c>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d102      	bne.n	8003288 <HAL_SPI_Receive+0x1a2>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800328c:	e04e      	b.n	800332c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1c8      	bne.n	800322c <HAL_SPI_Receive+0x146>
 800329a:	e034      	b.n	8003306 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d115      	bne.n	80032d6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	b292      	uxth	r2, r2
 80032b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80032d4:	e011      	b.n	80032fa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032d6:	f7fd ff35 	bl	8001144 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d803      	bhi.n	80032ee <HAL_SPI_Receive+0x208>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d102      	bne.n	80032f4 <HAL_SPI_Receive+0x20e>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032f8:	e018      	b.n	800332c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ca      	bne.n	800329c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	6839      	ldr	r1, [r7, #0]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fb44 	bl	8003998 <SPI_EndRxTransaction>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003320:	2b00      	cmp	r3, #0
 8003322:	d002      	beq.n	800332a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	75fb      	strb	r3, [r7, #23]
 8003328:	e000      	b.n	800332c <HAL_SPI_Receive+0x246>
  }

error :
 800332a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800333c:	7dfb      	ldrb	r3, [r7, #23]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b08a      	sub	sp, #40	; 0x28
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003354:	2301      	movs	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_SPI_TransmitReceive+0x26>
 8003368:	2302      	movs	r3, #2
 800336a:	e1fb      	b.n	8003764 <HAL_SPI_TransmitReceive+0x41e>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003374:	f7fd fee6 	bl	8001144 <HAL_GetTick>
 8003378:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003380:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003388:	887b      	ldrh	r3, [r7, #2]
 800338a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003390:	7efb      	ldrb	r3, [r7, #27]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d00e      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x6e>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800339c:	d106      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x66>
 80033a6:	7efb      	ldrb	r3, [r7, #27]
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d003      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033b2:	e1cd      	b.n	8003750 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x80>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0x80>
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033cc:	e1c0      	b.n	8003750 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2205      	movs	r2, #5
 80033de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	887a      	ldrh	r2, [r7, #2]
 80033f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	887a      	ldrh	r2, [r7, #2]
 80033fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	887a      	ldrh	r2, [r7, #2]
 800340e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003424:	d802      	bhi.n	800342c <HAL_SPI_TransmitReceive+0xe6>
 8003426:	8a3b      	ldrh	r3, [r7, #16]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d908      	bls.n	800343e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	e007      	b.n	800344e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800344c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d007      	beq.n	800346c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003474:	d97c      	bls.n	8003570 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x13e>
 800347e:	8a7b      	ldrh	r3, [r7, #18]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d169      	bne.n	8003558 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	881a      	ldrh	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003494:	1c9a      	adds	r2, r3, #2
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a8:	e056      	b.n	8003558 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d11b      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x1aa>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x1aa>
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d113      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	1c9a      	adds	r2, r3, #2
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d11c      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x1f2>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	b292      	uxth	r2, r2
 8003516:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003534:	2301      	movs	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003538:	f7fd fe04 	bl	8001144 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003544:	429a      	cmp	r2, r3
 8003546:	d807      	bhi.n	8003558 <HAL_SPI_TransmitReceive+0x212>
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d003      	beq.n	8003558 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003556:	e0fb      	b.n	8003750 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1a3      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x164>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d19d      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x164>
 800356e:	e0df      	b.n	8003730 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_SPI_TransmitReceive+0x23a>
 8003578:	8a7b      	ldrh	r3, [r7, #18]
 800357a:	2b01      	cmp	r3, #1
 800357c:	f040 80cb 	bne.w	8003716 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d912      	bls.n	80035b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	1c9a      	adds	r2, r3, #2
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b02      	subs	r3, #2
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035ae:	e0b2      	b.n	8003716 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d6:	e09e      	b.n	8003716 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d134      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x30a>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02f      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x30a>
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d12c      	bne.n	8003650 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d912      	bls.n	8003626 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	881a      	ldrh	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800361a:	b29b      	uxth	r3, r3
 800361c:	3b02      	subs	r3, #2
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003624:	e012      	b.n	800364c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	330c      	adds	r3, #12
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d148      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x3aa>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d042      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003670:	b29b      	uxth	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d923      	bls.n	80036be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	b292      	uxth	r2, r2
 8003682:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b02      	subs	r3, #2
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d81f      	bhi.n	80036ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	e016      	b.n	80036ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f103 020c 	add.w	r2, r3, #12
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036ec:	2301      	movs	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036f0:	f7fd fd28 	bl	8001144 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d803      	bhi.n	8003708 <HAL_SPI_TransmitReceive+0x3c2>
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d102      	bne.n	800370e <HAL_SPI_TransmitReceive+0x3c8>
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003714:	e01c      	b.n	8003750 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371a:	b29b      	uxth	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	f47f af5b 	bne.w	80035d8 <HAL_SPI_TransmitReceive+0x292>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	f47f af54 	bne.w	80035d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f987 	bl	8003a48 <SPI_EndRxTxTransaction>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	661a      	str	r2, [r3, #96]	; 0x60
 800374c:	e000      	b.n	8003750 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800374e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	; 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800377c:	f7fd fce2 	bl	8001144 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	4413      	add	r3, r2
 800378a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800378c:	f7fd fcda 	bl	8001144 <HAL_GetTick>
 8003790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	0d1b      	lsrs	r3, r3, #20
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037a2:	e054      	b.n	800384e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d050      	beq.n	800384e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037ac:	f7fd fcca 	bl	8001144 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d902      	bls.n	80037c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d13d      	bne.n	800383e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037da:	d111      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	d004      	beq.n	80037f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ee:	d107      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003808:	d10f      	bne.n	800382a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e017      	b.n	800386e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3b01      	subs	r3, #1
 800384c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d19b      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200001f8 	.word	0x200001f8

0800387c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800388a:	f7fd fc5b 	bl	8001144 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	4413      	add	r3, r2
 8003898:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800389a:	f7fd fc53 	bl	8001144 <HAL_GetTick>
 800389e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038a0:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	00da      	lsls	r2, r3, #3
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	0d1b      	lsrs	r3, r3, #20
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80038b8:	e05f      	b.n	800397a <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038c0:	d106      	bne.n	80038d0 <SPI_WaitFifoStateUntilTimeout+0x54>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d103      	bne.n	80038d0 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d6:	d050      	beq.n	800397a <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038d8:	f7fd fc34 	bl	8001144 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d902      	bls.n	80038ee <SPI_WaitFifoStateUntilTimeout+0x72>
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d13d      	bne.n	800396a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003906:	d111      	bne.n	800392c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003910:	d004      	beq.n	800391c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391a:	d107      	bne.n	800392c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003934:	d10f      	bne.n	8003956 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e010      	b.n	800398c <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3b01      	subs	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d197      	bne.n	80038ba <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	200001f8 	.word	0x200001f8

08003998 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ac:	d111      	bne.n	80039d2 <SPI_EndRxTransaction+0x3a>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b6:	d004      	beq.n	80039c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c0:	d107      	bne.n	80039d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	2180      	movs	r1, #128	; 0x80
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fec5 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e023      	b.n	8003a40 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a00:	d11d      	bne.n	8003a3e <SPI_EndRxTransaction+0xa6>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a0a:	d004      	beq.n	8003a16 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d113      	bne.n	8003a3e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff ff2a 	bl	800387c <SPI_WaitFifoStateUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e000      	b.n	8003a40 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f7ff ff0b 	bl	800387c <SPI_WaitFifoStateUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d007      	beq.n	8003a7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e027      	b.n	8003acc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff fe70 	bl	800376c <SPI_WaitFlagStateUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d007      	beq.n	8003aa2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e014      	b.n	8003acc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f7ff fee4 	bl	800387c <SPI_WaitFifoStateUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	f043 0220 	orr.w	r2, r3, #32
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e000      	b.n	8003acc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e040      	b.n	8003b68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7fd f9e8 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	; 0x24
 8003b00:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f82c 	bl	8003b70 <UART_SetConfig>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e022      	b.n	8003b68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 faaa 	bl	8004084 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fb31 	bl	80041c8 <UART_CheckIdleState>
 8003b66:	4603      	mov	r3, r0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b5b0      	push	{r4, r5, r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4bad      	ldr	r3, [pc, #692]	; (8003e50 <UART_SetConfig+0x2e0>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	69f9      	ldr	r1, [r7, #28]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4aa2      	ldr	r2, [pc, #648]	; (8003e54 <UART_SetConfig+0x2e4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a99      	ldr	r2, [pc, #612]	; (8003e58 <UART_SetConfig+0x2e8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d121      	bne.n	8003c3a <UART_SetConfig+0xca>
 8003bf6:	4b99      	ldr	r3, [pc, #612]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d817      	bhi.n	8003c34 <UART_SetConfig+0xc4>
 8003c04:	a201      	add	r2, pc, #4	; (adr r2, 8003c0c <UART_SetConfig+0x9c>)
 8003c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0a:	bf00      	nop
 8003c0c:	08003c1d 	.word	0x08003c1d
 8003c10:	08003c29 	.word	0x08003c29
 8003c14:	08003c23 	.word	0x08003c23
 8003c18:	08003c2f 	.word	0x08003c2f
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	76fb      	strb	r3, [r7, #27]
 8003c20:	e0e7      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c22:	2302      	movs	r3, #2
 8003c24:	76fb      	strb	r3, [r7, #27]
 8003c26:	e0e4      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	76fb      	strb	r3, [r7, #27]
 8003c2c:	e0e1      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	76fb      	strb	r3, [r7, #27]
 8003c32:	e0de      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c34:	2310      	movs	r3, #16
 8003c36:	76fb      	strb	r3, [r7, #27]
 8003c38:	e0db      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a88      	ldr	r2, [pc, #544]	; (8003e60 <UART_SetConfig+0x2f0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d132      	bne.n	8003caa <UART_SetConfig+0x13a>
 8003c44:	4b85      	ldr	r3, [pc, #532]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d828      	bhi.n	8003ca4 <UART_SetConfig+0x134>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0xe8>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003ca5 	.word	0x08003ca5
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003c99 	.word	0x08003c99
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003c93 	.word	0x08003c93
 8003c7c:	08003ca5 	.word	0x08003ca5
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003ca5 	.word	0x08003ca5
 8003c88:	08003c9f 	.word	0x08003c9f
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	76fb      	strb	r3, [r7, #27]
 8003c90:	e0af      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c92:	2302      	movs	r3, #2
 8003c94:	76fb      	strb	r3, [r7, #27]
 8003c96:	e0ac      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c98:	2304      	movs	r3, #4
 8003c9a:	76fb      	strb	r3, [r7, #27]
 8003c9c:	e0a9      	b.n	8003df2 <UART_SetConfig+0x282>
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	76fb      	strb	r3, [r7, #27]
 8003ca2:	e0a6      	b.n	8003df2 <UART_SetConfig+0x282>
 8003ca4:	2310      	movs	r3, #16
 8003ca6:	76fb      	strb	r3, [r7, #27]
 8003ca8:	e0a3      	b.n	8003df2 <UART_SetConfig+0x282>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6d      	ldr	r2, [pc, #436]	; (8003e64 <UART_SetConfig+0x2f4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d120      	bne.n	8003cf6 <UART_SetConfig+0x186>
 8003cb4:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cbe:	2b30      	cmp	r3, #48	; 0x30
 8003cc0:	d013      	beq.n	8003cea <UART_SetConfig+0x17a>
 8003cc2:	2b30      	cmp	r3, #48	; 0x30
 8003cc4:	d814      	bhi.n	8003cf0 <UART_SetConfig+0x180>
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d009      	beq.n	8003cde <UART_SetConfig+0x16e>
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	d810      	bhi.n	8003cf0 <UART_SetConfig+0x180>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <UART_SetConfig+0x168>
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d006      	beq.n	8003ce4 <UART_SetConfig+0x174>
 8003cd6:	e00b      	b.n	8003cf0 <UART_SetConfig+0x180>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	76fb      	strb	r3, [r7, #27]
 8003cdc:	e089      	b.n	8003df2 <UART_SetConfig+0x282>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	76fb      	strb	r3, [r7, #27]
 8003ce2:	e086      	b.n	8003df2 <UART_SetConfig+0x282>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	76fb      	strb	r3, [r7, #27]
 8003ce8:	e083      	b.n	8003df2 <UART_SetConfig+0x282>
 8003cea:	2308      	movs	r3, #8
 8003cec:	76fb      	strb	r3, [r7, #27]
 8003cee:	e080      	b.n	8003df2 <UART_SetConfig+0x282>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	76fb      	strb	r3, [r7, #27]
 8003cf4:	e07d      	b.n	8003df2 <UART_SetConfig+0x282>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a5b      	ldr	r2, [pc, #364]	; (8003e68 <UART_SetConfig+0x2f8>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d120      	bne.n	8003d42 <UART_SetConfig+0x1d2>
 8003d00:	4b56      	ldr	r3, [pc, #344]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d0c:	d013      	beq.n	8003d36 <UART_SetConfig+0x1c6>
 8003d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d10:	d814      	bhi.n	8003d3c <UART_SetConfig+0x1cc>
 8003d12:	2b80      	cmp	r3, #128	; 0x80
 8003d14:	d009      	beq.n	8003d2a <UART_SetConfig+0x1ba>
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d810      	bhi.n	8003d3c <UART_SetConfig+0x1cc>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <UART_SetConfig+0x1b4>
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d006      	beq.n	8003d30 <UART_SetConfig+0x1c0>
 8003d22:	e00b      	b.n	8003d3c <UART_SetConfig+0x1cc>
 8003d24:	2300      	movs	r3, #0
 8003d26:	76fb      	strb	r3, [r7, #27]
 8003d28:	e063      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	76fb      	strb	r3, [r7, #27]
 8003d2e:	e060      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d30:	2304      	movs	r3, #4
 8003d32:	76fb      	strb	r3, [r7, #27]
 8003d34:	e05d      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d36:	2308      	movs	r3, #8
 8003d38:	76fb      	strb	r3, [r7, #27]
 8003d3a:	e05a      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	76fb      	strb	r3, [r7, #27]
 8003d40:	e057      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a49      	ldr	r2, [pc, #292]	; (8003e6c <UART_SetConfig+0x2fc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d125      	bne.n	8003d98 <UART_SetConfig+0x228>
 8003d4c:	4b43      	ldr	r3, [pc, #268]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d5a:	d017      	beq.n	8003d8c <UART_SetConfig+0x21c>
 8003d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d60:	d817      	bhi.n	8003d92 <UART_SetConfig+0x222>
 8003d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d66:	d00b      	beq.n	8003d80 <UART_SetConfig+0x210>
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d811      	bhi.n	8003d92 <UART_SetConfig+0x222>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <UART_SetConfig+0x20a>
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d006      	beq.n	8003d86 <UART_SetConfig+0x216>
 8003d78:	e00b      	b.n	8003d92 <UART_SetConfig+0x222>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	76fb      	strb	r3, [r7, #27]
 8003d7e:	e038      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d80:	2302      	movs	r3, #2
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	e035      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d86:	2304      	movs	r3, #4
 8003d88:	76fb      	strb	r3, [r7, #27]
 8003d8a:	e032      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e02f      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d92:	2310      	movs	r3, #16
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e02c      	b.n	8003df2 <UART_SetConfig+0x282>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a2d      	ldr	r2, [pc, #180]	; (8003e54 <UART_SetConfig+0x2e4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d125      	bne.n	8003dee <UART_SetConfig+0x27e>
 8003da2:	4b2e      	ldr	r3, [pc, #184]	; (8003e5c <UART_SetConfig+0x2ec>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db0:	d017      	beq.n	8003de2 <UART_SetConfig+0x272>
 8003db2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db6:	d817      	bhi.n	8003de8 <UART_SetConfig+0x278>
 8003db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbc:	d00b      	beq.n	8003dd6 <UART_SetConfig+0x266>
 8003dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc2:	d811      	bhi.n	8003de8 <UART_SetConfig+0x278>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <UART_SetConfig+0x260>
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d006      	beq.n	8003ddc <UART_SetConfig+0x26c>
 8003dce:	e00b      	b.n	8003de8 <UART_SetConfig+0x278>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	76fb      	strb	r3, [r7, #27]
 8003dd4:	e00d      	b.n	8003df2 <UART_SetConfig+0x282>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	76fb      	strb	r3, [r7, #27]
 8003dda:	e00a      	b.n	8003df2 <UART_SetConfig+0x282>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	76fb      	strb	r3, [r7, #27]
 8003de0:	e007      	b.n	8003df2 <UART_SetConfig+0x282>
 8003de2:	2308      	movs	r3, #8
 8003de4:	76fb      	strb	r3, [r7, #27]
 8003de6:	e004      	b.n	8003df2 <UART_SetConfig+0x282>
 8003de8:	2310      	movs	r3, #16
 8003dea:	76fb      	strb	r3, [r7, #27]
 8003dec:	e001      	b.n	8003df2 <UART_SetConfig+0x282>
 8003dee:	2310      	movs	r3, #16
 8003df0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <UART_SetConfig+0x2e4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	f040 8087 	bne.w	8003f0c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dfe:	7efb      	ldrb	r3, [r7, #27]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d837      	bhi.n	8003e74 <UART_SetConfig+0x304>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <UART_SetConfig+0x29c>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e75 	.word	0x08003e75
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	08003e75 	.word	0x08003e75
 8003e1c:	08003e3f 	.word	0x08003e3f
 8003e20:	08003e75 	.word	0x08003e75
 8003e24:	08003e75 	.word	0x08003e75
 8003e28:	08003e75 	.word	0x08003e75
 8003e2c:	08003e47 	.word	0x08003e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7fe fa00 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8003e34:	6178      	str	r0, [r7, #20]
        break;
 8003e36:	e022      	b.n	8003e7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <UART_SetConfig+0x300>)
 8003e3a:	617b      	str	r3, [r7, #20]
        break;
 8003e3c:	e01f      	b.n	8003e7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3e:	f7fe f961 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8003e42:	6178      	str	r0, [r7, #20]
        break;
 8003e44:	e01b      	b.n	8003e7e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4a:	617b      	str	r3, [r7, #20]
        break;
 8003e4c:	e017      	b.n	8003e7e <UART_SetConfig+0x30e>
 8003e4e:	bf00      	nop
 8003e50:	efff69f3 	.word	0xefff69f3
 8003e54:	40008000 	.word	0x40008000
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40004400 	.word	0x40004400
 8003e64:	40004800 	.word	0x40004800
 8003e68:	40004c00 	.word	0x40004c00
 8003e6c:	40005000 	.word	0x40005000
 8003e70:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	76bb      	strb	r3, [r7, #26]
        break;
 8003e7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80f1 	beq.w	8004068 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d305      	bcc.n	8003ea2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d902      	bls.n	8003ea8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	76bb      	strb	r3, [r7, #26]
 8003ea6:	e0df      	b.n	8004068 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f04f 0100 	mov.w	r1, #0
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	020b      	lsls	r3, r1, #8
 8003eba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ebe:	0202      	lsls	r2, r0, #8
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	6849      	ldr	r1, [r1, #4]
 8003ec4:	0849      	lsrs	r1, r1, #1
 8003ec6:	4608      	mov	r0, r1
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	1814      	adds	r4, r2, r0
 8003ece:	eb43 0501 	adc.w	r5, r3, r1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc f972 	bl	80001c8 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef2:	d308      	bcc.n	8003f06 <UART_SetConfig+0x396>
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efa:	d204      	bcs.n	8003f06 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	60da      	str	r2, [r3, #12]
 8003f04:	e0b0      	b.n	8004068 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	76bb      	strb	r3, [r7, #26]
 8003f0a:	e0ad      	b.n	8004068 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f14:	d15c      	bne.n	8003fd0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003f16:	7efb      	ldrb	r3, [r7, #27]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d828      	bhi.n	8003f6e <UART_SetConfig+0x3fe>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x3b4>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08003f6f 	.word	0x08003f6f
 8003f34:	08003f5f 	.word	0x08003f5f
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f6f 	.word	0x08003f6f
 8003f40:	08003f6f 	.word	0x08003f6f
 8003f44:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe f974 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	6178      	str	r0, [r7, #20]
        break;
 8003f4e:	e013      	b.n	8003f78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe f986 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 8003f54:	6178      	str	r0, [r7, #20]
        break;
 8003f56:	e00f      	b.n	8003f78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b49      	ldr	r3, [pc, #292]	; (8004080 <UART_SetConfig+0x510>)
 8003f5a:	617b      	str	r3, [r7, #20]
        break;
 8003f5c:	e00c      	b.n	8003f78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7fe f8d1 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8003f62:	6178      	str	r0, [r7, #20]
        break;
 8003f64:	e008      	b.n	8003f78 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6a:	617b      	str	r3, [r7, #20]
        break;
 8003f6c:	e004      	b.n	8003f78 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	76bb      	strb	r3, [r7, #26]
        break;
 8003f76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d074      	beq.n	8004068 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005a      	lsls	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	441a      	add	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b0f      	cmp	r3, #15
 8003f9a:	d916      	bls.n	8003fca <UART_SetConfig+0x45a>
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	d212      	bcs.n	8003fca <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f023 030f 	bic.w	r3, r3, #15
 8003fac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	89fa      	ldrh	r2, [r7, #14]
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	e04e      	b.n	8004068 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	76bb      	strb	r3, [r7, #26]
 8003fce:	e04b      	b.n	8004068 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fd0:	7efb      	ldrb	r3, [r7, #27]
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d827      	bhi.n	8004026 <UART_SetConfig+0x4b6>
 8003fd6:	a201      	add	r2, pc, #4	; (adr r2, 8003fdc <UART_SetConfig+0x46c>)
 8003fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fdc:	08004001 	.word	0x08004001
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	08004011 	.word	0x08004011
 8003fe8:	08004027 	.word	0x08004027
 8003fec:	08004017 	.word	0x08004017
 8003ff0:	08004027 	.word	0x08004027
 8003ff4:	08004027 	.word	0x08004027
 8003ff8:	08004027 	.word	0x08004027
 8003ffc:	0800401f 	.word	0x0800401f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004000:	f7fe f918 	bl	8002234 <HAL_RCC_GetPCLK1Freq>
 8004004:	6178      	str	r0, [r7, #20]
        break;
 8004006:	e013      	b.n	8004030 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004008:	f7fe f92a 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 800400c:	6178      	str	r0, [r7, #20]
        break;
 800400e:	e00f      	b.n	8004030 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <UART_SetConfig+0x510>)
 8004012:	617b      	str	r3, [r7, #20]
        break;
 8004014:	e00c      	b.n	8004030 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004016:	f7fe f875 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800401a:	6178      	str	r0, [r7, #20]
        break;
 800401c:	e008      	b.n	8004030 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004022:	617b      	str	r3, [r7, #20]
        break;
 8004024:	e004      	b.n	8004030 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	76bb      	strb	r3, [r7, #26]
        break;
 800402e:	bf00      	nop
    }

    if (pclk != 0U)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	085a      	lsrs	r2, r3, #1
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	441a      	add	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	b29b      	uxth	r3, r3
 800404a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b0f      	cmp	r3, #15
 8004050:	d908      	bls.n	8004064 <UART_SetConfig+0x4f4>
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d204      	bcs.n	8004064 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	e001      	b.n	8004068 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004074:	7ebb      	ldrb	r3, [r7, #26]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bdb0      	pop	{r4, r5, r7, pc}
 800407e:	bf00      	nop
 8004080:	00f42400 	.word	0x00f42400

08004084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004182:	d10a      	bne.n	800419a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80041d6:	f7fc ffb5 	bl	8001144 <HAL_GetTick>
 80041da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d10e      	bne.n	8004208 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f82a 	bl	8004252 <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e020      	b.n	800424a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b04      	cmp	r3, #4
 8004214:	d10e      	bne.n	8004234 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004216:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f814 	bl	8004252 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e00a      	b.n	800424a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	4613      	mov	r3, r2
 8004260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004262:	e05d      	b.n	8004320 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426a:	d059      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426c:	f7fc ff6a 	bl	8001144 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	429a      	cmp	r2, r3
 800427a:	d302      	bcc.n	8004282 <UART_WaitOnFlagUntilTimeout+0x30>
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d11b      	bne.n	80042ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004290:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e042      	b.n	8004340 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d02b      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d6:	d123      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042f0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e00f      	b.n	8004340 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d092      	beq.n	8004264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <__libc_init_array>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4d0d      	ldr	r5, [pc, #52]	; (8004380 <__libc_init_array+0x38>)
 800434c:	4c0d      	ldr	r4, [pc, #52]	; (8004384 <__libc_init_array+0x3c>)
 800434e:	1b64      	subs	r4, r4, r5
 8004350:	10a4      	asrs	r4, r4, #2
 8004352:	2600      	movs	r6, #0
 8004354:	42a6      	cmp	r6, r4
 8004356:	d109      	bne.n	800436c <__libc_init_array+0x24>
 8004358:	4d0b      	ldr	r5, [pc, #44]	; (8004388 <__libc_init_array+0x40>)
 800435a:	4c0c      	ldr	r4, [pc, #48]	; (800438c <__libc_init_array+0x44>)
 800435c:	f000 f820 	bl	80043a0 <_init>
 8004360:	1b64      	subs	r4, r4, r5
 8004362:	10a4      	asrs	r4, r4, #2
 8004364:	2600      	movs	r6, #0
 8004366:	42a6      	cmp	r6, r4
 8004368:	d105      	bne.n	8004376 <__libc_init_array+0x2e>
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004370:	4798      	blx	r3
 8004372:	3601      	adds	r6, #1
 8004374:	e7ee      	b.n	8004354 <__libc_init_array+0xc>
 8004376:	f855 3b04 	ldr.w	r3, [r5], #4
 800437a:	4798      	blx	r3
 800437c:	3601      	adds	r6, #1
 800437e:	e7f2      	b.n	8004366 <__libc_init_array+0x1e>
 8004380:	0800440c 	.word	0x0800440c
 8004384:	0800440c 	.word	0x0800440c
 8004388:	0800440c 	.word	0x0800440c
 800438c:	08004410 	.word	0x08004410

08004390 <memset>:
 8004390:	4402      	add	r2, r0
 8004392:	4603      	mov	r3, r0
 8004394:	4293      	cmp	r3, r2
 8004396:	d100      	bne.n	800439a <memset+0xa>
 8004398:	4770      	bx	lr
 800439a:	f803 1b01 	strb.w	r1, [r3], #1
 800439e:	e7f9      	b.n	8004394 <memset+0x4>

080043a0 <_init>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr

080043ac <_fini>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	bf00      	nop
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr
